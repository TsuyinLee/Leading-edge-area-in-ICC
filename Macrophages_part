setwd("D:\\leadtest\\immune\\myeloid")

library(Seurat)
library(ggplot2)
library(clustree)
library(cowplot)
library(dplyr)
#load files
load("msce_marker.Rdata")
table(msce$celltype)

name = "Macrophage"
####retract macrophage##
masce <- subset(msce, cells = colnames(msce)[which(msce$celltype %in% c('Macrophage'))])
masce$type <- factor(masce$type,levels = c("N","J","T"))
table(masce$celltype)

setwd("D:\\leadtest\\immune\\myeloid\\macro")
save(masce,file ="macro.Rdata")
rm(list =ls());gc()
load("macro.Rdata")
table(masce$type,masce$patient_id)
masce$type <- factor(masce$type,levels = c("N","J","T"))






#CCA_to remove batch effect####
#
DefaultAssay(masce) <- "RNA"
masce = FindVariableFeatures(masce)
masce = ScaleData(masce#,vars.to.regress = c("nFeature_RNA", "percent_mito")
)
masce = RunPCA(masce, npcs = 50)
masce = RunTSNE(masce, dims = 1:20)
masce = RunUMAP(masce, dims = 1:20)
ElbowPlot(masce, ndims=50, reduction="pca")

dim(masce) 
masce
#
masce.list <- SplitObject(masce, split.by = "patient")
masce.list

for (i in 1:length(masce.list)) {
  print(i)
  masce.list[[i]] <- NormalizeData(masce.list[[i]], verbose = FALSE)
  masce.list[[i]] <- FindVariableFeatures(masce.list[[i]], selection.method = "vst", 
                                          nfeatures = 2000, verbose = FALSE)
}
#
alldata.anchors <- FindIntegrationAnchors(object.list = masce.list, dims = 1:20, 
                                          reduction = "cca")
masce.int <- IntegrateData(anchorset = alldata.anchors, dims = 1:20, new.assay.name = "CCA")
names(masce.int@assays)
masce.int@active.assay
masce.int=ScaleData(masce.int)
masce.int=RunPCA(masce.int, npcs = 50)
#masce.int=RunTSNE(masce.int, dims = 1:20)
masce.int=RunUMAP(masce.int, dims = 1:20)
names(masce.int@reductions)
names(masce@reductions)
colnames(masce@meta.data) 

p1.compare=plot_grid(ncol = 3,
                     DimPlot(masce, reduction = "pca", group.by = "orig.ident")+NoAxes()+ggtitle("PCA raw_data"),
                    # DimPlot(masce, reduction = "tsne", group.by = "orig.ident")+NoAxes()+ggtitle("tSNE raw_data"),
                     DimPlot(masce, reduction = "umap", group.by = "orig.ident")+NoAxes()+ggtitle("UMAP raw_data"),
                     
                     DimPlot(masce.int, reduction = "pca", group.by = "orig.ident")+NoAxes()+ggtitle("PCA integrated"),
                    # DimPlot(masce.int, reduction = "tsne", group.by = "orig.ident")+NoAxes()+ggtitle("tSNE integrated"),
                     DimPlot(masce.int, reduction = "umap", group.by = "orig.ident")+NoAxes()+ggtitle("UMAP integrated")
)
p1.compare
ggsave(plot=p1.compare,filename=paste0(name,"_Before&After_int.pdf"),width = 18,height = 12)
masce=masce.int
masce@active.assay
masce=FindNeighbors(masce, dims = 1:20, k.param = 60, prune.SNN = 1/15)
#
for (res in c(0.01, 0.05, 0.1, 0.2, 0.3, 0.5, 0.8,1,1.5,2,2.5,3)) {
  masce=FindClusters(masce, graph.name = "CCA_snn", resolution = res, algorithm = 1)
}
apply(masce@meta.data[,grep("CCA_snn_res",colnames(masce@meta.data))],2,table)


p1_dim=plot_grid(ncol = 3, 
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.0.01") + ggtitle("louvain_0.01"), 
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.0.05") + ggtitle("louvain_0.05"), 
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.0.1") +  ggtitle("louvain_0.1"),
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.0.2") +  ggtitle("louvain_0.2"), 
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.0.3") +  ggtitle("louvain_0.3"), 
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.0.5") +  ggtitle("louvain_0.5") 
)
p1_dim
ggsave(plot=p1_dim, filename=paste0(name,"_Dimplot_diff_resolution_low.pdf"),width = 14,height = 12)

p1_dim=plot_grid(ncol = 3, 
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.0.8") + ggtitle("louvain_0.8"), 
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.1") +   ggtitle("louvain_1"), 
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.1.5") + ggtitle("louvain_1.5"), 
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.2") +   ggtitle("louvain_2"),
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.2.5") + ggtitle("louvain_2.5"), 
                 DimPlot(masce, reduction = "umap", group.by = "CCA_snn_res.3") +   ggtitle("louvain_3")
)
p1_dim
ggsave(plot=p1_dim, filename=paste0(name,"_Dimplot_diff_resolution_high.pdf"),height = 12,width = 18)


tree=clustree(masce@meta.data, prefix = "CCA_snn_res.")
tree
ggsave(plot=tree, filename=paste0(name,"_Tree_diff_resolution.pdf"),width = 12,height = 12)


#set resolution####
sel.clust = "CCA_snn_res.0.5"
masce <- SetIdent(masce, value = sel.clust)
masce@active.ident <- factor(masce@active.ident,levels = c(0:(length(table(masce@active.ident))-1)))
table(masce@active.ident) 
masce.markers <- FindAllMarkers(object = masce, only.pos = TRUE, min.pct = 0.25, 
                                thresh.use = 0.25)
write.csv(masce.markers,"masce.markers.csv")
library(dplyr) 
top5 <- masce.markers %>% group_by(cluster) %>% top_n(5, avg_log2FC)
DoHeatmap(masce,top5$gene,size=3)
genes_to_check <-top5$gene
#ggsave(filename=paste0(sel.clust,'_masce.markers_heatmap.pdf'),width =18,height = 12)

DotPlot(masce, features = unique(genes_to_check),
        assay='RNA')  + coord_flip()+scale_color_gradient2(low="blue",high="red",mid="white",midpoint = 0)

#cell_identification####
celltype=data.frame(ClusterID=0:(length(table(Idents(masce)))-1),celltype=0:(length(table(Idents(masce)))-1)) 

celltype[celltype$ClusterID %in% c(0
),2]='Mac_c0_JUN'
celltype[celltype$ClusterID %in% c(1,6
),2]='Mac_c1_CXCL10'
celltype[celltype$ClusterID %in% c(2
),2]='Mac_c2_APOC1'
celltype[celltype$ClusterID %in% c(3
),2]='Mac_c3_IL1B'
celltype[celltype$ClusterID %in% c(4,8
),2]='Mac_c4_FOLR2'
celltype[celltype$ClusterID %in% c(5
),2]='Mac_c5_MKI67'
celltype[celltype$ClusterID %in% c(7
),2]='Mac_c6_SPP1'
celltype[celltype$ClusterID %in% c(9
),2]='Unknown'
head(celltype)
celltype
table(celltype$celltype)
masce@meta.data$celltype = "NA"
for(i in 1:nrow(celltype)){
  masce@meta.data[which(masce@active.ident == celltype$ClusterID[i]),'celltype'] <- celltype$celltype[i]}
table(masce@meta.data$celltype)
th=theme(axis.text.x = element_text(angle = 45, 
                                    vjust = 0.5, hjust=0.5)) 
genes_to_check=c(
  "BAG3", "HSPD1", "DNAJB1", "HSPH1", "DNAJB6","ZFAND2A","JUN",
  "ANKRD36B","CXCL10", "SFMBT2","PLXDC2","KCNQ3",
  "APOC1", "S100A6","S100A10","LGALS1","S100A4","APOC2",
  "PID1","IL1B","CCL4L2","CCL3L1","NLRP3","AFF3",
  "C1QA","FOLR2","MARCO","SELENOP","SLC40A1",
  'TPX2','MKI67','UBE2C','TOP2A',
  "SPP1","CSTB","CCL18","VCAN","MMP12","NUPR1","PLIN2"
)

th=theme(axis.text.x = element_text(angle = 90)) 
DotPlot(masce, features = unique(genes_to_check),
        assay='RNA' ,group.by ='celltype' )+th+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
name="Macrophage"
ggsave(paste0(name,"_markers_by_celltype.pdf"),width = 10,height =3)

DimPlot(masce, reduction = "umap", group.by = "celltype",label = T) +theme(aspect.ratio = 1)#用
ggsave(paste0(name,"umap_celltype.pdf"),height = 6,width = 7.6)
DimPlot(masce, reduction = "tsne", group.by = "celltype",label = T)+theme(aspect.ratio = 1) #用
ggsave(paste0(name,"_tsne_celltype.pdf"),height = 6,width = 7.6)

masce$celltype_version1 <- masce$celltype

#unknown_removal####
table(masce$celltype)
Idents(masce) <- "celltype"
save(masce,file="brefore_filter_masce.Rdata")
load("brefore_filter_masce.Rdata")
table(masce$celltype)
masce <- subset(masce, cells = colnames(masce)[which(!masce$celltype %in% c('Unknown',"T_cell"))])
table(masce$celltype)
masce = RunUMAP(masce, dims = 1:20)


#cell_proportion####
df <- FetchData(masce, vars = c('celltype', 'type',"patient_id"))
table(df$type)
table(df$patient_id)
prop.table(table(df$celltype))
prop.table(table(df$type))
table(df$celltype, df$type)
table(df$celltype, df$patient_id)
Cellratio <- prop.table(table(df$celltype,df$patient_id),margin = 2)
Cellratio <- as.data.frame(Cellratio)
colnames(Cellratio) <- c('celltype',"patient_id","Freq")
Cellratio$type <- ""
Cellratio$type <- substr(Cellratio$patient_id,5,5)
Cellratio$patient <- substr(Cellratio$patient_id,1,3)

#plot1
ggplot(Cellratio, aes(x=type, y=Freq,color=type)) + 
  geom_jitter(width = 0.2, alpha = 0.5)+facet_wrap(~celltype)  
library(ggsci)
library(tidyr)
library(ggpubr)
#
Cellratio$type <- factor(Cellratio$type,levels=c("N","J","T"))
class(Cellratio$type)
#plot2
ggboxplot(Cellratio, x = "celltype", y = "Freq",
          fill = "type", palette = c("#2B9885","#DA6C4F","#E2BE6A"))+
  stat_compare_means(aes(group = type),
                     method = "wilcox.test",
                     label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
                                      symbols = c("***", "**", "*", "")))
#ggsave("immune_prop_by_type.pdf",width = 6,height = 4)#用
allcolour=c("#2F89CA","#F2C31C","#DD1F4D","#FFA500","#9370DB",#1-5
            "#98FB98","#F08080","#1E90FF","#7CFC00","#FFFF00",#6-10
            "#808000","#FF00FF","#FA8072","#7B68EE","#9400D3",#11-15
            "#800080","#A0522D","#D2B48C","#D2691E","#87CEEB",#16-20
            "#40E0D0","#5F9EA0","#063A94","#0000CD","#008B8B",#21-25
            "#FFE4B5","#8A2BE2","#228B22","#E9967A","#4682B4",
            "#32CD32","#F0E68C","#FFFFE0","#EE82EE","#FF6347",
            "#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887")
#plot3##
my_comparisons = list( c("N", "J"),c("N", "T"),c("J", "T"))
ggplot(Cellratio, aes(x = type, y = Freq))+ 
  labs(y="Proportion",x= "Position",title = "Cell composition")+
  scale_colour_manual(name="", values =allcolour)+
  geom_boxplot(aes(color = type),position=position_dodge(0.5),size=0.4,
               outlier.alpha = 1, outlier.size = 0.5)+
  theme_bw() + 
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank())+
  scale_y_continuous(labels = scales::percent
                     #limits = c(0, max(Cellratio$Freq)+0.1)
  )+#根据p值的范围调整
  geom_point(data = Cellratio, aes(x = type, y = Freq, fill=patient), #patient_id改成样本号
             size = 5, shape = 21,stroke = 0.5,alpha = 0.5)+
  facet_wrap(~ celltype,scales = "free",ncol = 4) + 
  stat_compare_means(aes(group = type),comparisons = my_comparisons,
                     method = "wilcox.test",#"wilcox.test" 多组用，两组用t.test
                     #ref.group = "HCC",
                     size = 5,
                     hide.ns =T,
                     label = "p.signif",
                     #label.y=max(Cellratio$Freq),
                     #label.x = 1.5,#两个名称之间
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
                                      symbols = c("***", "**", "*", "")
                     )
  )
#ggsave(paste0(name,"_immune_prop_by_type2.pdf"),width = 8,height = 4)#用

allcolour=c("#1CB4B8","#F2C31C","#DD1F4D","#FFA500","#9370DB",#1-5
            "#98FB98","#F08080","#1E90FF","#7CFC00","#FFFF00",#6-10
            "#808000","#FF00FF","#FA8072","#7B68EE","#9400D3",#11-15
            "#800080","#A0522D","#D2B48C","#D2691E","#87CEEB",#16-20
            "#40E0D0","#5F9EA0","#063A94","#0000CD","#008B8B",#21-25
            "#FFE4B5","#8A2BE2","#228B22","#E9967A","#4682B4",
            "#32CD32","#F0E68C","#FFFFE0","#EE82EE","#FF6347",
            "#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887")
my_comparisons = list( c("N", "J"),c("N", "T"),c("J", "T"))
#plot4
ggboxplot(Cellratio, x = "type", y = "Freq",
          fill = "type", palette = allcolour)+
  theme(legend.position="right", panel.border = element_rect(color = "black",  fill = NA))+
  facet_wrap(~ celltype,scales = "free",ncol = 4) + 
  geom_point(data = Cellratio, aes(x = type, 
                                   y = Freq, 
                                   color = patient), #patient_id改成样本号
             size = 6, 
             shape = 21,
             stroke = 0.5,alpha = 0.5)+
  stat_compare_means(comparisons = my_comparisons,
                     method = "wilcox.test",#"wilcox.test" 多组用，两组用t.test
                     label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
                                      symbols = c("***", "**", "*", "")))+ggtitle("Cell type")+
  theme(plot.title = element_text(hjust = 0.5))
ggsave("immune_prop_by_type2.pdf",width = 8,height = 6)#用



#sce$scelltype <- sce$celltype
table(masce$celltype)
sce$scelltype[match(colnames(masce),colnames(sce))]<-masce$celltype%>%as.character()
table(sce$scelltype)
table(sce$celltype)

#M1_M2_gene####
genes_to_check = c("IL1B","TNF","CXCL9","CXCL10","CXCL11","FCGR1A","IRF1","HLA-DPB1","CD86","MARCO","IL2RA","CXCR4","IL27RA","CSF1R","CCL2","CCL18","CTSD","GAS7","HMOX1","PPARG","LIPA","CD209","CLEC7A","F13A1","MAF","MS4A4A","SPP1"
)
DotPlot(masce, features = unique(genes_to_check),group.by = "celltype",
        assay='RNA')+coord_flip()+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)+theme(axis.text.x = element_text(angle = 90))
ggsave("M1_M2_gene_celltype.pdf",height = 7,width = 4.5)

genes_to_check = c("IL1B","TNF","CXCL9","CXCL10","CXCL11","FCGR1A","IRF1","HLA-DPB1","CD86","MARCO","IL2RA","CXCR4","IL27RA","CSF1R","CCL2","CCL18","CTSD","GAS7","HMOX1","PPARG","LIPA","CD209","CLEC7A","F13A1","MAF","MS4A4A","SPP1"
)
DotPlot(masce, features = unique(genes_to_check),group.by = "type",
        assay='RNA')+coord_flip()+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)+theme(axis.text.x = element_text(angle = 0))
ggsave("M1_M2_gene_type.pdf",height = 7,width = 4)

#MMP9####
genes_to_check = c("MMP9","MMP12","MMP14","VEGFA","VEGFB","CSF1"
)
DotPlot(masce, features = unique(genes_to_check),group.by = "celltype",
        assay='RNA')+coord_flip()+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)+theme(axis.text.x = element_text(angle = 90))
ggsave("MMP9_gene_celltype.pdf",height = 3,width = 4.2)

##CD274###
name="Macro"
genes_to_check = c("CD274","TNF","IL1B","LTB"#"IL6","IL1A",
)
DotPlot(masce, features = unique(genes_to_check),
        assay='RNA' ,group.by = 'type',cols = c("white", "red"))+coord_flip()+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave(paste0(name,"_gene_CD274.pdf"),width = 4,height =1.5)
DotPlot(masce, features = unique(genes_to_check),
        assay='RNA' ,group.by = 'celltype',cols = c("white", "red"))+coord_flip()+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)+theme(axis.text.x = element_text(angle = 90)) 
ggsave(paste0(name,"_gene_CD274_celltype.pdf"),width = 5,height =6)
##IL10###
genes_to_check = c("SPP1","TREM2","SIRPA",
  "IL10","PGE2","TGFB1","MMP2","MMP9","VEGFA","VEGFB","CSF1R","PDGFA","PDGFB",#,"CSF1","HIF1A","HGF","CTSB","CTSK"
  "CD274","LILRB1","TNF","IL1B","PLIN2"#"IL6","IL1A",
)
DotPlot(masce, features = unique(genes_to_check),
        assay='RNA' ,group.by = 'type',cols = c("white", "red"))+coord_flip()+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
name="Macro"
ggsave(paste0(name,"_gene_IL10_position.pdf"),width = 3.8,height =4)
DotPlot(masce, features = unique(genes_to_check),
        assay='RNA' ,group.by = 'celltype',cols = c("white", "red"))+coord_flip()+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)+theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.3))
ggsave(paste0(name,"_gene_IL10_celltype.pdf"),width = 3.8,height =5)

#GSVA####
library(Seurat)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(limma)

genesets <- msigdbr(species = "Homo sapiens", category = "H") 
genesets<- msigdbr(species = "Homo sapiens", category = "C2",subcategory = "CP:KEGG")
genesets <- subset(genesets, select = c("gs_name","gene_symbol")) %>% as.data.frame()
genesets <- split(genesets$gene_symbol, genesets$gs_name)

Idents(masce) <- "type" 
expr <- AverageExpression(masce, assays = "RNA", slot = "data")[[1]]
expr <- expr[rowSums(expr)>0,] 
expr <- as.matrix(expr)
head(expr)

gsva.res <- gsva(expr, genesets, method="gsva") 
gsva.df <- data.frame(Genesets=rownames(gsva.res), gsva.res, check.names = F)
pdf("GSVA.pdf",height = 10,width=6)
pheatmap::pheatmap(gsva.res, show_colnames = T, 
                   #scale = "row",
                   angle_col = "45",
                   color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
dev.off()


#cell_proportion1####
Idents(masce) <- masce$celltype
table(masce$patient_id)#查看各组细胞数
prop.table(table(Idents(masce)))
table(Idents(masce), masce$patient_id)#各组不同细胞群细胞数
Cellratio <- prop.table(table(Idents(masce), masce$patient_id), margin = 2)#计算各组样本不同细胞群比例
Cellratio <- as.data.frame(Cellratio)
colnames(Cellratio)[1] <- "Cell_type"
allcolour=c("#DC143C","#0000FF","#20B2AA","#FFA500","#9370DB","#98FB98","#F08080","#1E90FF","#7CFC00","#FFFF00",
            "#808000","#FF00FF","#FA8072","#7B68EE","#9400D3","#800080","#A0522D","#D2B48C","#D2691E","#87CEEB","#40E0D0","#5F9EA0",
            "#FF1493","#0000CD","#008B8B","#FFE4B5","#8A2BE2","#228B22","#E9967A","#4682B4","#32CD32","#F0E68C","#FFFFE0","#EE82EE",
            "#FF6347","#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887")
library(ggplot2)
ggplot(Cellratio) + 
  geom_bar(aes(x =Var2, y= Freq, fill = Cell_type),stat = "identity",width = 0.7,size = 0.5,colour = '#222222')+ 
  theme_classic() +
  labs(x='Sample',y = 'Ratio')+
  scale_fill_manual(values = allcolour)
#+theme(panel.border = element_rect(fill=NA,color="black", size=0.5, linetype="solid"))
name="Macrophage"
ggsave(paste0(name,"propotion_of_all_celltype_by_patient_id.pdf"),width = 8,height = 6)

#cell_proportion2####
Idents(masce) <- masce$celltype
table(masce$type)#查看各组细胞数
prop.table(table(Idents(masce)))
table(Idents(masce), masce$type)#各组不同细胞群细胞数
Cellratio <- prop.table(table(Idents(masce), masce$type), margin = 2)#计算各组样本不同细胞群比例
Cellratio <- as.data.frame(Cellratio)
colnames(Cellratio)[1] <- "Cell_type"
allcolour=c("#DC143C","#0000FF","#20B2AA","#FFA500","#9370DB","#98FB98","#F08080","#1E90FF","#7CFC00","#FFFF00",
            "#808000","#FF00FF","#FA8072","#7B68EE","#9400D3","#800080","#A0522D","#D2B48C","#D2691E","#87CEEB","#40E0D0","#5F9EA0",
            "#FF1493","#0000CD","#008B8B","#FFE4B5","#8A2BE2","#228B22","#E9967A","#4682B4","#32CD32","#F0E68C","#FFFFE0","#EE82EE",
            "#FF6347","#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887")
library(ggplot2)
ggplot(Cellratio) + 
  geom_bar(aes(x =Var2, y= Freq, fill = Cell_type),stat = "identity",width = 0.7,size = 0.5,colour = '#222222')+ 
  theme_classic() +
  labs(x='Sample',y = 'Ratio')+
  scale_fill_manual(values = allcolour)
#+theme(panel.border = element_rect(fill=NA,color="black", size=0.5, linetype="solid"))
ggsave("propotion_of_all_celltype_by_type.pdf",width = 4,height = 6)


#MHC_related genes####
genes_to_check = c("HLA-DPA1","HLA-DPB1","HLA-DQA1","HLA-DQB1",
                   "HLA-DRA","HLA-DRB1","HLA-DRB5",
                   "HLA-E","HLA-C","HLA-B","HLA-A",
                   "CXCL1","CXCL8","CXCL2",
                   "IL10","TGFB1","IL1A","IL1B","IL18","TNF","VEGFA","MRC1","IFITM3"
                   
)
DotPlot(masce, features = unique(genes_to_check),
        assay='RNA' ,group.by = 'celltype',cols = c("white", "red"))+coord_flip()+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)+ theme(axis.text.x = element_text(angle=90, hjust=1, vjust=1))
ggsave("HMC_dot2.pdf",width = 4.2,height =6.5)

#addmodulescore####
#M1_Macrophage_Polarization
DefaultAssay(masce) <- "RNA"
cd_features <- list(c(  #M1 Macrophage Polarization
  "IL12A","IL12B","TNF","IL6","CD86","IL1B","MARCO","NOS2","FCGR1A","FCER1G","CD80","CXCL10","IL23A","CXCL9","CXCL11","CD86","IL1A",
  "IL1B", "IL6",
  "HLA-DPB1","HLA-DRB1","HLA-DPA1", #"MHCII"
  "CCL5","IRF5","IRF1","CD40","IDO1","KYNU","CCR7","PTPRC",#"CD45",
  "CD68","CSF1R",# "CD115",
  "HLA-DRA","LY75","CD14"
))
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
masce@meta.data <-masce@meta.data[which(!colnames(masce@meta.data) %in% "M1_Macrophage_Polarization")]
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'M1_Macrophage_Polarization'

library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'M1_Macrophage_Polarization',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'M1_Macrophage_Polarization',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "M1_Macrophage_Polarization",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("M1_Macrophage_Polarization_box.pdf",width = 2,height = 4)

#M1_Macrophage_Polarization
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'M1_Macrophage_Polarization',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'M1_Macrophage_Polarization',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

my_comparisons = list( c("Mac_c6_SPP1", "Mac_c0_JUN"),
                       c("Mac_c6_SPP1","Mac_c1_CXCL10"),
                       c("Mac_c6_SPP1", "Mac_c2_APOC1"),
                       c("Mac_c6_SPP1", "Mac_c3_IL1B"),
                       c("Mac_c6_SPP1", "Mac_c4_FOLR2"),
                       c("Mac_c6_SPP1", "Mac_c5_MKI67")
)
ggboxplot(P$data,x = "ident",y = "M1_Macrophage_Polarization",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("M1_Macrophage_Polarization_box2.pdf",width = 3,height = 5)

#M2 Macrophage Polarization
cd_features <- list(c(
  "ARG1","ARG2", "IL10",
  "FCGR2A","FCGR2B",#"CD32",
  "CD163","FCER2",#"CD23",
  "CD200R1","PDCD1LG2",#"PD-L2",
  "CD274",#"PDL1",
  "MARCO","CSF1R",
  "MRC1",#CD206",
  "IL1RN","IL1R2","IL4R","CCL4","CCL13","CCL20","CCL17","CCL18","CCL22","CCL24","LYVE1","VEGFA","VEGFB","VEGFC",
  "VEGFD","EGF","CTSA",
  "CTSB","CTSD","TGFB1","TGFB2","TGFB3","MMP14","MMP19","MMP9","CLEC7A","WNT7B","FASLG",#FASL
  "TNFSF12","TNFSF8","CD276","VTCN1","MSR1","FN1","IRF4","PTPRC",#"CD45","CD68",
  "CSF1R",#"CD115",
  "HLA-DRA","LY75",#"CD205",
  "CD14"
))
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
masce@meta.data <-masce@meta.data[which(!colnames(masce@meta.data) %in% "M2_Macrophage_Polarization")]
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'M2_Macrophage_Polarization'
colnames(masce@meta.data)

library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'M2_Macrophage_Polarization',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'M2_Macrophage_Polarization',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "M2_Macrophage_Polarization",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("M2_Macrophage_Polarization_box.pdf",width = 2,height = 4)

#M2_Macrophage_Polarization
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'M2_Macrophage_Polarization',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'M2_Macrophage_Polarization',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

my_comparisons = list( c("Mac_c6_SPP1", "Mac_c0_JUN"),
                       c("Mac_c6_SPP1","Mac_c1_CXCL10"),
                       c("Mac_c6_SPP1", "Mac_c2_APOC1"),
                       c("Mac_c6_SPP1", "Mac_c3_IL1B"),
                       c("Mac_c6_SPP1", "Mac_c4_FOLR2"),
                       c("Mac_c6_SPP1", "Mac_c5_MKI67")
)
ggboxplot(P$data,x = "ident",y = "M2_Macrophage_Polarization",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("M2_Macrophage_Polarization_box2.pdf",width = 3,height = 5)
#M1 signature
cd_features <- list(c(
  "NOS2",#"iNOS",
  "IL12A",#IL12
  "IL12B",#IL12
  "FCGR1A","FCGR1B",#CD64 
  "CD80","IL23A",#"IL23"
  "CXCL9","CXCL10","CXCL11","CD86", #(B7-2)
  "IL1A","IL1B","IL6","TNF","HLA-DPB1","HLA-DRB1","HLA-DPA1", #"MHCII"
  "CCL5","IRF5","IRF1","CD40","IDO1","KYNU","CCR7"
))
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
masce@meta.data <-masce@meta.data[which(!colnames(masce@meta.data) %in% "M1_signature")]
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'M1_signature'
colnames(masce@meta.data)

library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'M1_signature',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'M1_signature',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])


my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "M1_signature",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("M1_signature_box.pdf",width = 2,height = 4)

#M1_signature
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'M1_signature',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'M1_signature',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

my_comparisons = list( c("Mac_c6_SPP1", "Mac_c0_JUN"),
                       c("Mac_c6_SPP1","Mac_c1_CXCL10"),
                       c("Mac_c6_SPP1", "Mac_c2_APOC1"),
                       c("Mac_c6_SPP1", "Mac_c3_IL1B"),
                       c("Mac_c6_SPP1", "Mac_c4_FOLR2"),
                       c("Mac_c6_SPP1", "Mac_c5_MKI67")
)
ggboxplot(P$data,x = "ident",y = "M1_signature",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("M1_signature_box2.pdf",width = 2,height = 4)

cd_features <- list(c(#M2_signature
  "ARG1","ARG2","IL10",
  "FCGR2A",#"CD32",
  "CD163","FCER2",#CD23 (FCER2)
  "CD200R1","PDCD1LG2","CD274","MARCO","CSF1R","MRC1",#CD206 (MRC1)
  "IL1RN",#Il1RA (IL1RN)
  "IL1R2",#"Il1R2",
  "IL4R","CCL4","CCL13","CCL20","CCL17","CCL18","CCL22","CCL24","LYVE1",
  "VEGFA","VEGFB","VEGFC","VEGFD","EGF","CTSA","CTSB","CTSD","TGFB1","TGFB2",
  "TGFB3","MMP14","MMP19","MMP9","CLEC7A","WNT7B","FASLG","TNFSF12","TNFSF8","CD276", #(B7-H3)
  "VTCN1", #(BH-H4)
  "MSR1", #(CD204)
  "FN1","IRF4" 
))
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
masce@meta.data <-masce@meta.data[which(!colnames(masce@meta.data) %in% "M2_signature")]
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'M2_signature'
colnames(masce@meta.data)


library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'M2_signature',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'M2_signature',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "M2_signature",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("M2_signature_box.pdf",width = 2,height = 4)

#M2_signature
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'M2_signature',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'M2_signature',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

my_comparisons = list( c("Mac_c6_SPP1", "Mac_c0_JUN"),
                       c("Mac_c6_SPP1","Mac_c1_CXCL10"),
                       c("Mac_c6_SPP1", "Mac_c2_APOC1"),
                       c("Mac_c6_SPP1", "Mac_c3_IL1B"),
                       c("Mac_c6_SPP1", "Mac_c4_FOLR2"),
                       c("Mac_c6_SPP1", "Mac_c5_MKI67")
)
ggboxplot(P$data,x = "ident",y = "M2_signature",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("M2_signature_box2.pdf",width = 2,height = 4)

cd_features <- list(c(#pro_inflamation_score
  "IL1A","IL1B","TNF","IFNG","TBX21","CCL3","CCL4","PRF1",
  "GZMA","GZMB","GZMK","GZMH","CD8A","FASLG","CCL2","CCL20",
  "IL2","IL6","IL12A","IL17A","IL23A","PTGS2","TLR4","TNF"
))
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
masce@meta.data <-masce@meta.data[which(!colnames(masce@meta.data) %in% "Pro_inflamation_score")]
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'Pro_inflamation_score'
colnames(masce@meta.data)

library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Pro_inflamation_score',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'Pro_inflamation_score',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "Pro_inflamation_score",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Pro_inflamation_score_box.pdf",width = 2,height = 4)

#Pro_inflamation_score
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Pro_inflamation_score',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'Pro_inflamation_score',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

my_comparisons = list( c("Mac_c6_SPP1", "Mac_c0_JUN"),
                       c("Mac_c6_SPP1","Mac_c1_CXCL10"),
                       c("Mac_c6_SPP1", "Mac_c2_APOC1"),
                       c("Mac_c6_SPP1", "Mac_c3_IL1B"),
                       c("Mac_c6_SPP1", "Mac_c4_FOLR2"),
                       c("Mac_c6_SPP1", "Mac_c5_MKI67")
)
ggboxplot(P$data,x = "ident",y = "Pro_inflamation_score",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Pro_inflamation_score_box2.pdf",width = 2,height = 4)

cd_features <- list(c(#Anti_inflammatory_score
  "TIGIT", "IDO1","LGALS3", "PDCD1", "FOXP3","ENTPD1","CD274",
  "CSF2","CTLA4", "CXCL12", "CXCL5", "CXCL8","MIF","PTGS2","VEGFA"
))
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
masce@meta.data <-masce@meta.data[which(!colnames(masce@meta.data) %in% "Anti_inflammatory_score")]
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'Anti_inflammatory_score'
colnames(masce@meta.data)

library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Anti_inflammatory_score',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'Anti_inflammatory_score',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "Anti_inflammatory_score",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Anti_inflammatory_score_box.pdf",width = 2,height = 4)

#Anti_inflammatory_score
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Anti_inflammatory_score',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'Anti_inflammatory_score',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

my_comparisons = list( c("Mac_c6_SPP1", "Mac_c0_JUN"),
                       c("Mac_c6_SPP1","Mac_c1_CXCL10"),
                       c("Mac_c6_SPP1", "Mac_c2_APOC1"),
                       c("Mac_c6_SPP1", "Mac_c3_IL1B"),
                       c("Mac_c6_SPP1", "Mac_c4_FOLR2"),
                       c("Mac_c6_SPP1", "Mac_c5_MKI67")
)
ggboxplot(P$data,x = "ident",y = "Anti_inflammatory_score",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Anti_inflammatory_score_box2.pdf",width = 2,height = 4)

DefaultAssay(masce) <- "RNA"
cd_features <- list(c(  #Phagocytosis_score
  "MRC1","CD163","MERTK","C1QB","C1QA"
))


masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
masce@meta.data <-masce@meta.data[which(!colnames(masce@meta.data) %in% "Phagocytosis_score")]
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'Phagocytosis_score'
colnames(masce@meta.data)

library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Phagocytosis_score',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'Phagocytosis_score',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "Phagocytosis_score",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Phagocytosis_score_box.pdf",width = 2,height = 4)

#Phagocytosis_score
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Phagocytosis_score',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'Phagocytosis_score',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

my_comparisons = list( c("Mac_c6_SPP1", "Mac_c5_MKI67"),
                       c("Mac_c6_SPP1", "Mac_c4_FOLR2"),
                       c("Mac_c6_SPP1", "Mac_c3_IL1B"),
                       c("Mac_c6_SPP1", "Mac_c2_APOC1"),
                       c("Mac_c6_SPP1","Mac_c1_CXCL10"),
                        c("Mac_c6_SPP1", "Mac_c0_JUN")

)
ggboxplot(P$data,x = "ident",y = "Phagocytosis_score",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Phagocytosis_score_box2.pdf",width = 3,height = 5)

####糖酵解,缺氧信号通路打分####
library(Seurat)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(limma)
masce$type <- factor(masce$type,levels = c("N","J","T"))

genesets <- msigdbr(species = "Homo sapiens", category = "C2",subcategory = "CP:KEGG") 
genesets <- msigdbr(species = "Homo sapiens", category = "H") 
genesets <- subset(genesets, select = c("gs_name","gene_symbol")) %>% as.data.frame()
genesets <- split(genesets$gene_symbol, genesets$gs_name)
cd_features <-  list(genesets[["HALLMARK_HYPOXIA"]])

#修改变量名称
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'HYPOXIA'

VlnPlot(masce,features = 'HYPOXIA',pt.size = 0, adjust = 2,group.by = "type")
VlnPlot(masce,features = 'HYPOXIA',pt.size = 0, adjust = 2,group.by = "celltype")


#HYPOXIA####
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'HYPOXIA',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'HYPOXIA',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("Mac_c2_SPP1", "Mac_c1_IL1B"),
                       c("Mac_c2_SPP1","Mac_c3_MKI67"),
                       c("Mac_c0_C1QA", "Mac_c2_SPP1"),
                       c("Mac_c1_IL1B", "Mac_c3_MKI67")
)
ggboxplot(P$data,x = "ident",y = "HYPOXIA",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("HYPOXIA_box2.pdf",width = 2,height = 4)

#HYPOXIA
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'HYPOXIA',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'HYPOXIA',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "HYPOXIA",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("HYPOXIA_box.pdf",width = 2,height = 4)
#Stress打分####
a <-"FOS
ATF3
NR4A1
DUSP1
ZFP36
PPP1R15A
SGK1
EGR1
ZC3H12A
JUNB
FOSB
IER2
NFKBIA
NFKBIZ
HBEGF
BTG2
SOD2
CDKN1A
NCOA7
JUN
MYC
SERTAD1
CCNL1
RND3
PLK2
SOCS3
DNAJB1
DUSP2
TSC22D1
KLF10
GADD45B
PMAIP1
MAFF
ERRFI1
SLC38A2
IRF1
TOB1
ID2
KLF6
DNAJA1
TNFAIP3
BHLHE40
NXF1
FOSL1
IER3
DUSP6
HCAR2
IL8
CYR61
EFNA1
"
cd_features <- strsplit(a,split = "\n") 







#修改变量名称
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'Stress'

VlnPlot(masce,features = 'Stress',pt.size = 0, adjust = 2,group.by = "type")
VlnPlot(masce,features = 'Stress',pt.size = 0, adjust = 2,group.by = "celltype")

#Stress#
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Stress',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'Stress',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

#箱型图画法
my_comparisons = list( 
  c("Mac_c0_JUN","Mac_c1_CXCL10"),
  c("Mac_c0_JUN", "Mac_c2_APOC1"),
  c("Mac_c0_JUN", "Mac_c3_IL1B"),
  c("Mac_c0_JUN", "Mac_c4_FOLR2"),
  c("Mac_c0_JUN", "Mac_c5_MKI67"),
  c("Mac_c0_JUN", "Mac_c6_SPP1")
)
ggboxplot(P$data,x = "ident",y = "Stress",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Stress_box2.pdf",width = 2,height = 4)



#Stress
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Stress',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'Stress',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "Stress",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Stress_box.pdf",width = 2,height = 4)






##ANGIOGENESIS信号通路打分####
library(Seurat)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(limma)
genesets <- msigdbr(species = "Homo sapiens", category = "C2",subcategory = "CP:KEGG") 
genesets <- msigdbr(species = "Homo sapiens", category = "H") 
genesets <- subset(genesets, select = c("gs_name","gene_symbol")) %>% as.data.frame()
genesets <- split(genesets$gene_symbol, genesets$gs_name)
cd_features <-  list(genesets[["HALLMARK_ANGIOGENESIS"]])


#修改变量名称
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'ANGIOGENESIS'

VlnPlot(masce,features = 'ANGIOGENESIS',pt.size = 0, adjust = 2,group.by = "type")
VlnPlot(masce,features = 'ANGIOGENESIS',pt.size = 0, adjust = 2,group.by = "celltype")

#ANGIOGENESIS####
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'ANGIOGENESIS',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'ANGIOGENESIS',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("Mac_c6_SPP1", "Mac_c5_MKI67"),
                       c("Mac_c6_SPP1", "Mac_c4_FOLR2"),
                       c("Mac_c6_SPP1", "Mac_c3_IL1B"),
                       c("Mac_c6_SPP1", "Mac_c2_APOC1"),
                       c("Mac_c6_SPP1","Mac_c1_CXCL10"),
                       c("Mac_c6_SPP1", "Mac_c0_JUN")
                       
)
ggboxplot(P$data,x = "ident",y = "ANGIOGENESIS",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("ANGIOGENESIS_box2.pdf",width = 3,height = 5)



#ANGIOGENESIS
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'ANGIOGENESIS',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'ANGIOGENESIS',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "ANGIOGENESIS",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("ANGIOGENESIS_box.pdf",width = 2,height = 4)


####GLYCOLYSIS,HYPOXIA通路打分####
library(Seurat)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(limma)
genesets <- msigdbr(species = "Homo sapiens", category = "C2",subcategory = "CP:KEGG") 
genesets <- msigdbr(species = "Homo sapiens", category = "H") 
genesets <- subset(genesets, select = c("gs_name","gene_symbol")) %>% as.data.frame()
genesets <- split(genesets$gene_symbol, genesets$gs_name)
cd_features <-  list(genesets[["HALLMARK_GLYCOLYSIS"]])


#修改变量名称
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'GLYCOLYSIS'

VlnPlot(masce,features = 'GLYCOLYSIS',pt.size = 0, adjust = 2,group.by = "type")
VlnPlot(masce,features = 'GLYCOLYSIS',pt.size = 0, adjust = 2,group.by = "celltype")

#GLYCOLYSIS####
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'GLYCOLYSIS',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'GLYCOLYSIS',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("Mac_c2_SPP1", "Mac_c1_IL1B"),
                       c("Mac_c2_SPP1","Mac_c3_MKI67"),
                       c("Mac_c0_C1QA", "Mac_c2_SPP1"),
                       c("Mac_c1_IL1B", "Mac_c3_MKI67")
)
ggboxplot(P$data,x = "ident",y = "GLYCOLYSIS",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("GLYCOLYSIS_box2.pdf",width = 2,height = 4)



#GLYCOLYSIS
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'GLYCOLYSIS',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'GLYCOLYSIS',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "GLYCOLYSIS",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("GLYCOLYSIS_box.pdf",width = 2,height = 4)

#FATTY_ACID_METABOLISM打分####
library(Seurat)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(limma)
genesets <- msigdbr(species = "Homo sapiens", category = "H") 
genesets <- msigdbr(species = "Homo sapiens", category = "C2",subcategory = "CP:KEGG") 

genesets <- subset(genesets, select = c("gs_name","gene_symbol")) %>% as.data.frame()
genesets <- split(genesets$gene_symbol, genesets$gs_name)
cd_features <-  list(genesets[["KEGG_FATTY_ACID_METABOLISM"]])


#修改变量名称
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'FATTY_ACID_METABOLISM'

VlnPlot(masce,features = 'FATTY_ACID_METABOLISM',pt.size = 0, adjust = 2,group.by = "type")
VlnPlot(masce,features = 'FATTY_ACID_METABOLISM',pt.size = 0, adjust = 2,group.by = "celltype")

#FATTY_ACID_METABOLISM####
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'FATTY_ACID_METABOLISM',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'FATTY_ACID_METABOLISM',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("Mac_c2_SPP1", "Mac_c1_IL1B"),
                       c("Mac_c2_SPP1","Mac_c3_MKI67"),
                       c("Mac_c0_C1QA", "Mac_c2_SPP1"),
                       c("Mac_c1_IL1B", "Mac_c3_MKI67")
)
ggboxplot(P$data,x = "ident",y = "FATTY_ACID_METABOLISM",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("FATTY_ACID_METABOLISM_box2.pdf",width = 2,height = 4)



#FATTY_ACID_METABOLISM
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'FATTY_ACID_METABOLISM',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'FATTY_ACID_METABOLISM',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("J", "N"),c("J", "T"),c("T", "N"))
ggboxplot(P$data,x = "ident",y = "FATTY_ACID_METABOLISM",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("FATTY_ACID_METABOLISM_box.pdf",width = 2,height = 4)






#monocle#####
DefaultAssay(masce) <- "RNA"
library(monocle)
#提取表型信息--细胞信息(建议载入细胞的聚类或者细胞类型鉴定信息、实验条件等信息)
expr_matrix <- as(as.matrix(masce@assays$RNA@counts), 'sparseMatrix')
##提取表型信息到p_data(phenotype_data)里面 
p_data <- masce@meta.data 
Idents(masce) <- masce$celltype
table(masce@active.ident)
p_data$celltype <- masce@active.ident  ##整合每个细胞的细胞鉴定信息到p_data里面。如果已经添加则不必重复添加
##提取基因信息 如生物类型、gc含量等
f_data <- data.frame(gene_short_name = row.names(masce),row.names = row.names(masce))
##expr_matrix的行数与f_data的行数相同(gene number), expr_matrix的列数与p_data的行数相同(cell number)

#构建CDS对象
pd <- new('AnnotatedDataFrame', data = p_data) 
fd <- new('AnnotatedDataFrame', data = f_data)
#将p_data和f_data从data.frame转换AnnotatedDataFrame对象。
cds <- newCellDataSet(expr_matrix,
                      phenoData = pd,
                      featureData = fd,
                      lowerDetectionLimit = 0.5,
                      expressionFamily = negbinomial.size())
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
# 过滤低于1%细胞中检出的基因，最低表达阈值为0.1
cds <- detectGenes(cds, min_expr = 0.1) #这一操作会在fData(cds)中添加一列num_cells_expressed
print(head(fData(cds)))#此时有13714个基因
expressed_genes <- row.names(subset(fData(cds),num_cells_expressed >= 10)) #过滤掉在小于10个细胞中表达的基因，还剩11095个基因。

##使用seurat选择的高变基因
express_genes <- VariableFeatures(masce)
cds <- setOrderingFilter(cds, express_genes)
plot_ordering_genes(cds)
##使用clusters差异表达基因
Idents(masce) <- "celltype"
deg.cluster <- FindAllMarkers(masce)
express_genes <- subset(deg.cluster,p_val_adj<0.05)$gene
cds <- setOrderingFilter(cds, express_genes)
plot_ordering_genes(cds)
##使用monocle选择的高变基因
disp_table <- dispersionTable(cds)
express_genes <- subset(disp_table, mean_expression >= 0.1 & dispersion_empirical >= 1 * dispersion_fit)$gene_id
cds <- setOrderingFilter(cds, express_genes)
plot_ordering_genes(cds)

#这一步输入的expressed_genes来自于步骤4。
#后续分析使用的是该方法
#也可输入seurat筛选出的高变基因：expressed_genes <- VariableFeatures(masce) 
diff <- differentialGeneTest(cds[express_genes,],fullModelFormulaStr="~celltype",cores=1)
diff <- differentialGeneTest(cds[expressed_genes,],fullModelFormulaStr="~celltype",cores=1)
#diff <- differentialGeneTest(cds[expressed_genes,],fullModelFormulaStr="~RNA_snn_res.2",cores=1)
#~后面是表示对谁做差异分析的变量，理论上可以为p_data的任意列名
head(diff)

##差异表达基因作为轨迹构建的基因,差异基因的选择标准是qval<0.01,
#decreasing=F表示按数值增加排序 选择 FDR < 0.01 的基因作为差异基因
deg <- subset(diff, qval < 0.01) #选出2829个基因
deg <- deg[order(deg$qval,decreasing=F),]
head(deg)

##差异基因的结果文件保存
write.csv(deg,file="train.monocle.DEG.csv")

## 轨迹构建基因可视化
ordergene <- rownames(deg) 
cds <- setOrderingFilter(cds, ordergene)  
table(cds@featureData@data[["use_for_ordering"]])
#这一步是很重要的，在我们得到想要的基因列表后，我们需要使用setOrderingFilter将它嵌入cds对象，后续的一系列操作都要依赖于这个list。
#setOrderingFilter之后，这些基因被储存在cds@featureData@data[["use_for_ordering"]]，可以通过table(cds@featureData@data[["use_for_ordering"]])查看
plot_ordering_genes(cds)
ggsave("train.order.genes.pdf")
##选择的用于排序的基因数目一般在2000左右比较合适
#如果基因太多的话，也可以选择top基因
ordergene <- row.names(deg)[order(deg$qval)][1:2000]
#ordergene <- row.names(deg)[order(deg$qval)]
#一旦细胞有序排列，我们就可以在降维空间中可视化轨迹，然后使用反向图嵌入（DDRTree）算法对数据进行降维。
cds <- reduceDimension(cds, max_components = 2,
                       method = 'DDRTree',cores =4
                       #,num_dim=3
                       #,residualModelFormulaStr = "~patient_id" #residualModelFormulaStr减少其他因素的影响，比如不同样本、不同批次
)
##将表达数据投射到更低的维度空间，通过机器学习描述细胞如何从
#一种状态过渡到另一种状态的轨迹。
#假设轨迹具有树状结构，一端是"根"，另一端是"叶"。尽可能地将最佳树与数据匹配起来。这项任务被称为"歧管学习”，
#在生物过程的开始阶段，细胞从根部开始，沿着主干前进，直到到达第一个分支(如果有的话)。然后，细胞必须选择一条路径，沿着树走得越来越远，直到到达一片叶子。一个细胞的伪时间值是它回到根的距离。
#根据order gene的表达趋势，将细胞排序并完成轨迹构建
memory.limit(1000000000)
gc()
cds <- orderCells(cds)
#使用root_state参数可以设置拟时间轴的根，如下面的拟时间着色图中可以看出，左边是根。根据state图可以看出，根是State1，若要想把另一端设为根，可以按如下操作
save(cds,file="cds.Rdata")
load("cds.Rdata")
cds <- orderCells(cds, root_state = 10)
cds <- orderCells(cds, num_paths=2)#把State5设成拟时间轴的起始点

gc()
#用celltype差异基因做的训练
plot_cell_trajectory(cds,color_by="Pseudotime", size=1,show_backbone=TRUE) +
  theme(aspect.ratio = 1)+ scale_color_gradientn(colors = c("#24ABAE","#E8BD27","#CF254A"))+
  theme(aspect.ratio = 1)
ggsave("train.pseudotime.pdf",height = 6,width = 6)

colour=c("#DD1F4D","#F2C31C","#A0C53B","#2F89CA")
plot_cell_trajectory(cds,color_by="celltype", size=1,show_backbone=TRUE)+ scale_color_manual(values = colour)+theme(aspect.ratio = 1)
ggsave("train.celltype.pdf",height = 6,width = 6)
plot_cell_trajectory(cds, color_by = "State",size=1,show_backbone=TRUE)
ggsave("train.State.pdf",height = 6,width = 6)
plot_cell_trajectory(cds, color_by = "CCA_snn_res.3",show_backbone=TRUE)
ggsave("train.seurat_CCA_snn_res.3.pdf",height = 6,width = 6)
colour=c("#D2B452","#84BAB8")
plot_cell_trajectory(cds, color_by = "type",show_backbone=TRUE)+ scale_color_manual(values = colour)
ggsave("train.seurat.type.pdf",height = 6,width = 6)
plot_cell_trajectory(cds,color_by="HYPOXIA", size=1,show_backbone=TRUE) +theme(aspect.ratio = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("train_HYPOXIA_sig.pdf",height = 6,width = 6)
plot_cell_trajectory(cds,color_by="GLYCOLYSIS", size=1,show_backbone=TRUE) +theme(aspect.ratio = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("trainGLYCOLYSIS_sig.pdf",height = 6,width = 6)
plot_cell_trajectory(cds,color_by="Phagocytosis_score", size=1,show_backbone=TRUE) +theme(aspect.ratio = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("trainPhagocytosis_score_sig.pdf",height = 6,width = 6)

cds@phenoData@data$ANGIOGENESIS <- masce$ANGIOGENESIS
plot_cell_trajectory(cds,color_by="ANGIOGENESIS", size=1,show_backbone=TRUE) +theme(aspect.ratio = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("train_ANGIOGENESIS_sig.pdf",height = 6,width = 6)
cds@phenoData@data$FATTY_ACID_METABOLISM <- masce$FATTY_ACID_METABOLISM
plot_cell_trajectory(cds,color_by="FATTY_ACID_METABOLISM", size=1,show_backbone=TRUE) +theme(aspect.ratio = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("train_FATTY_ACID_METABOLISM_sig.pdf",height = 6,width = 6)
cds@phenoData@data$GLYCOLYSIS <- masce$GLYCOLYSIS
plot_cell_trajectory(cds,color_by="GLYCOLYSIS", size=1,show_backbone=TRUE) +theme(aspect.ratio = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("train_GLYCOLYSIS_sig.pdf",height = 6,width = 6)
cds@phenoData@data$HYPOXIA <- masce$HYPOXIA
plot_cell_trajectory(cds,color_by="HYPOXIA", size=1,show_backbone=TRUE) +theme(aspect.ratio = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("train_HYPOXIA_sig.pdf",height = 6,width = 6)
cds@phenoData@data$Phagocytosis_score <- masce$Phagocytosis_score
plot_cell_trajectory(cds,color_by="Phagocytosis_score", size=1,show_backbone=TRUE) +theme(aspect.ratio = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("train_Phagocytosis_score.pdf",height = 6,width = 6)
cds@phenoData@data$Stress <- masce$Stress
plot_cell_trajectory(cds,color_by="Stress", size=1,show_backbone=TRUE) +theme(aspect.ratio = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("train_Stress_sig.pdf",height = 6,width = 6)

#画分面图
plot_cell_trajectory(cds, color_by = "State") +theme(aspect.ratio = 1)+ facet_wrap("~State", nrow = 1)
ggsave("monocle2_state_split.pdf",height = 6,width = 30)
plot_cell_trajectory(cds, color_by = "celltype")+theme(aspect.ratio = 1) + facet_wrap("~celltype", nrow = 1)+ scale_color_manual(values = colour)
ggsave("monocle2_celltype_split.pdf",height = 6,width = 24)
plot_cell_trajectory(cds, color_by = "CCA_snn_res.3")+theme(aspect.ratio = 1) + facet_wrap("~CCA_snn_res.3", nrow = 3)
ggsave("monocle2_RNA_snn_res.2_split.pdf",height = 18,width = 18)
plot_cell_trajectory(cds, color_by = "type")+theme(aspect.ratio = 1) + facet_wrap("~type", nrow = 1)+ scale_color_manual(values = colour)
ggsave("monocle2_type_split.pdf",height = 6,width = 12)
plot_cell_trajectory(cds, color_by = "HYPOXIA")+theme(aspect.ratio = 1) + facet_wrap("~type", nrow = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("monocle2_HYPOXIA_type.pdf",height = 6,width = 18)
plot_cell_trajectory(cds, color_by = "HYPOXIA")+theme(aspect.ratio = 1) + facet_wrap("~celltype", nrow = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("monocle2_HYPOXIA_celltype.pdf",height = 6,width = 24)
plot_cell_trajectory(cds, color_by = "GLYCOLYSIS")+theme(aspect.ratio = 1) + facet_wrap("~type", nrow = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("monocle2_GLYCOLYSIS_type.pdf",height = 6,width = 18)
cds@phenoData@data$GLYCOLYSIS <- masce$GLYCOLYSIS
plot_cell_trajectory(cds, color_by = "GLYCOLYSIS")+theme(aspect.ratio = 1) + facet_wrap("~celltype", nrow = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("monocle2_GLYCOLYSIS_celltype.pdf",height = 6,width = 24)
cds@phenoData@data$ANGIOGENESIS <- masce$ANGIOGENESIS
plot_cell_trajectory(cds, color_by = "ANGIOGENESIS")+theme(aspect.ratio = 1) + facet_wrap("~type", nrow = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("monocle2_ANGIOGENESIS_type.pdf",height = 6,width = 18)
plot_cell_trajectory(cds, color_by = "ANGIOGENESIS")+theme(aspect.ratio = 1) + facet_wrap("~celltype", nrow = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("monocle2_ANGIOGENESIS_celltype.pdf",height = 6,width = 24)



plot_cell_trajectory(cds, color_by = "Phagocytosis_score")+theme(aspect.ratio = 1) + facet_wrap("~type", nrow = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("monocle2_Phagocytosis_score_type.pdf",height = 6,width = 18)
plot_cell_trajectory(cds, color_by = "Phagocytosis_score")+theme(aspect.ratio = 1) + facet_wrap("~celltype", nrow = 1)+scale_color_gradient2(low="black",high="red",mid="white",midpoint = 0)
ggsave("monocle2_Phagocytosis_score_celltype.pdf",height = 6,width = 24)
#pseudotime密度图####
library(Seurat)
library(purrr)
library(dplyr)
library(ggplot2)
library(cowplot)
library(ggridges)
library(RColorBrewer)
library(viridis)
RidgePlot(masce, features = "TREM2", fill.by = 'celltype')
#这一部分的配色可以直接对接ggsci，也以使用scale_color_manaual()
library(ggsci)
p1=plot_cell_trajectory(cds, color_by = "celltype")  + scale_color_npg() 
p2=plot_cell_trajectory(cds, color_by = "State")  + scale_color_nejm()
colour=c("#DC143C","#0000FF","#20B2AA","#FFA500","#9370DB","#98FB98","#F08080")
p3=plot_cell_trajectory(cds, color_by = "CCA_snn_res.3")  + scale_color_manual(values = colour)
p1|p2|p3
colour=c("#DC143C","#0000FF","#20B2AA","#FFA500","#9370DB","#98FB98","#F08080","#2F89CA","#F2C31C")
colour=c("#DC143C","#0000FF","#20B2AA","#FFA500","#9370DB","#98FB98","#F08080","#1E90FF","#7CFC00","#FFFF00",
         "#808000","#FF00FF","#FA8072","#7B68EE","#9400D3","#800080","#A0522D","#D2B48C","#D2691E","#87CEEB","#40E0D0","#5F9EA0",
         "#FF1493","#0000CD","#008B8B","#FFE4B5","#8A2BE2","#228B22","#E9967A","#4682B4","#32CD32","#F0E68C","#FFFFE0","#EE82EE",
         "#FF6347","#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887")
#觉得不好看可以化成树形图
p1 <- plot_cell_trajectory(cds, x = 1, y = 2, color_by = "celltype") + 
  theme(legend.position='none',panel.border = element_blank()) + #去掉第一个的legend
  scale_color_manual(values = colour) 
p2 <- plot_complex_cell_trajectory(cds, x = 1, y = 2,
                                   color_by = "celltype")+
  scale_color_manual(values = colour) +
  theme(legend.title = element_blank()) 
p1|p2

p3 <- plot_cell_trajectory(cds, x = 1, y = 2, color_by = "type") + 
  theme(legend.position='none',panel.border = element_blank()) + #去掉第一个的legend
  scale_color_manual(values = colour) 
p4 <- plot_complex_cell_trajectory(cds, x = 1, y = 2,
                                   color_by = "type")+
  scale_color_manual(values = colour) +
  theme(legend.title = element_blank()) 
p3|p4

p2|p4
#还可以画沿着时间轨迹的细胞密度图
library(ggpubr)
df <- pData(cds) #这里可以查看psudotime的信息
table(df$State,df$celltype)
table(df$State,df$type)
## pData(cds)取出的是cds对象中cds@phenoData@data的内容

df$celltype <- factor(df$celltype,levels =c("Mac_c4_FOLR2","Mac_c3_IL1B","Mac_c0_JUN","Mac_c1_CXCL10", "Mac_c6_SPP1","Mac_c2_APOC1","Mac_c5_MKI67") )
ggplot(df, aes(x = Pseudotime, y = type, fill = type)) +
  geom_density_ridges(alpha = 0.5) +
  theme_ridges() + 
  theme(legend.position = "none")+scale_fill_viridis(discrete = T,alpha = 0.3)+
  scale_color_viridis_d()
ggsave("density_type.pdf",height = 4,width = 4)

ggplot(df, aes(x = Pseudotime, y = celltype, fill = celltype)) +
  geom_density_ridges(alpha = 0.5) +
  theme_ridges() + 
  theme(legend.position = "none")+scale_fill_viridis(discrete = T,alpha = 0.3)+
  scale_color_viridis_d()
ggsave("density_celltype.pdf",height = 4,width = 4)




ggplot(df, aes(Pseudotime, colour = celltype, fill=celltype)) +
  geom_density(bw=0.5,size=1,alpha = 0.5)+theme_classic2()
ggsave("waveplot_celltype.pdf",height = 6,width = 8)
require(viridis)#色彩调整的R包
require(tidyr)#数据清理的R包
library(ggthemes)
library(ggplot2)
library(hrbrthemes)
library(ggsci)
#plot1
ggplot(df, aes(Pseudotime, colour = celltype, fill=celltype)) +
  geom_density(bw=0.5,size=1,alpha = 0.5)+theme_classic2()+
  facet_wrap(~celltype)
ggsave("waveplot_celltype_split.pdf",height = 6,width = 8)
df$celltype <- factor(df$celltype,levels=c("Mac_c0_C1QA","Mac_c1_IL1B","Mac_c2_SPP1","Mac_c3_MKI67"))

#plot2
ggplot(df,aes(x=Pseudotime,group=celltype,fill=celltype))+
  geom_density(alpha=1,adjust=1.5,position = 'fill')+
  theme_ipsum()+
  scale_fill_viridis(discrete = T,alpha = 0.3)+
  scale_color_viridis_d()



ggplot(df, aes(Pseudotime, colour = type, fill=type)) +
  geom_density(bw=0.5,size=1,alpha = 0.5)+theme_classic2()
ggsave("waveplot_type.pdf",height = 6,width = 8)
#plot1
ggplot(df, aes(Pseudotime, colour = type, fill=type)) +
  geom_density(bw=0.5,size=1,alpha = 0.5)+theme_classic2()+
  facet_wrap(~type)
ggsave("waveplot_type.pdf",height = 6,width = 8)
df$type <- factor(df$type,levels=c("Mac_c0_C1QA","Mac_c1_IL1B","Mac_c2_SPP1","Mac_c3_MKI67"))

#plot2
ggplot(df,aes(x=Pseudotime,group=type,fill=type))+
  geom_density(alpha=1,adjust=1.5,position = 'fill')+
  theme_ipsum()+
  scale_fill_viridis(discrete = T,alpha = 0.3)+
  scale_color_viridis_d()






#手动设置颜色 
ClusterName_color_panel <- c(
  "Naive_T_cell" = "#DD1F4D", "Cytotoxic_T_cell" = "#F2C31C", "Proliferating_T_cell" = "#A0C53B",
  "Regulatory_T_cell" = "#2F89CA"
  #"Double_negative_T_cell" = "#9370DB", "Proliferative_T_cell" = "#98FB98"
  # "NK" = "#F08080", "DC" = "#0000FF", "Platelet" = "#20B2AA"
)
ggplot(df, aes(Pseudotime, colour = celltype, fill=celltype)) +
  geom_density(bw=0.5,size=1,alpha = 0.5)+
  theme_classic2()+ 
  scale_fill_manual(name = "", values = ClusterName_color_panel)+
  scale_color_manual(name = "", values = ClusterName_color_panel)+
  theme(aspect.ratio = 1) 
ggsave("celltype_wave_color.pdf",width = 6,height = 6)
ClusterName_color_panel <- c(
  "N" = "#24ABAE","J" ="#E8BD27" ,
  "T" = "#CF254A"
  #"Regulatory_T_cell" = "#2F89CA"
  #"Double_negative_T_cell" = "#9370DB", "Proliferative_T_cell" = "#98FB98"
  # "NK" = "#F08080", "DC" = "#0000FF", "Platelet" = "#20B2AA"
)
ggplot(df, aes(Pseudotime, colour = type, fill=type)) +
  geom_density(bw=0.5,size=1,alpha = 0.5)+
  theme_classic2()+ 
  scale_fill_manual(name = "", values = ClusterName_color_panel)+
  scale_color_manual(name = "", values = ClusterName_color_panel)+
  theme(aspect.ratio = 1) 
ggsave("type_wave_color.pdf",width = 6,height = 6)
#出的图黑色的点表示用来构建轨迹的差异基因，灰色表示背景基因。红色的线是根据第2步计算的基因表达大小和离散度分布的趋势(可以看到，找到的基因属于离散度比较高的基因)
#比如对State7的细胞感兴趣
pdata <- Biobase::pData(cds)
s.cells <- subset(pdata, State=="7") %>% rownames()
save(s.cells, file = "Monocle_state7.rda")
#保存结果
write.csv(pData(cds), "pseudotime.csv")
save(cds, file = "cds.rda")

##选择前4个top基因并将其对象取出
keygenes <- c( "CD3D","CD3E","PTPRC","CD8A","CD4","TYROBP","FCER1G",
               "HBA2","HBA1","ALAS2","SNCA",#erythrocyte
               "MKI67","TOP2A","STMN1","TUBB","HMGB2", #proliferating T cells
               "CCR7","TCF7","LEF1","SELL",#CD8T Naive 
               "GZMK",#cd8 GZMK,
               "GZMB",#CD8T GZMB
               "FOXP3","TIGIT","CTLA4","TNFRSF18"#CD4Treg
               
)
keygenes <- c( "CD3D","CD3E","PTPRC","CD8A","CD4","TYROBP","FCER1G",
               "HBA2","HBA1","ALAS2","SNCA",#erythrocyte
               "MKI67","TOP2A","STMN1","TUBB","HMGB2", #proliferating T cells
               "CCR7","TCF7","LEF1","SELL",#CD8T Naive 
               "GZMK",#cd8 GZMK,
               "GZMB",#CD8T GZMB
               "FOXP3","TIGIT","CTLA4","TNFRSF18"#CD4Treg
)

keygenes <- c( "MKI67","TOP2A","STMN1","TUBB","HMGB2" #proliferating T cells
)
keygenes <- c( "FOXP3","TIGIT","CTLA4","TNFRSF18"#CD4Treg
)
keygenes <- c( "CCR7","TCF7","LEF1","SELL"#CD8T Naive 
)
keygenes <- c( 
  "MKI67","TOP2A","STMN1","TUBB","HMGB2" #proliferating T cells
)
keygenes <- c( 
  "MKI67","RRM2","HMGN2" #cycling T cells 樊嘉
)

keygenes <- c( 
  "MRC1","SPP1","HIF1A","MKI67","MRC1","SIRPA","VEGFB","MERTK","C1QA"#cytotoxic markers
)
plot_genes_in_pseudotime(cds[keygenes,], color_by = "Pseudotime")
ggsave("gene_psedotime_plot.pdf",width = 4,height = 8)
keygenes <- head(ordergene,4)
#以state/celltype/pseudotime进行
p1 <- plot_genes_in_pseudotime(cds[keygenes,], color_by = "State")
p2 <- plot_genes_in_pseudotime(cds[keygenes,], color_by = "celltype")
p3 <- plot_genes_in_pseudotime(cds[keygenes,], color_by = "Pseudotime")
p4 <- plot_genes_in_pseudotime(cds[keygenes,], color_by = "type")
p1|p2|p3|p4
ggsave("four_plot.pdf",width = 4,height = 8)


keygenes <- c( 
  "MKI67","TOP2A","STMN1","TUBB","HMGB2" #proliferating T cells
)
colour=c("#D2B452","#84BAB8","red")
plot_genes_in_pseudotime(cds[keygenes,], color_by = "type")+ scale_color_manual(values = colour)
ggsave("six_plot.pdf",width = 4,height = 12)

keygenes <- c( 
  "GZMA","NKG7","GZMK" #cytotoxic markers
)
colour=c("#D2B452","#84BAB8")
plot_genes_in_pseudotime(cds[keygenes,], color_by = "type")+ scale_color_manual(values = colour)
ggsave("three_plot.pdf",width = 4,height = 6)

#指定基因

s.genes <- c("MRC1","SPP1","HIF1A","MKI67","MRC1","SIRPA","VEGFB","MERTK"#cytotoxic markers
)
s.genes <- c("FOXP3","TIGIT","CTLA4","TNFRSF18")
s.genes <- c("SELL","CCR7","IL7R", "CD84","CCL5","S100A4")
plot_genes_jitter(cds[s.genes,], grouping = "celltype", color_by = "celltype")
plot_genes_violin(cds[s.genes,], grouping = "celltype", color_by = "celltype")
plot_genes_in_pseudotime(cds[s.genes,], color_by = "celltype")
p1 <- plot_genes_jitter(cds[s.genes,], grouping = "State", color_by = "State")
p2 <- plot_genes_violin(cds[s.genes,], grouping = "State", color_by = "State")
p3 <- plot_genes_in_pseudotime(cds[s.genes,], color_by = "State")
p1|p2|p3
ggsave("Genes_jitterplot_state.pdf",width = 16,height = 8)

p1 <- plot_genes_jitter(cds[s.genes,], grouping = "type", color_by = "type")
p2 <- plot_genes_violin(cds[s.genes,], grouping = "type", color_by = "type")
p3 <- plot_genes_in_pseudotime(cds[s.genes,], color_by = "type")
p1|p2|p3
ggsave("Genes_jitterplot_type.pdf",width = 16,height = 8)
#拟时序展示单个基因的表达量
colnames(pData(cds))
pData(cds)$FOXP3 = log2(exprs(cds)['FOXP3',]+1)
p1=plot_cell_trajectory(cds, color_by = "FOXP3")  + scale_color_gsea()
pData(cds)$CTLA4 = log2(exprs(cds)['CTLA4',]+1)
p2=plot_cell_trajectory(cds, color_by = "CTLA4") + scale_color_gsea()


#pseudo线图####
dat <- cds@phenoData@data
ggplot(dat,aes(Pseudotime,HYPOXIA,fill=Pseudotime))+
  geom_point(size=4)+
  geom_smooth(method= "gam")

?geom_smooth()


ggplot(dat,aes(Pseudotime,HYPOXIA,fill=celltype))+
  geom_point(size=3,alpha =0.2,colour = "grey")+
  geom_smooth(method= "loess",color="red",
              span=0.8,
              se=T
  )

ggplot(dat,aes(Pseudotime,GLYCOLYSIS,fill=celltype))+
  geom_point(size=3,alpha =0.2,colour = "grey")+
  geom_smooth(method= "loess",color="red",
              span=0.8,
              se=T
  )


ggplot(dat,aes(Pseudotime,HYPOXIA))+
  geom_point(size=3,alpha =0.2,colour = "grey")+
  geom_smooth(method= "loess",color="red",
              span=0.8,
              se=T
  )
ggsave("HYPOXIA_Pseudotime.pdf",width = 4,height = 4)

ggplot(dat,aes(Pseudotime,GLYCOLYSIS))+
  geom_point(size=3,alpha =0.2,colour = "grey")+
  geom_smooth(method= "loess",color="red",
              span=0.8,
              se=T
  )
ggsave("GLYCOLYSIS_Pseudotime.pdf",width = 4,height = 4)

ggplot(dat,aes(Pseudotime,ANGIOGENESIS))+
  geom_point(size=3,alpha =0.2,colour = "grey")+
  geom_smooth(method= "loess",color="red",
              span=0.8,
              se=T
  )
ggsave("ANGIOGENESIS_Pseudotime.pdf",width = 4,height = 4)

ggplot(dat,aes(Pseudotime,Phagocytosis_score))+
  geom_point(size=3,alpha =0.2,colour = "grey")+
  geom_smooth(method= "loess",color="red",
              span=0.8,
              se=T
  )
ggsave("Phagocytosis_Pseudotime.pdf",width = 4,height = 4)
ggplot(dat,aes(Pseudotime,Stress))+
  geom_point(size=3,alpha =0.2,colour = "grey")+
  geom_smooth(method= "loess",color="red",
              span=0.8,
              se=T
  )
ggsave("Stress_Pseudotime.pdf",width = 4,height = 4)
ggplot(dat,aes(Pseudotime,FATTY_ACID_METABOLISM))+
  geom_point(size=3,alpha =0.2,colour = "grey")+
  geom_smooth(method= "loess",color="red",
              span=0.8,
              se=T
  )
ggsave("FATTY_ACID_METABOLISM_Pseudotime.pdf",width = 4,height = 4)
ggplot(dat,aes(Pseudotime,M1_signature))+
  geom_point(size=3,alpha =0.2,colour = "grey")+
  geom_smooth(method= "loess",color="red",
              span=0.8,
              se=T
  )
ggsave("M1_signature_Pseudotime.pdf",width = 4,height = 4)

ggplot(dat,aes(Pseudotime,Stress,fill=celltype))+
  geom_point(size=3,alpha =0.2,colour = "grey")+
  geom_smooth(method= "loess",color="red",
              span=0.8,
              se=T
  )



library(patchwork)
p1+p2
#####8.寻找拟时序相关的基因（拟时差异基因）
#使用回归算法，注意不要使用多核心运算，经常会出现警告，
#Monocle的主要工作是通过生物过程（如细胞分化）讲细胞按顺序排序，而不知道要提前查看哪些基因。一旦这样做了，你就可以分析细胞，找到随着细胞进展而变化的基因。
# 官方给出的差异分析有三大方法:
# 1、Basic Differential Analysis
# 2、Finding Genes that Distinguish Cell Type or State
# 3、Finding Genes that Change as a Function of Pseudotime我们重点关注第三个:根据伪时间功能寻找差异基因

#sm.ns 函数指出Monocle应该通过表达式值拟合自然样条曲线，以帮助它将表达式的变化描述为进程的函数。


#这里是把排序基因（ordergene）提取出来做回归分析，来找它们是否跟拟时间有显著的关系
#如果不设置，就会用所有基因来做它们与拟时间(Pseudotime参数)的相关性
Time_diff <- differentialGeneTest(cds[ordergene,], cores = 4, 
                                  fullModelFormulaStr = "~sm.ns(Pseudotime)")
Time_diff <- Time_diff[,c(5,2,3,4,1,6,7)] #把gene放前面，也可以不改
#保存时间差异基因
write.csv(Time_diff, "Time_diff_all.csv", row.names = F)
colnames(Time_diff)
library(dplyr)
Time_genes <- Time_diff %>% pull(gene_short_name) %>% as.character()
p=plot_pseudotime_heatmap(cds[Time_genes,], num_clusters=4, 
                          show_rownames=T, 
                          return_heatmap=T
)
p
ggsave("Time_heatmapAll.pdf",width = 5,height = 12)

#前面通过设置num_clusters将热图聚成了4个cluster，如果想要把每个cluster的基因单独提取出来分析

p$tree_row
# Call:
# hclust(d = d, method = method)
# Cluster method   : ward.D2 
# Number of objects: 2829 
clusters <- cutree(p$tree_row, k = 4)
clustering <- data.frame(clusters)
clustering[,1] <- as.character(clustering[,1])
colnames(clustering) <- "Gene_Clusters"
table(clustering)
# 1    2    3    4 
# 570 1031  506  722 
write.csv(clustering, "Time_clustering_all.csv", row.names = F)
#这样就把每个基因属于哪个cluster提取出来了，后续可以做每个cluster的富集分析。
Time_genes <- top_n(Time_diff, n = 100, desc(qval)) %>% pull(gene_short_name) %>% as.character()
plot_pseudotime_heatmap(cds[Time_genes,], num_clusters=4, show_rownames=T, return_heatmap=T)


# 注: plot_pseudotime_heatmap函数可以来可视化所有monocle的假时间依赖性基因。
# plot_pseudotime_heatmap采用CellDataSet对象（通常只包含重要基因的子集)，
# 并生成平滑的表达曲线，非常类似于plot_genes_in_pseudotime。
# 然后它对这些基因进行聚类，并使用pheatmap软件包进行绘图。
# 绘出的热图可以让我们观测到假时间依赖性基因中的不同基因模块在不同的时间内共同变化，
# 能比较好的回答时间序列基因表达中“哪些基因遵循相似的动力学趋势"这一常见问题。


#显著差异基因按照热图结果排序并保存
hp.genes <- p$tree_row$labels[p$tree_row$order]
Time_diff_sig <- Time_diff[hp.genes, c("gene_short_name", "pval", "qval")]
write.csv(Time_diff_sig, "Time_diff_sig.csv", row.names = F)



#另外也可以手动选择基因来绘制热图，查看其表达模式
marker_genes <- row.names(subset(fData(cds),
                                 gene_short_name %in% c("MEF2C", "MEF2D", "MYF5",
                                                        "ANPEP", "PDGFRA","MYOG",
                                                        "TPM1",  "TPM2",  "MYH2",
                                                        "MYH3",  "NCAM1", "TNNT1",
                                                        "TNNT2", "TNNC1", "CDK1",
                                                        "CDK2",  "CCNB1", "CCNB2",
                                                        "CCND1", "CCNA1", "ID1")))

diff_test_res <- differentialGeneTest(cds[marker_genes,],
                                      fullModelFormulaStr = "~sm.ns(Pseudotime)")
sig_gene_names <- row.names(subset(diff_test_res, qval < 0.1))
plot_pseudotime_heatmap(cds[sig_gene_names,],
                        num_clusters = 4,
                        cores = 1,
                        show_rownames = T)
###
#生信技能数的monocle画热图
cds=my_cds_subset
df=pData(cds)
colnames(df)
plot_cell_trajectory(cds)
counts = Biobase::exprs(cds)
dim(counts)

library(dplyr) 
deg %>% arrange(qval) %>% head(100) %>% select(gene_short_name) -> my_pseudotime_gene
my_pseudotime_gene=my_pseudotime_gene[,1]
my_pseudotime_gene

library(pheatmap)
#数据中心化和归一化
n=t(scale(t(counts[my_pseudotime_gene,]))) # 'scale'可以对log-ratio数值进行归一化
n[n>2]=2 
n[n< -2]= -2
n[1:4,1:4]
pheatmap(n,show_colnames =F,show_rownames = F)
ac=df[,c(18,19,27)]
head(ac)
rownames(ac)=colnames(n)
dim(n)
n[1:4,1:4]
pheatmap(n,show_colnames =F,
         show_rownames = F,
         annotation_col=ac)
od=order(ac$Pseudotime)
od=order(ac$type)
pheatmap(n[,od],show_colnames =F,
         show_rownames = F,cluster_cols = F,
         annotation_col=ac[od,])

# 单细胞轨迹常常包括分支。这些分支的产生是因为细胞执行不同的基因表达程序。在发育过程中，
# 当细胞做出命运选择时，分支出现在轨迹中:一个发育谱系沿着一条路径前进，而另一个谱系产生第二条路径。
# Monocle包含分析这些分支事件的广泛功能。Monocle提供了一个特殊的统计测试:分支表达式分析建模，或BEAM。
# BEAM(Branched expression analysis modeling)是一种统计方法，用于寻找以依赖于分支的方式调控的基因。

plot_cell_trajectory(cds, color_by = "State")
#BEAM进行统计分析
BEAM_res <- BEAM(cds[ordergene,], branch_point = 1, cores = 4) 
#这里用的是ordergene，也就是第六步dpFeature找出来的基因。如果前面用的是seurat的marker基因，记得改成express_genes
#BEAM_res <- BEAM(cds, branch_point = 1, cores = 2) #对2829个基因进行排序，运行慢
BEAM_res <- BEAM_res[order(BEAM_res$qval),]
BEAM_res <- BEAM_res[,c("gene_short_name", "pval", "qval")]
head(BEAM_res)
#           gene_short_name         pval         qval
# CD79A               CD79A 2.757676e-73 7.782161e-70
# TCL1A               TCL1A 1.574889e-65 2.222168e-62
# IGLL5               IGLL5 2.356778e-64 2.216942e-61
# S100A9             S100A9 1.504319e-58 1.061297e-55
# S100A8             S100A8 6.028175e-57 3.402302e-54
# LINC00926       LINC00926 3.180527e-55 1.495908e-52
write.csv(BEAM_res, "BEAM_res.csv", row.names = F)
plot_genes_branched_heatmap(cds[row.names(subset(BEAM_res,qval < 1e-4)),],
                            branch_point = 1, #绘制的是哪个分支
                            num_clusters = 3, #分成几个cluster，根据需要调整
                            cores = 1,
                            use_gene_short_name = T,
                            show_rownames = T)#有632个gene，太多了

library(RColorBrewer)
plot_genes_branched_heatmap(cds[row.names(subset(BEAM_res,qval<1e-4)),],
                            branch_point = 1,#绘制的是哪个分支
                            num_clusters = 4, #这些基因被分成几个group
                            cores = 4,
                            use_gene_short_name = F,
                            show_rownames = F,
                            branch_labels = c("Cell fate 1", "Cell fate 2"),
                            #hmcols = NULL, #默认值
                            hmcols = colorRampPalette(rev(brewer.pal(9, "PRGn")))(62),
                            branch_colors = c("#979797",#pre-branch颜色
                                              "#F05662", #Cell fate 1, 颜色
                                              "#7990C8" #Cell fate 2颜色
                            ), 
                            return_heatmap = F #是否返回一些重要信息
)

#选前100个基因可视化
BEAM_genes <- top_n(BEAM_res, n = 100, desc(qval)) %>% pull(gene_short_name) %>% as.character()
p <- plot_genes_branched_heatmap(cds[BEAM_genes,],  branch_point = 1, 
                                 num_clusters = 3, show_rownames = T, return_heatmap = T)
ggsave("BEAM_heatmap.pdf", p$ph_res, width = 6.5, height = 10)

#显著差异基因(top100)按热图结果排序并保存
##如果要所有的差异基因，就把前面所632个基因的热图存为p
hp.genes <- p$ph_res$tree_row$labels[p$ph_res$tree_row$order]
BEAM_sig <- BEAM_res[hp.genes, c("gene_short_name", "pval", "qval")]
write.csv(BEAM_sig, "BEAM_sig.csv", row.names = F)

head(BEAM_sig)
#选择上面热图中或显著差异基因中感兴趣的基因进行可视化
genes <- row.names(subset(fData(cds),
                          gene_short_name %in% c( "CD8A", "CEBPD", "TYROBP")))

plot_genes_branched_pseudotime(cds[genes,],
                               branch_point = 1,
                               color_by = "State",
                               ncol = 1)

#画甜甜圈图State,celltype,type 开始
dfsub <- df[,c(18,19,28)]#把各自的列选出来
dfsub$x <- "a"
dfsub$y <- "b"
dfsub$z <- "c"
Cellratio <- prop.table(table(dfsub$celltype))#计算各组样本不同细胞群比例
Cellratio <- as.data.frame(Cellratio)
colnames(Cellratio) <- c("celltype","Freq1")
Cellratio2 <- prop.table(table(dfsub$type))#计算各组样本不同细胞群比例
Cellratio2 <- as.data.frame(Cellratio2)
colnames(Cellratio2) <- c("type","Freq2")
Cellratio3 <- prop.table(table(dfsub$State))
Cellratio3 <- as.data.frame(Cellratio3)
colnames(Cellratio3) <- c("State","Freq3")
dfsub1 <- merge(dfsub,Cellratio,by = "celltype")
dfsub1 <- merge(dfsub1,Cellratio2,by = "type")
dfsub1 <- merge(dfsub1,Cellratio3,by = "State")
dfsub1$Freq1 <-1
dfsub1$Freq2 <-1
dfsub1$Freq3 <-1
#图1
ggplot(dfsub1) +
  # 绘制柱状图
  geom_bar(aes(x,Freq1,fill = celltype), 
           stat = 'identity', width = .8)+
  geom_bar(aes(y,Freq2,fill = type), 
           stat = 'identity', width = .8)+
  geom_bar(aes(z,Freq3,fill = State), 
           stat = 'identity', width = .8)+
  coord_polar(theta="y") + theme_void()#
#图2 设置颜色
ClusterName_color_panel <- c(
  "Naive_T_cell" = "#DD1F4D", 
  "Cytotoxic_T_cell" = "#F2C31C", 
  "Proliferating_T_cell" = "#A0C53B",
  "Regulatory_T_cell" = "#2F89CA",
  "1" ="#F2BA4B",
  "2"="#E6DFB5",
  "3"="#54BDB7",
  "4"="#EDF1BB",
  "5"="#EC6868",
  "high"="#E18E7C",
  "low"="#2D9783"
)
ggplot(dfsub1) +
  # 绘制柱状图
  geom_bar(aes(x,Freq1,fill = celltype), 
           stat = 'identity', width = .8)+ 
  scale_fill_manual(name = "", values = ClusterName_color_panel)+
  scale_color_manual(name = "", values = ClusterName_color_panel)+
  geom_bar(aes(y,Freq2,fill = type), 
           stat = 'identity', width = .8)+ 
  geom_bar(aes(z,Freq3,fill = State), 
           stat = 'identity', width = .8)+ 
  coord_polar(theta="y") + theme_void()#
ggsave("circle_plot.pdf",height = 6,width = 6)
#画甜甜圈图State,celltype,type结束

#monocle保存数据####
save(cds,file="cds.Rdata")
#genesets_used####
#对T细胞进行分组GSEA
library(Seurat)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(limma)
genesets <- msigdbr(species = "Homo sapiens", category = "H") 
genesets <- subset(genesets, select = c("gs_name","gene_symbol")) %>% as.data.frame()
genesets <- split(genesets$gene_symbol, genesets$gs_name)
names(genesets)
gs_used <- genesets[c("HALLMARK_ADIPOGENESIS","HALLMARK_FATTY_ACID_METABOLISM","HALLMARK_HYPOXIA","HALLMARK_OXIDATIVE_PHOSPHORYLATION",
                      "HALLMARK_APOPTOSIS","HALLMARK_TNFA_SIGNALING_VIA_NFKB","HALLMARK_ANGIOGENESIS",
                      "HALLMARK_E2F_TARGETS", "HALLMARK_G2M_CHECKPOINT","HALLMARK_NOTCH_SIGNALING",
                      "HALLMARK_INFLAMMATORY_RESPONSE"
)]
names(genesets)
gs_used


genesets<- msigdbr(species = "Homo sapiens", category = "C2",subcategory = "CP:KEGG")
genesets <- subset(genesets, select = c("gs_name","gene_symbol")) %>% as.data.frame()
genesets <- split(genesets$gene_symbol, genesets$gs_name)
names(genesets)
gs_used2 <- genesets[c("KEGG_CELL_CYCLE","KEGG_APOPTOSIS","KEGG_ADHERENS_JUNCTION",
                       "KEGG_ANTIGEN_PROCESSING_AND_PRESENTATION","KEGG_JAK_STAT_SIGNALING_PATHWAY" ,"KEGG_VEGF_SIGNALING_PATHWAY","KEGG_WNT_SIGNALING_PATHWAY","KEGG_TOLL_LIKE_RECEPTOR_SIGNALING_PATHWAY",
                       "KEGG_CELL_ADHESION_MOLECULES_CAMS","KEGG_DNA_REPLICATION","KEGG_FOCAL_ADHESION","KEGG_FATTY_ACID_METABOLISM","KEGG_ECM_RECEPTOR_INTERACTION"
                       
)]
tt <- c(gs_used, gs_used2)

#t8sce@meta.data <- t8sce@meta.data[-c(23:25)]
DefaultAssay(masce) <- "RNA"
cd_features <- list(c("CCR7","TCF7","LEF1","SELL"#'Naive_Score'
))
names(cd_features) <- 'Naive_Score'
tt <- c(tt,cd_features)

cd_features <- list(c("PDCD1","TIGIT","LAG3","HAVCR2","CTLA4"#'Exhausted_Score'
))
names(cd_features) <- 'Exhausted_Score'
tt <- c(tt,cd_features)


cd_features <- list(c("NKG7","PRF1","CCL4","GZMA","GZMB","CST7","IFNG","GZMK"#'Cytotoxic_Score',"FGFBP2"
))
names(cd_features) <- 'Cytotoxic_Score'
tt <- c(tt,cd_features)

cd_features <- list(c("MRC1","CD163","MERTK","C1QB","C1QA"
))
names(cd_features) <- 'Phagocytosis_score'
tt <- c(tt,cd_features)

cd_features <- list(c(  #M1 Macrophage Polarization
  "IL12A","IL12B","TNF","IL6","CD86","IL1B","MARCO","NOS2","FCGR1A","FCER1G","CD80","CXCL10","IL23A","CXCL9","CXCL11","CD86","IL1A",
  "IL1B", "IL6",
  "HLA-DPB1","HLA-DRB1","HLA-DPA1", #"MHCII"
  "CCL5","IRF5","IRF1","CD40","IDO1","KYNU","CCR7","PTPRC",#"CD45",
  "CD68","CSF1R",# "CD115",
  "HLA-DRA","LY75","CD14"
))

names(cd_features) <- 'M1_Macrophage_Polarization'
tt <- c(tt,cd_features)

cd_features <- list(c(
  "ARG1","ARG2", "IL10",
  "FCGR2A","FCGR2B",#"CD32",
  "CD163","FCER2",#"CD23",
  "CD200R1","PDCD1LG2",#"PD-L2",
  "CD274",#"PDL1",
  "MARCO","CSF1R",
  "MRC1",#CD206",
  "IL1RN","IL1R2","IL4R","CCL4","CCL13","CCL20","CCL17","CCL18","CCL22","CCL24","LYVE1","VEGFA","VEGFB","VEGFC",
  "VEGFD","EGF","CTSA",
  "CTSB","CTSD","TGFB1","TGFB2","TGFB3","MMP14","MMP19","MMP9","CLEC7A","WNT7B","FASLG",#FASL
  "TNFSF12","TNFSF8","CD276","VTCN1","MSR1","FN1","IRF4","PTPRC",#"CD45","CD68",
  "CSF1R",#"CD115",
  "HLA-DRA","LY75",#"CD205",
  "CD14"
))
names(cd_features) <- 'M2_Macrophage_Polarization'
tt <- c(tt,cd_features)

cd_features <- list(c(
  "NOS2",#"iNOS",
  "IL12A",#IL12
  "IL12B",#IL12
  "FCGR1A","FCGR1B",#CD64 
  "CD80","IL23A",#"IL23"
  "CXCL9","CXCL10","CXCL11","CD86", #(B7-2)
  "IL1A","IL1B","IL6","TNF","HLA-DPB1","HLA-DRB1","HLA-DPA1", #"MHCII"
  "CCL5","IRF5","IRF1","CD40","IDO1","KYNU","CCR7"
))
names(cd_features) <- 'M1_signature'
tt <- c(tt,cd_features)

cd_features <- list(c(#M2_signature
  "ARG1","ARG2","IL10",
  "FCGR2A",#"CD32",
  "CD163","FCER2",#CD23 (FCER2)
  "CD200R1","PDCD1LG2","CD274","MARCO","CSF1R","MRC1",#CD206 (MRC1)
  "IL1RN",#Il1RA (IL1RN)
  "IL1R2",#"Il1R2",
  "IL4R","CCL4","CCL13","CCL20","CCL17","CCL18","CCL22","CCL24","LYVE1",
  "VEGFA","VEGFB","VEGFC","VEGFD","EGF","CTSA","CTSB","CTSD","TGFB1","TGFB2",
  "TGFB3","MMP14","MMP19","MMP9","CLEC7A","WNT7B","FASLG","TNFSF12","TNFSF8","CD276", #(B7-H3)
  "VTCN1", #(BH-H4)
  "MSR1", #(CD204)
  "FN1","IRF4" 
))

names(cd_features) <- 'M2_signature'
tt <- c(tt,cd_features)

cd_features <- list(c(#pro_inflamation_score
  "IL1A","IL1B","TNF","IFNG","TBX21","CCL3","CCL4","PRF1",
  "GZMA","GZMB","GZMK","GZMH","CD8A","FASLG","CCL2","CCL20",
  "IL2","IL6","IL12A","IL17A","IL23A","PTGS2","TLR4","TNF"
))
names(cd_features) <- 'Pro_inflamation_score'
tt <- c(tt,cd_features)

cd_features <- list(c(#Anti_inflammatory_score
  "TIGIT", "IDO1","LGALS3", "PDCD1", "FOXP3","ENTPD1","CD274",
  "CSF2","CTLA4", "CXCL12", "CXCL5", "CXCL8","MIF","PTGS2","VEGFA"
))
names(cd_features) <- 'Anti_inflammatory_score'
tt <- c(tt,cd_features)


DefaultAssay(masce) <- "RNA"
#Stress
a <-"FOS
ATF3
NR4A1
DUSP1
ZFP36
PPP1R15A
SGK1
EGR1
ZC3H12A
JUNB
FOSB
IER2
NFKBIA
NFKBIZ
HBEGF
BTG2
SOD2
CDKN1A
NCOA7
JUN
MYC
SERTAD1
CCNL1
RND3
PLK2
SOCS3
DNAJB1
DUSP2
TSC22D1
KLF10
GADD45B
PMAIP1
MAFF
ERRFI1
SLC38A2
IRF1
TOB1
ID2
KLF6
DNAJA1
TNFAIP3
BHLHE40
NXF1
FOSL1
IER3
DUSP6
HCAR2
IL8
CYR61
EFNA1
"
cd_features <- strsplit(a,split = "\n") 

names(cd_features) <- 'Stress'
tt <- c(tt,cd_features)


genesets <- tt
#GSVA富集分析#
Idents(masce) <- "type" 
expr <- AverageExpression(masce, assays = "RNA", slot = "data")[[1]]
expr <- expr[rowSums(expr)>0,]  #选取非零基因
expr <- as.matrix(expr)
head(expr)

gsva.res <- gsva(expr, genesets, method="gsva") 
#saveRDS(gsva.res, "gsva.res.rds")
gsva.df <- data.frame(Genesets=rownames(gsva.res), gsva.res, check.names = F)
#write.csv(gsva.df, "gsva_res.csv", row.names = F)
pdf("GSVA_28_gs_celltype.pdf",height = 7,width=6)
pheatmap::pheatmap(gsva.res, show_colnames = T, cluster_cols=F,cluster_rows=F,	
                   #scale = "row",
                   angle_col = "45",
                   color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
dev.off()


genesets <- tt
#
Idents(masce) <- "type" 
expr <- AverageExpression(masce, assays = "RNA", slot = "data")[[1]]
expr <- expr[rowSums(expr)>0,]  #选取非零基因
expr <- as.matrix(expr)
head(expr)

gsva.res <- gsva(expr, genesets, method="gsva") 
#saveRDS(gsva.res, "gsva.res.rds")
gsva.df <- data.frame(Genesets=rownames(gsva.res), gsva.res, check.names = F)
#write.csv(gsva.df, "gsva_res.csv", row.names = F)
pdf("GSVA_28_gs_type.pdf",height = 7,width=5)
pheatmap::pheatmap(gsva.res, show_colnames = T, cluster_cols=F,cluster_rows=F,	
                   #scale = "row",
                   angle_col = "45",
                   color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
dev.off()
#SPP1+vs_C1QA田字火山图####
library(tibble)
Idents(masce) <- "celltype"
de_genes <- FindMarkers(object = masce, ident.1 = "Mac_c2_SPP1", ident.2 = "Mac_c0_C1QA", logfc.threshold = 0.01, min.pct = 0.01)
de_genes <- rownames_to_column(de_genes)
write.csv(de_genes,"de_genes1.csv")
de_genes2 <- FindMarkers(object = masce, ident.1 = "Mac_c1_IL1B", ident.2 = "Mac_c0_C1QA", logfc.threshold = 0.01, min.pct = 0.01)
de_genes2 <- rownames_to_column(de_genes2)
write.csv(de_genes2,"de_genes2.csv")


#合并####
df <- merge(de_genes,de_genes2,by="rowname")
write.csv(df,"df.csv")
# # 设置p值
# df$pval <- ""
# df$pval[which(df$p_val.x<0.05 & df$p_val.y<0.05)] <- "red"
# df$pval[which(df$p_val.x>0.05 & df$p_val.y<0.05)] <- "blue"
# df$pval[which(df$p_val.x<0.05 & df$p_val.y>0.05)] <- "purple"
# df$pval[which(df$p_val.x>0.05 & df$p_val.y>0.05)] <- "grey"
# table(df$pval)
#设置显示的值
df$label <- "black"
df$label[which(df$avg_log2FC.x > 0.5 & df$avg_log2FC.y > 0.5)] <- "red"
df$label[which(df$avg_log2FC.x > 0.5 & df$avg_log2FC.y <= -0.5)] <- "blue"
df$label[which(df$avg_log2FC.x <= -0.5 & df$avg_log2FC.y > 0.5)] <- "purple"
df$label[which(df$avg_log2FC.x <= -0.5 & df$avg_log2FC.y <= -0.5 )] <- "grey"

table(df$label)
library(ggrepel)
ggplot(df, aes(x =avg_log2FC.x, y=avg_log2FC.y, colour=label)) + #x、y轴取值限制，颜色根据"Sig"
  geom_point(alpha=0.65, size=2) +  #点的透明度、大小
  scale_color_manual(values=c("grey", "blue","purple","red","orange")) + xlim(c(-2, 2)) +  #调整点的颜色和x轴的取值范围
  geom_vline(xintercept=c(-0.5,0.5),lty=4,col="black",lwd=0.8) + #添加x轴辅助线,lty函数调整线的类型："twodash"、"longdash"、"dotdash"、"dotted"、"dashed"、"solid"、"blank"
  geom_hline(yintercept = c(-0.5,0.5), lty=4,col="black",lwd=0.8) +  #添加y轴辅助线
  labs(x="Mac_c2_SPP1_vs_Mac_c0_C1QA", y="Mac_c1_IL1B_vs_Mac_c0_C1QA") +  #x、y轴标签
  ggtitle("Volcano") + #标题
  theme_bw() + # 主题，help(theme)查找其他个性化设置
  theme(plot.title = element_text(hjust = 0.5),
        legend.position="right", 
        legend.title = element_blank()
  ) + geom_text_repel(
    data= subset(df,df$label%in%c("blue","red","grey","purple")),# 可以设置跟上面不同的阈值，用数值替换即可
    aes(label = rowname), size = 3,
    box.padding = unit(0.5, "lines"),
    point.padding = unit(0.8, "lines"), segment.color = "black", show.legend = FALSE)
ggsave("tian.pdf",height = 10,width = 10)


#画樊嘉热图MHCII#####
genes_to_check = c("TAP1","TAP2","B2M",
                   "HLA-DPB1","HLA-DPA1","HLA-DQB2","HLA-DRA","HLA-DRB1","HLA-DRB3","HLA-DRB4",
                   "HLA-B","HLA-C", "HLA-A"  
)

library(pheatmap) 
p <- DotPlot(masce, features = unique(genes_to_check),
             assay='RNA' ,group.by = 'type')+coord_flip()+
  scale_color_gradient2(low="#E2AF5F",high="#6C285D",mid="white",midpoint = 0)+theme(axis.text.x = element_text(angle = 0)) 
p
dat <-p$data[3:5]
colnames(dat) <- c("Gene","variable","value")
#长数据变宽数据
library(reshape2)
dat1 <-dcast(dat,Gene~variable)
rownames(dat1) <- dat1$Gene
dat1 <- dat1[,-1]
bk <- c(seq(-3, 3,by = 0.01))
library(pheatmap)
#自己
pheatmap::pheatmap(dat1,
         cluster_cols = F, cluster_rows = F, scale = "none",
         display_numbers = F,
         border_color = "white",
         gaps_row = c(3,8),#对想要分隔的基因
         gaps_col = c(1,2),#对象要分隔的细胞群
         color = colorRampPalette(c("#24ABAE","white","#CF254A"))(length(bk)),
         width = 5,
         height = 7
)
dev.off()
dev.new()
pheatmap(dat1,
         cluster_cols = F, cluster_rows = F, scale = "none",
         display_numbers = F,
         border_color = "black",
         gaps_row = c(3,11,14,16,20,23,27,30,34,38,41),#对想要分隔的基因
         gaps_col = c(3, 7,8,11),#对象要分隔的细胞群
         color = colorRampPalette(c("#2A9280","white","#D1694D"))(length(bk)),
         width = 5,
         height = 7,
         filename = "tcell_heatmap.pdf"
)
#樊嘉
pheatmap(dat1,
         cluster_cols = F, cluster_rows = F, scale = "none",
         display_numbers = F,
         border_color = "black",
         gaps_row = c(4,7,12,21,25,28,30),#对想要分隔的基因
         gaps_col = c(3, 7,10),#对象要分隔的细胞群
         color = colorRampPalette(c("#E2AF5F","white", "#6C285D"))(length(bk)),
         width = 5,
         height = 7,
         filename = "tcell_heatmap_Fanjia.pdf"
)
dev.new()


#两基因相关性图####
FeatureScatter(masce, feature1 = "SPP1", feature2 = "TREM2")

#addmodulescoreDC模块####
signaturelist <- read.csv("DC_Siguature.csv",header = T,check.names = F) 
DefaultAssay(masce) <- "RNA"
cd_features <- list(#Antigen_processing_and_presentation
  signaturelist$Antigen_processing_and_presentation
  
)
#修改变量名称
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'Antigen_processing_and_presentation'

cd_features <- list(#Immune_suppressive_score
  signaturelist$Immune_suppressive[1:9]
)
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'Immune_suppressive_score'

cd_features <- list(#Dendritic_cell_differentation
  signaturelist$Dendritic_cell_differentation[1:43]
)
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'Dendritic_cell_differentation'

cd_features <- list(#Co_stimulation_signature
  signaturelist$`Co-stimulation_signature`[1:4]
)
masce <- AddModuleScore(masce,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(masce@meta.data)
colnames(masce@meta.data)[which(colnames(masce@meta.data) %in% "CD_Features1")] <- 'Co_stimulation_signature'


VlnPlot(masce,features = 'Antigen_processing_and_presentation',pt.size = 0, adjust = 2,group.by = "celltype")
VlnPlot(masce,features = 'Immune_suppressive_score',pt.size = 0, adjust = 2,group.by = "celltype")
VlnPlot(masce,features = 'Dendritic_cell_differentation',pt.size = 0, adjust = 2,group.by = "celltype")
VlnPlot(masce,features = 'Co_stimulation_signature',pt.size = 0, adjust = 2,group.by = "celltype")

VlnPlot(masce,features = 'Antigen_processing_and_presentation',pt.size = 0, adjust = 2,group.by = "type")
VlnPlot(masce,features = 'Immune_suppressive_score',pt.size = 0, adjust = 2,group.by = "type")
VlnPlot(masce,features = 'Dendritic_cell_differentation',pt.size = 0, adjust = 2,group.by = "type")
VlnPlot(masce,features = 'Co_stimulation_signature',pt.size = 0, adjust = 2,group.by = "type")

#
#数据准备
mydata<- FetchData(masce,vars = c("celltype","type",'Antigen_processing_and_presentation','Immune_suppressive_score','Dendritic_cell_differentation','Co_stimulation_signature'))
#看一下小提琴怎么画
library(ggplot2)
library(ggsci)
library(hrbrthemes)
library(tidyr)
library(reshape2)  

#melt()函数将宽格式转化为长格式
data_long_m<-melt(mydata, id.vars = c("celltype","type"), #需保留的不参与聚合的变量列名
                  measure.vars = c('Antigen_processing_and_presentation','Immune_suppressive_score','Dendritic_cell_differentation','Co_stimulation_signature'),#需要聚合的变量s1-s10
                  variable.name = c('score'),#聚合变量的新列名
                  value.name = 'value')#聚合值的新列名
data_long_m
#合并plot
my_comparisons = list( c("J", "N"),c("T", "N"),c("J", "T"))
ggplot(data = data_long_m, aes(x = type, y = value, fill = type)) +
  geom_violin(position = position_dodge(0.5))+stat_compare_means(comparisons = my_comparisons,
                                                                 method = "wilcox.test",
                                                                 label = "p.signif",
                                                                 symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
                                                                                  symbols = c("***", "**", "*", "ns")))+
  scale_fill_manual(values = c(color_high,color_low,"red"))+
  geom_boxplot(width=0.1,
               position = position_dodge(0.5))+
  facet_wrap(~score,nrow=2)
ggsave("4score.pdf",height = 6,width = 6)

#Antigen_processing_and_presentation#
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Antigen_processing_and_presentation',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'Antigen_processing_and_presentation',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#箱型图画法
my_comparisons = list( c("N", "J"),
                       c("J","T"),
                       c("T", "N")
)
ggboxplot(P$data,x = "ident",y = "Antigen_processing_and_presentation",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Antigen_processing_and_presentation_box2.pdf",width = 2,height = 4)
#Immune_suppressive_score#
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Immune_suppressive_score',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'Immune_suppressive_score',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

#箱型图画法
ggboxplot(P$data,x = "ident",y = "Immune_suppressive_score",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Immune_suppressive_score_box2.pdf",width = 2,height = 4)
#Dendritic_cell_differentation#
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Dendritic_cell_differentation',
           pt.size = 0, adjust = 2,
           group.by = "celltype")

VlnPlot(masce,features = 'Dendritic_cell_differentation',
        pt.size = 0, adjust = 2,
        group.by = "celltype")
table(P$data[,2])

#箱型图画法

ggboxplot(P$data,x = "ident",y = "Dendritic_cell_differentation",color = "ident")+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Dendritic_cell_differentation_box2.pdf",width = 2,height = 4)

#Co_stimulation_signature#
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(masce,features = 'Co_stimulation_signature',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(masce,features = 'Co_stimulation_signature',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#箱型图画法
ggboxplot(P$data,x = "ident",y = "Co_stimulation_signature",color = "ident",palette =c("#24ABAE", "#E8BD27", "#CF254A"))+ theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1))+
  stat_compare_means(comparisons = my_comparisons, method = "wilcox.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Co_stimulation_signature_box2.pdf",width = 2,height = 4)


#cor####
library(pheatmap)
Idents(masce)<- masce$celltype
av.exp<- AverageExpression(masce)$RNA
# av.exp<- av.exp[which(row.names(av.exp)%in% features),]
features=names(tail(sort(apply(av.exp, 1, sd)),length(rownames(masce))))
av.exp<- av.exp[which(row.names(av.exp)%in% features),]
av.exp <- cor(av.exp, method= "spearman")
pheatmap::pheatmap(av.exp,color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap::pheatmap(av.exp,
                   display_numbers = T,
                   color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap::pheatmap(av.exp,color = colorRampPalette(c("#040206","#201B3F","#5A2766","#A64056","#CD663A","#DA8B3B","#EFEAAB"))(50))
pheatmap::pheatmap(av.exp,color = colorRampPalette(c("#1D2C6C", "#1C4A9E", "#34A2DC","#78C5AB","#C8DB49","#F3F900","#E72318"))(50))

#Ro/e####
library("sscVis")
# #sscVis安装
# devtools::install_github("Japrin/sscVis")
# install.packages(c("cpp11", "labeling", "vctrs", "rlang", "gtable", "cli", "ggplot2", "Rcpp",
#                    "fs", "ps", "processx", "jsonlite", "digest", "MatrixModels", "quantreg",
#                    "dplyr", "purrr", "mvtnorm", "viridis", "matrixStats"))
# BiocManager::install("impute")
library("data.table")
library("grid")
library("cowplot")
library("ggrepel")
library("readr")
library("plyr")
library("ggpubr")
library("ggplot2")
#函数#
do.tissueDist <- function(cellInfo.tb = cellInfo.tb,
                          meta.cluster = cellInfo.tb$meta.cluster,
                          colname.patient = "patient",
                          loc = cellInfo.tb$loc,
                          out.prefix,
                          pdf.width=3,
                          pdf.height=5,
                          verbose=0){
  ##input data 
  library(data.table)
  dir.create(dirname(out.prefix),F,T)
  
  cellInfo.tb = data.table(cellInfo.tb)
  cellInfo.tb$meta.cluster = as.character(meta.cluster)
  
  if(is.factor(loc)){
    cellInfo.tb$loc = loc
  }else{cellInfo.tb$loc = as.factor(loc)}
  
  loc.avai.vec <- levels(cellInfo.tb[["loc"]])
  count.dist <- unclass(cellInfo.tb[,table(meta.cluster,loc)])[,loc.avai.vec]
  freq.dist <- sweep(count.dist,1,rowSums(count.dist),"/")
  freq.dist.bin <- floor(freq.dist * 100 / 10)
  print(freq.dist.bin)
  
  {
    count.dist.melt.ext.tb <- test.dist.table(count.dist)
    p.dist.tb <- dcast(count.dist.melt.ext.tb,rid~cid,value.var="p.value")
    OR.dist.tb <- dcast(count.dist.melt.ext.tb,rid~cid,value.var="OR")
    OR.dist.mtx <- as.matrix(OR.dist.tb[,-1])
    rownames(OR.dist.mtx) <- OR.dist.tb[[1]]
  }
  
  sscVis::plotMatrix.simple(OR.dist.mtx,
                            out.prefix=sprintf("%s.OR.dist",out.prefix),
                            show.number=F,
                            waterfall.row=T,par.warterfall = list(score.alpha = 2,do.norm=T),
                            exp.name=expression(italic(OR)),
                            z.hi=4,
                            palatte=viridis::viridis(7),
                            pdf.width = 4, pdf.height = pdf.height)
  if(verbose==1){
    return(list("count.dist.melt.ext.tb"=count.dist.melt.ext.tb,
                "p.dist.tb"=p.dist.tb,
                "OR.dist.tb"=OR.dist.tb,
                "OR.dist.mtx"=OR.dist.mtx))
  }else{
    return(OR.dist.mtx)
  }
}

test.dist.table <- function(count.dist,min.rowSum=0)
{
  count.dist <- count.dist[rowSums(count.dist)>=min.rowSum,,drop=F]
  sum.col <- colSums(count.dist)
  sum.row <- rowSums(count.dist)
  count.dist.tb <- as.data.frame(count.dist)
  setDT(count.dist.tb,keep.rownames=T)
  count.dist.melt.tb <- melt(count.dist.tb,id.vars="rn")
  colnames(count.dist.melt.tb) <- c("rid","cid","count")
  count.dist.melt.ext.tb <- as.data.table(ldply(seq_len(nrow(count.dist.melt.tb)), function(i){
    this.row <- count.dist.melt.tb$rid[i]
    this.col <- count.dist.melt.tb$cid[i]
    this.c <- count.dist.melt.tb$count[i]
    other.col.c <- sum.col[this.col]-this.c
    this.m <- matrix(c(this.c,
                       sum.row[this.row]-this.c,
                       other.col.c,
                       sum(sum.col)-sum.row[this.row]-other.col.c),
                     ncol=2)
    res.test <- fisher.test(this.m)
    data.frame(rid=this.row,
               cid=this.col,
               p.value=res.test$p.value,
               OR=res.test$estimate)
  }))
  count.dist.melt.ext.tb <- merge(count.dist.melt.tb,count.dist.melt.ext.tb,
                                  by=c("rid","cid"))
  count.dist.melt.ext.tb[,adj.p.value:=p.adjust(p.value,"BH")]
  return(count.dist.melt.ext.tb)
}

setwd("D:\\leadtest\\immune\\myeloid\\macro2")
#设置图片输出目录
out.prefix <- "D:\\leadtest\\immune\\myeloid\\macro2"
# 源代码
# OR.CD8.list <- do.tissueDist(cellInfo.tb=meta.tb[stype=="neu" &  treatment=="baseline",],
#                              out.prefix=sprintf("%s.STARTRAC.dist.T.baseline.CD8",out.prefix),
#                              pdf.width=4,pdf.height=6,verbose=1)
masce$meta.cluster <- masce$celltype
masce$stype <- "Macro"
masce$loc <- masce$type
table(masce$stype)
meta.tb <- masce@meta.data



OR.CD8.list <- do.tissueDist(cellInfo.tb=meta.tb,
                             out.prefix=sprintf("%s.STARTRAC.dist.T.baseline.CD8",out.prefix),
                             pdf.width=4,pdf.height=6,verbose=1)


OR.CD8.list$OR.dist.mtx
OR.CD8.list$p.dist.tb
#接下来画热图
dat <- OR.CD8.list$OR.dist.mtx
dat_p <- as.data.frame(OR.CD8.list$p.dist.tb)
rownames(dat_p) <- dat_p[,1]
dat_p <- dat_p[,-1]


# 修改一下特殊值
dat[,1][5] <- as.numeric("5.88343046")

#OR>1.5越倾向在该组织分布，OR<0.5越不倾向在该组织中分布。
library(pheatmap)
pheatmap(dat, cellwidth = 20, cellheight = 20, 
         main = "heatmap"#filename = "heatmap1.png"
)
my_colors <- c("red", "green", "blue", "yellow")
my_palette <- colorRampPalette(c("blue", "white", "red"))
# 绘制热图，并使用自定义颜色向量
pheatmap(dat, cellwidth = 20, cellheight = 20,angle = 0,color = colorRampPalette(c("white","red","#71151A"))(100),cluster_rows = F,
         display_numbers = matrix(ifelse(abs(dat_p) <0.05, "*", ""),nrow(dat_p)),
         filename = "OR2.pdf"
)
pheatmap(dat, color = my_colors)
pheatmap(dat, cellwidth = 20, cellheight = 20,angle = 0,color = colorRampPalette(c("white","red","black"))(100),cluster_rows = F,
         display_numbers = matrix(ifelse(abs(dat_p) <0.05, "*", ""),nrow(dat_p)),
         filename = "OR3.pdf"
)
pheatmap(dat, cellwidth = 20, cellheight = 20,
         angle = 0,
         color = colorRampPalette(c("#F6EFF1","#CEA2B0","#AB677A","#8B3951","#6B1830","#490517"))(100),
         cluster_rows = F,
         display_numbers = matrix(ifelse(abs(dat_p) <0.05, "*", ""),nrow(dat_p)),
         filename = "OR3.pdf"
)


#画雷达图####
dat <- masce@meta.data[,c(5,28:36)]#选取分析的54种代谢

dat1 <- aggregate(dat[,2:ncol(dat)],by=list(type=dat$type),mean)#
library(tidyverse)
dat1 <- column_to_rownames(dat1,var = "type")
#dat1 <- as.data.frame(scale(dat1))#看要不要归一
min(dat1);max(dat1)
dat2 <- rbind(rep(0.4,ncol(dat)-1) , #坐标轴上限
              rep(-0.1,ncol(dat)-1),dat1) #坐标轴下限
data <- dat2
colnames(data) <- str_to_title(sub('KEGG_*','',colnames(data)))#改一下变量名字
colnames(data) <- sub('.gmt','',colnames(data))#改一下变量名字
a <- 1:(ncol(dat)-1)
a <- paste0(a,".")
colnames(data) <- paste0(a,colnames(data))
colors_border=c( "#24ABAE","#E8BD27","#CF254A")
#colors_in=c(rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4))
# plot with default options:
library(fmsb)
radarchart(data, axistype=1 ,
           #custom polygon
           pcol=colors_border , #pfcol=colors_in ,
           plwd=1 , plty=1,
           #custom the grid
           cglcol="grey", cglty=3, axislabcol="grey", 
           caxislabels=seq(-0.1,0.9,0.2), 
           cglwd=0.8,
           #custom labels
           vlcex=0.8 
)
# Add a legend
legend(x=1.5, y=1.5, legend = rownames(data[-c(1,2),]),title="Type",  bty = "n", pch=20 , col=colors_border , text.col = "grey", cex=1.2, pt.cex=3)
#8x8


#pyscenic####
#做pyscenic的分析#####
#看一下不同位置的肿瘤细胞转录因子有什么区别
#第一步准备文件
setwd("D:\\leadtest\\immune\\myeloid\\macro2\\pyscenic")
write.csv(t(as.matrix(masce@assays$RNA@counts)), file = "masce.csv")


# #保存文件####
# setwd("D:\\leadtest\\immune\\myeloid\\macro2")
# save(masce,file="masce_marker.Rdata")
#加载数据####
setwd("D:\\leadtest\\immune\\myeloid\\macro2")
load("masce_marker.Rdata")
library(Seurat)
library(ggplot2)
library(clustree)
library(cowplot)
library(dplyr)


