setwd("D:\\ST_P6")#BRX8003456 P1
library(Seurat)
#library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(cowplot)

data_dir <-"D:\\ST_P6"
list.files(data_dir)
file_name <-"filtered_feature_bc_matrix.h5"
#
larea <- Load10X_Spatial(data.dir = data_dir, filename = file_name,slice ="Leadingedgearea")
larea@project.name <-"Leadingedgearea"
Idents(larea) <-"Leadingedgearea"
larea$orig.ident <-"Leadingedgearea"
#
p1 <- VlnPlot(larea, features ="nCount_Spatial",
              pt.size = 0,cols ="tomato") + NoLegend()
p1
ggsave("nCount.pdf",width = 4,height = 4)
p2 <- SpatialFeaturePlot(larea, features ="nCount_Spatial",alpha = c(0.1, 1)) +
  theme(legend.position ="right")
p2
ggsave("nCount_Spatial.pdf",width = 6,height = 6)
#p1+p2
p1 | p2

p3 <- VlnPlot(larea, features ="nFeature_Spatial",
              pt.size = 0,cols ="tomato") + NoLegend()
p3
ggsave("nFeature.pdf",width = 4,height = 4)
p4 <- FeatureScatter(larea, feature1 ="nCount_Spatial",
                     feature2 ="nFeature_Spatial")+ NoLegend()
p4
ggsave("nCount_nFeature_scatter.pdf",width = 6,height = 6)
p3 | p4

#
#
larea <- SCTransform(larea, assay = "Spatial", verbose = FALSE)
#
top10 <- head(VariableFeatures(larea),10)
top10

#
p5 <- VariableFeaturePlot(larea,cols = c("gray60", "red"))+NoLegend()
p5
p6 <- LabelPoints(plot = p5,points = top10, repel = TRUE,xnudge=0,ynudge=0)
p6
#
SpatialFeaturePlot(larea, features = c("EPCAM", "ALB","SPP1","S100A6","COL1A1","TREM2"))
SpatialFeaturePlot(larea, features = c("SPINK1", "ALB","SPP1","S100A6","COL1A1","KRT7","KRT19"))
SpatialFeaturePlot(larea, features = top10,ncol = 5)
#
p7 <- SpatialFeaturePlot(larea, features ="SPINK1", pt.size.factor = 1.5,stroke = 0.0)
p8 <- SpatialFeaturePlot(larea, features ="ACTA2", alpha = c(0.1, 1.5))#尝试将其设置为alphac（0.1，1），以降低具有较低表达式的点的透明度
p7 + p8
SpatialFeaturePlot(larea, features ="MUC5AC", alpha = c(0.1, 1.5))
SpatialFeaturePlot(larea, features ="SPP1", alpha = c(0.1, 1.5))
SpatialFeaturePlot(larea, features ="DCDC2", alpha = c(0.1, 1.5))
SpatialFeaturePlot(larea, features ="S100P", alpha = c(0, 1))
SpatialFeaturePlot(larea, features ="CDH2", alpha = c(0, 1))
SpatialFeaturePlot(larea, features ="NCAM1", alpha = c(0, 1))
SpatialFeaturePlot(larea, features ="DCN", alpha = c(0, 1))
SpatialFeaturePlot(larea, features ="TREM2", alpha = c(0.1, 1.5))
SpatialFeaturePlot(larea, features ="ZFPM2", alpha = c(0, 1))
SpatialFeaturePlot(larea, features ="MARCO", alpha = c(-0.5, 1))
p8
p7 + p8
#gene expr in ST####
P<-SpatialFeaturePlot(larea, features ="MUC5AC")
img <- P$data[,1:3]
#
ggplot(img, aes(x=imagecol, y=600-imagerow,color = MUC5AC)) +
  geom_point(size = 1.5)+
  scale_color_gradient2(low="black",high="white",mid="red",midpoint = median(img$MUC5AC)
  )+
  theme_minimal() + 
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ 
  theme(axis.text.x=element_blank(), #
        axis.text.y=element_blank()) +#
  theme(plot.background = element_rect(fill = "black" ))+ 
  #theme(panel.background = element_rect(fill = 'black', color = 'black'))
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",#
        legend.position = "top"#
  )

ggplot(img, aes(x=imagecol, y=600-imagerow,color = MUC5AC)) +
  geom_point(size = 1.5)+
  scale_color_gradient2(low="#07091E",
                        high="white",
                        mid="red",
                        midpoint = median(img$MUC5AC))+
  theme_minimal() + 
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ 
  theme(axis.text.x=element_blank(), 
        axis.text.y=element_blank()) +
  #theme(plot.background = element_rect(fill = "black" ))+ 
  theme(panel.background = element_rect(fill = 'black', color = 'black'))+
  labs(x="",y = "",title = "")+theme(aspect.ratio = 1)+
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",
        legend.position = "top"
  )
#
ggplot(img, aes(x=imagecol, y=600-imagerow,color = MUC5AC)) +
  geom_point(size = 1.5)+
  scale_color_gradientn(colors = c("#040103","#0D0B1D","#6F2663","#CA623C","#EAE69A","#F9F9B7"))+
  theme_minimal() + 
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ 
  theme(axis.text.x=element_blank(), #
        axis.text.y=element_blank()) +#
  #theme(plot.background = element_rect(fill = "black" ))+ 
  theme(panel.background = element_rect(fill = 'black', color = 'black'))+
  labs(x="",y = "",title = "")+theme(aspect.ratio = 1)+
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",#
        legend.position = "top"#
  )
ggsave("MUC5AC_expr.pdf",height = 6,width = 6)
#
larea <- RunPCA(larea, assay = "SCT", verbose = FALSE)
larea <- FindNeighbors(larea, reduction = "pca", dims = 1:30)
larea <- FindClusters(larea, verbose = FALSE)
larea <- RunUMAP(larea, reduction = "pca", dims = 1:30)
#
p9 <- DimPlot(larea, reduction = "umap", label = TRUE)+theme(aspect.ratio = 1)
p9

for (res in c(0.01, 0.05, 0.1, 0.2, 0.3,0.4, 0.5,0.8,1,1.5,2,3)) {
  larea=FindClusters(larea, graph.name = "SCT_snn", resolution = res, algorithm = 1)
}
apply(larea@meta.data[,grep("SCT_snn_res",colnames(larea@meta.data))],2,table)


#set resolution####
sel.clust = "SCT_snn_res.0.8"
larea <- SetIdent(larea, value = sel.clust)
larea@active.ident <- factor(larea@active.ident,levels = c(0:(length(table(larea@active.ident))-1)))
table(larea@active.ident) 
larea.markers <- FindAllMarkers(object = larea, only.pos = TRUE, min.pct = 0.25, 
                                thresh.use = 0.25)
write.csv(larea.markers,"larea.markers.csv")

library(dplyr) 
top5 <- larea.markers %>% group_by(cluster) %>% top_n(5, avg_log2FC)
DoHeatmap(masce,top5$gene,size=3)
genes_to_check <-top5$gene
#ggsave(filename=paste0(sel.clust,'_masce.markers_heatmap.pdf'),width =18,height = 12)

DotPlot(larea, features = unique(genes_to_check),
)  + coord_flip()+scale_color_gradient2(low="blue",high="red",mid="white",midpoint = 0)
ggsave("region.pdf",height = 10,width=8)
genes_to_check <- a[[1]]


#
p9 <- DimPlot(larea, reduction = "umap", label = TRUE)+theme(aspect.ratio = 1)
p9
ggsave("umap.pdf",width = 6,height = 6)
#
p10 <- SpatialDimPlot(larea, label = TRUE, label.size = 3)
p10
ggsave("umap_spatial.pdf",width = 6,height = 6)


#tissue plot
SpatialDimPlot(larea, label = F, label.size = 3)+theme(aspect.ratio = 1)#
SpatialDimPlot(larea, label = F, label.size = 3,alpha = c(0, 0))+theme(aspect.ratio = 1)#
ggsave("gzr2.pdf",height = 6,width = 6)
#
cluster <- CellsByIdentities(object = larea, idents = c(0,2,9,4,8,10))
SpatialDimPlot(larea, cells.highlight = cluster ,
               facet.highlight = TRUE,
               cols.highlight = c("green","grey"), alpha = c(0.1, 1),
               ncol = 3)
SpatialDimPlot(larea, cells.highlight = cluster ,
               facet.highlight = TRUE,
               cols.highlight = c("yellow","grey"), alpha = c(0.5, 1),
               ncol = 3)
#DEGs####
de_markers <- FindAllMarkers(larea)
write.csv(de_markers,"de_markers.csv")
de_markers <- FindMarkers(larea, ident.1 = 2, ident.2 = 5)
head(de_markers)
SpatialFeaturePlot(object = larea,
                   features = rownames(de_markers)[1:8],
                   alpha = c(0.1, 1), ncol = 4)
#
genes <- VariableFeatures(larea)

larea <- FindSpatiallyVariableFeatures(larea, assay = "SCT",
                                        features = genes[1:100],
                                        selection.method = "markvariogram")
DEGs <- SpatiallyVariableFeatures(larea, selection.method = "markvariogram")
top.features <- head(DEGs, 6)
#
SpatialFeaturePlot(larea, features = top.features, ncol = 3, alpha = c(0.1, 1))

#T or N identification
area=data.frame(ClusterID=0:(length(table(Idents(larea)))-1),area=0:(length(table(Idents(larea)))-1)) 
area[area$ClusterID %in% c(8,7,5,3,1,4,9,6,11),2]='Tumor_side'
area[area$ClusterID %in% c(0,2,10),2]='Non_tumor_side'
head(area)
area
table(area$area)
larea@meta.data$area = "NA"
for(i in 1:nrow(area)){
  larea@meta.data[which(larea@active.ident == area$ClusterID[i]),'area'] <- area$area[i]}
table(larea@meta.data$area)

Idents(larea) <- "area"
SpatialDimPlot(larea, label = TRUE, label.size = 3,pt.size.factor = 1.2,stroke = 0.0)+theme(aspect.ratio = 1)
Idents(larea) <- "area"
SpatialDimPlot(larea, label = TRUE, label.size = 3,cols = c(Tumor_side="#EB7369",
                                                            Non_tumor_side="#1CB4B8"
),
#crop = F,
pt.size.factor = 1.6,stroke = 0.0)
ggsave("gzr.pdf",width = 6,height = 6)
#####
Idents(larea) <- "seurat_clusters"
tumor <- subset(larea, idents = c(0,2,9,4,8,10))
SpatialDimPlot(tumor, crop = F, label = TRUE, label.size = 3,pt.size.factor = 1.2,stroke = 0.0)
p_img <- SpatialDimPlot(tumor, crop = TRUE, label = TRUE, label.size = 2)
p_img
#

#
cluster <- CellsByIdentities(object = larea, idents = c(2,9))
SpatialDimPlot(larea, cells.highlight = cluster ,
               facet.highlight = TRUE,
               cols.highlight = c("green","grey"), alpha = c(0.1, 1),
               ncol = 3)
SpatialDimPlot(larea, cells.highlight = cluster ,
               facet.highlight = TRUE,
               cols.highlight = c("yellow","grey"), alpha = c(0.5, 1),
               ncol = 3)
#
fibro <- subset(larea, idents = c(2,9))
SpatialDimPlot(fibro, crop = F, label = TRUE, label.size = 3,pt.size.factor = 1.2,stroke = 0.0)
SpatialDimPlot(fibro, ,crop = F,pt.size.factor = 1.2,stroke = 0.0,label = TRUE,label.size = 2)
p_img <- SpatialDimPlot(fibro, crop = TRUE, label = TRUE, label.size = 2)
p_img
SpatialFeaturePlot(larea, features ="SPP1", alpha = c(0.1, 1.5))
SpatialFeaturePlot(larea, features ="COL1A1", alpha = c(0.1, 1.5),crop = F,pt.size.factor = 1.2,stroke = 0.0)
SpatialFeaturePlot(larea, features ="COL3A1", alpha = c(0.1, 1.5),crop = F,pt.size.factor = 1.2,stroke = 0.0,image.alpha = 2)
#key info
Key(object =tumor@images$Leadingedgearea)
img<- GetTissueCoordinates(tumor)
head(img)
#
ident <- Idents(tumor)
imgId <- data.frame(img,ident)
head(imgId)
#
p_plot <- ggplot(img, aes(x=imagecol, y=600-imagerow,color = ident)) +
  geom_point(size = 0.2)+
  theme_minimal() + 
  theme(panel.grid=element_blank())+ 
  theme(axis.text.x=element_blank(), 
        axis.text.y=element_blank()) 
p_img+p_plot


#对切片特定区域的数据进行局部和整体可视化；
p11 <- SpatialDimPlot(tumor, crop = TRUE, label = TRUE, label.size = 3)
p12 <- SpatialDimPlot(tumor, crop = FALSE, label = TRUE,
                      pt.size.factor = 1, label.size = 3)
p11 + p12


normal <- subset(larea, idents = c(1,3,5,6,7,11))
SpatialDimPlot(normal, crop = F, label = TRUE, label.size = 3,pt.size.factor = 1.2,stroke = 0.0)
p_img <- SpatialDimPlot(normal, crop = TRUE, label = TRUE, label.size = 2)
p_img

#ICC_signature_test####
a <-"REG1A
CLU
FXYD2
AGR2
KRT19
ZG16B
C3
TFF2
REG1B
KRT18
TFF3
MMP7
S100A1
S100A6
FDCSP
SERPINA3
TFF1
ALB
TIMP1
KRT8
WFDC2
TESC
ATP1B1
SERPINA1
LGALS4
C4BPA
ANXA4
PKHD1
DEFB1
TM4SF4
SPINK1
CFH
S100A13
VCAM1
MGST1
SLPI
TM4SF1
CTSE
CLDN1
SORBS2
"
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "P6_ICC_signature_test")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'P6_ICC_signature_test'

SpatialFeaturePlot(larea, features ='P6_ICC_signature_test', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("P6_ICC_signature_test.pdf",height = 6,width = 6)

#添加python分群 做mia####
larea@meta.data$region <- "None"#输入空白值
for(i in 0:(length(table(meta$clusters))-1)){
  larea@meta.data$region[which(colnames(larea) %in% meta[,"X"][which(meta$clusters %in% i)])] <- paste0("region_",i)
}
for(i in 0:(length(table(meta$clusters))-1)){
  larea@meta.data$region[which(colnames(larea) %in% meta[,"X"][which(meta$clusters %in% i)])] <- i
}
table(larea$region)
Idents(larea) <- "region"
larea <- subset(larea, cells = colnames(larea)[which(!larea$region %in% c("None"))])
SpatialDimPlot(larea, label = TRUE, label.size = 3,pt.size.factor = 1.5,stroke = 0.0)+theme(aspect.ratio = 1)
ggsave("region.pdf",width = 8.5,height =8.5)

#
Key(object =larea@images$Leadingedgearea)
img<- GetTissueCoordinates(larea)
head(img)
ident <- Idents(larea)
imgId <- data.frame(img,ident)
head(imgId)
#
ggplot(img, aes(x=imagecol, y=600-imagerow,color = ident)) +
  geom_point(size = 1.5)+
  theme_minimal() + #去掉背景
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ #去掉网格线
  theme(axis.text.x=element_blank(), #去掉y轴坐标
        axis.text.y=element_blank()) #去掉x轴坐标
ggsave("region_widthout_image.pdf",width = 7,height =7)


##可视化分群
Idents(larea) <- "seurat_clusters"
subregion=data.frame(ClusterID=0:(length(table(Idents(larea)))-1),subregion=0:(length(table(Idents(larea)))-1)) 
subregion[subregion$ClusterID %in% c(0,5,7,10),2]='Tumor_area'
subregion[subregion$ClusterID %in% c(1,9),2]='Hepatocyte_area'
subregion[subregion$ClusterID %in% c(2,4),2]='Stroma_fibro'
subregion[subregion$ClusterID %in% c(3),2]='Stroma_Cholangiocyte'
subregion[subregion$ClusterID %in% c(6,8),2]='Stroma_endo'
head(subregion)
subregion
table(subregion$subregion)
larea@meta.data$subregion = "NA"
for(i in 1:nrow(subregion)){
  larea@meta.data[which(larea@meta.data$region == subregion$ClusterID[i]),'subregion'] <- subregion$subregion[i]}
table(larea@meta.data$subregion)

Idents(larea) <- "subregion"
SpatialDimPlot(larea, label = TRUE, label.size = 3,pt.size.factor = 1.5,stroke = 0.0)+theme(aspect.ratio = 1)
ggsave("subregion.pdf",width = 8.5,height =8.5)

#
Key(object =larea@images$Leadingedgearea)
img<- GetTissueCoordinates(larea)
head(img)
ident <- Idents(larea)
imgId <- data.frame(img,ident)
head(imgId)
#
ggplot(img, aes(x=imagecol, y=600-imagerow,color = ident)) +
  geom_point(size = 1.5)+
  theme_minimal() + #去掉背景
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ #
  theme(axis.text.x=element_blank(), 
        axis.text.y=element_blank()) 
ggsave("subregion_widthout_image.pdf",width = 7,height =7)
#
#差异基因
stRNA_marker <- FindAllMarkers(larea,only.pos = T,
                               test.use="t",
                               logfc.threshold = 0.1)
table(stRNA_marker$cluster)
write.csv(stRNA_marker,"stRNA_marker.csv")
save(larea,file="larea_for_mia.Rdata")
load("larea_for_mia.Rdata")



#Fibro_score
a <-"PDGFRB
NOTCH3
SLIT3
CRISPLD2
PDE3A
TPM2
ID4
TBX2
COL14A1
BGN
PRKG1
PLAC9
RYR2
SYNPO2
EDNRA
CACNA1C
COL6A2
ACTA2
TAGLN
CARMN
C11orf96
DMD
ANTXR1
HEYL
SOD3
MFGE8
IGFBP5
CACNB2
MYH11
MYL9
PPP1R14A
LMOD1
UNC5C
MUSTN1
CTNNA3
SOX5
AXL
LHFPL6
MAP1B
FRZB
ADGRB3
COL1A1
ENPEP
FXYD1
COL1A2
EBF1
PDE1A
CACNA2D1
MYLK
C1QTNF1
"#
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Fibro_score'

#endo_score
a <-"EMCN
PTPRB
ERG
EGFL7
TIE1
LDB2
CALCRL
ADGRL4
CYYR1
RAMP2
SHANK3
CDH5
TEK
FGD5
PREX2
SOX18
FLT1
VWF
CLEC14A
PECAM1
GNA14
ADCY4
ST6GALNAC3
FBXL7
ECSCR
PALMD
PLEKHG1
RHOJ
MMRN2
EFNB2
RNASE1
ZNF521
RUNX1T1
THSD7A
SHROOM4
ARHGAP31
NPDC1
ENG
PLVAP
JAM2
RAPGEF4
MECOM
CD34
PDE10A
FBN1
EMP1
MYCT1
NAV3
PODXL
DIPK2B
"
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Endo_score'
# scoring
VlnPlot(larea,features = 'Cell_cycle_score',pt.size = 0, adjust = 2,group.by = "layer")
VlnPlot(larea,features = 'P53_signaling_pathway',pt.size = 0, adjust = 2,group.by = "layer")
VlnPlot(larea,features = 'DNA_replication',pt.size = 0, adjust = 2,group.by = "layer")
VlnPlot(larea,features = 'Pyrimidine_metabolism',pt.size = 0, adjust = 2,group.by = "layer")
VlnPlot(larea,features = 'stem_score',pt.size = 0, adjust = 2,group.by = "layer")
VlnPlot(larea,features = 'EMT_signature',pt.size = 0, adjust = 2,group.by = "layer")
VlnPlot(larea,features = 'MCB_EMT',pt.size = 0, adjust = 2,group.by = "layer")
VlnPlot(larea,features = 'Cell_cycle_score',pt.size = 0, adjust = 2,group.by = "region")
VlnPlot(larea,features = 'P53_signaling_pathway',pt.size = 0, adjust = 2,group.by = "region")
VlnPlot(larea,features = 'DNA_replication',pt.size = 0, adjust = 2,group.by = "region")
VlnPlot(larea,features = 'Pyrimidine_metabolism',pt.size = 0, adjust = 2,group.by = "region")
VlnPlot(larea,features = 'stem_score',pt.size = 0, adjust = 2,group.by = "region")
VlnPlot(larea,features = 'EMT_signature',pt.size = 0, adjust = 2,group.by = "region")
VlnPlot(larea,features = 'MCB_EMT',pt.size = 0, adjust = 2,group.by = "region")
VlnPlot(larea,features = 'Fibro_score',pt.size = 0, adjust = 2,group.by = "region")
ggsave("Fibro_score_vlin.pdf",width = 4,height = 4)
VlnPlot(larea,features = 'Endo_score',pt.size = 0, adjust = 2,group.by = "region")
ggsave("Endo_score_vlin.pdf",width = 4,height = 4)
VlnPlot(larea,features = 'Endo_score',pt.size = 0, adjust = 2,group.by = "subregion")
VlnPlot(larea,features = 'Fibro_score',pt.size = 0, adjust = 2,group.by = "subregion")
VlnPlot(larea,features = 'Cell_cycle_score',pt.size = 0, adjust = 2,group.by = "subregion")
VlnPlot(larea,features = 'P53_signaling_pathway',pt.size = 0, adjust = 2,group.by = "subregion")
VlnPlot(larea,features = 'DNA_replication',pt.size = 0, adjust = 2,group.by = "subregion")
VlnPlot(larea,features = 'Pyrimidine_metabolism',pt.size = 0, adjust = 2,group.by = "subregion")
VlnPlot(larea,features = 'stem_score',pt.size = 0, adjust = 2,group.by = "subregion")
VlnPlot(larea,features = 'EMT_signature',pt.size = 0, adjust = 2,group.by = "subregion")
VlnPlot(larea,features = 'MCB_EMT',pt.size = 0, adjust = 2,group.by = "subregion")

library(ggplot2)

#plotting
#DNA_replication
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(larea,features = 'DNA_replication',
           pt.size = 0, adjust = 2,
           group.by = "region")

VlnPlot(larea,features = 'DNA_replication',
        pt.size = 0, adjust = 2,
        group.by = "region")
table(P$data[,2])
#box plot
my_comparisons = list(c("J", "T"))
ggboxplot(P$data,x = "ident",y = "DNA_replication",color = "ident")+
  stat_compare_means(comparisons = my_comparisons, method = "t.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("DNA_replication_boxing.pdf",width = 4,height = 4)
#violin plot
ggplot(P$data, aes(x=ident,y=DNA_replication,fill=ident)) + 
  geom_violin()+stat_compare_means(comparisons = my_comparisons,
                                   method = "wilcox.test",
                                   label = "p.signif",
                                   symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
                                                    symbols = c("***", "**", "*", "ns")))+
  geom_boxplot(width=0.1, color="black", alpha=0.2)+
  scale_fill_manual(values=c(N = "blue", "T" = "orange", J="red" ))+
  theme(
    panel.grid.major=element_line(colour=NA),
    panel.background = element_rect(fill = "transparent",colour = NA),
    plot.background = element_rect(fill = "transparent",colour = NA),
    #legend.key = element_blank(),
    panel.grid.minor = element_blank()
  )+theme_classic()
ggsave("DNA_replication_vlin.pdf",width = 4,height = 4)

#Cell_cycle_score
P<-VlnPlot(larea,features = 'Cell_cycle_score',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(larea,features = 'Cell_cycle_score',
        pt.size = 0, adjust = 2,
        group.by = "type")
#boxing plot
ggboxplot(P$data,x = "ident",y = "Cell_cycle_score",color = "ident")+
  stat_compare_means(comparisons = my_comparisons, method = "t.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Cell_cycle_score_boxing.pdf",width = 4,height = 4)
#violin plot
ggplot(P$data, aes(x=ident,y=Cell_cycle_score,fill=ident)) + 
  geom_violin()+stat_compare_means(comparisons = my_comparisons,
                                   method = "wilcox.test",
                                   label = "p.signif",
                                   symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
                                                    symbols = c("***", "**", "*", "ns")))+
  geom_boxplot(width=0.1, color="black", alpha=0.2)+
  scale_fill_manual(values=c(N = "blue", "T" = "orange", J="red" ))+
  theme(
    panel.grid.major=element_line(colour=NA),
    panel.background = element_rect(fill = "transparent",colour = NA),
    plot.background = element_rect(fill = "transparent",colour = NA),
    #legend.key = element_blank(),
    panel.grid.minor = element_blank()
  )+theme_classic()
ggsave("Cell_cycle_score_vlin2.pdf",width = 4,height = 4)

#P53_signaling_pathway
P<-VlnPlot(larea,features = 'P53_signaling_pathway',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(larea,features = 'P53_signaling_pathway',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#box plot
ggboxplot(P$data,x = "ident",y = "P53_signaling_pathway",color = "ident")+
  stat_compare_means(comparisons = my_comparisons, method = "t.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("P53_signaling_pathway_box.pdf",width = 4,height = 4)
#violin plot
ggplot(P$data, aes(x=ident,y=P53_signaling_pathway,fill=ident)) + 
  geom_violin()+stat_compare_means(comparisons = my_comparisons,
                                   method = "wilcox.test",
                                   label = "p.signif",
                                   symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
                                                    symbols = c("***", "**", "*", "ns")))+
  geom_boxplot(width=0.1, color="black", alpha=0.2)+
  scale_fill_manual(values=c(N = "blue", "T" = "orange", J="red" ))+
  theme(
    panel.grid.major=element_line(colour=NA),
    panel.background = element_rect(fill = "transparent",colour = NA),
    plot.background = element_rect(fill = "transparent",colour = NA),
    #legend.key = element_blank(),
    panel.grid.minor = element_blank()
  )+theme_classic()
ggsave("P53_signaling_pathway_vlin.pdf",width = 4,height = 4)

#Pyrimidine_metabolism
P<-VlnPlot(larea,features = 'Pyrimidine_metabolism',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(larea,features = 'Pyrimidine_metabolism',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])

#box plot
ggboxplot(P$data,x = "ident",y = "Pyrimidine_metabolism",color = "ident")+
  stat_compare_means(comparisons = my_comparisons, method = "t.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("Pyrimidine_metabolism_box.pdf",width = 4,height = 4)
#violin plot
ggplot(P$data, aes(x=ident,y=Pyrimidine_metabolism,fill=ident)) + 
  geom_violin()+stat_compare_means(comparisons = my_comparisons,
                                   method = "wilcox.test",
                                   label = "p.signif",
                                   symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
                                                    symbols = c("***", "**", "*", "ns")))+
  geom_boxplot(width=0.1, color="black", alpha=0.2)+
  scale_fill_manual(values=c(N = "blue", "T" = "orange", J="red" ))+
  theme(panel.grid.major=element_line(colour=NA),
        panel.background = element_rect(fill = "transparent",colour = NA),
        plot.background = element_rect(fill = "transparent",colour = NA),
        #legend.key = element_blank(),
        panel.grid.minor = element_blank()
  )+theme_classic()
ggsave("Pyrimidine_metabolism_vlin.pdf",width = 4,height = 4)
#stem_score
#stem_score
P<-VlnPlot(larea,features = 'stem_score',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(larea,features = 'stem_score',
        pt.size = 0, adjust = 2,
        group.by = "type")
#boxing plot
ggboxplot(P$data,x = "ident",y = "stem_score",color = "ident")+
  stat_compare_means(comparisons = my_comparisons, method = "t.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("stem_score_boxing.pdf",width = 4,height = 4)
#violin plot
ggplot(P$data, aes(x=ident,y=stem_score,fill=ident)) + 
  geom_violin()+stat_compare_means(comparisons = my_comparisons,
                                   method = "wilcox.test",
                                   label = "p.signif",
                                   symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
                                                    symbols = c("***", "**", "*", "ns")))+
  geom_boxplot(width=0.1, color="black", alpha=0.2)+
  scale_fill_manual(values=c(N = "blue", "T" = "orange", J="red" ))+
  theme(
    panel.grid.major=element_line(colour=NA),
    panel.background = element_rect(fill = "transparent",colour = NA),
    plot.background = element_rect(fill = "transparent",colour = NA),
    #legend.key = element_blank(),
    panel.grid.minor = element_blank()
  )+theme_classic()
ggsave("stem_score_vlin2.pdf",width = 4,height = 4)

#EMT_Signature_n #来自于妞妞的signature
a <-"ABI3BP	ACTA2	ADAM12	ANPEP	APLP1	AREG	BASP1	BDNF	BGN	BMP1	CADM1	CALD1	CALU	CAP2	CAPG	CCN1	CCN2	CD44	CD59	CDH11	CDH2	CDH6	COL11A1	COL12A1	COL16A1	COL1A1	COL1A2	COL3A1	COL4A1	COL4A2	COL5A1	COL5A2	COL5A3	COL6A2	COL6A3	COL7A1	COL8A2	COLGALT1	COMP	COPA	CRLF1	CTHRC1	CXCL1	CXCL12	CXCL6	CXCL8	DAB2	DCN	DKK1	DPYSL3	DST	ECM1	ECM2	EDIL3	EFEMP2	ELN	EMP3	ENO2	FAP	FAS	FBLN1	FBLN2	FBLN5	FBN1	FBN2	FERMT2	FGF2	FLNA	FMOD	FN1	FOXC2	FSTL1	FSTL3	FUCA1	FZD8	GADD45A	GADD45B	GAS1	GEM	GJA1	GLIPR1	GPC1	GPX7	GREM1	HTRA1	ID2	IGFBP2	IGFBP3	IGFBP4	IL15	IL32	IL6	INHBA	ITGA2	ITGA5	ITGAV	ITGB1	ITGB3	ITGB5	JUN	LAMA1	LAMA2	LAMA3	LAMC1	LAMC2	LGALS1	LOX	LOXL1	LOXL2	LRP1	LRRC15	LUM	MAGEE1	MATN2	MATN3	MCM7	MEST	MFAP5	MGP	MMP1	MMP14	MMP2	MMP3	MSX1	MXRA5	MYL9	MYLK	NID2	NNMT	NOTCH2	NT5E	NTM	OXTR	P3H1	PCOLCE	PCOLCE2	PDGFRB	PDLIM4	PFN2	PLAUR	PLOD1	PLOD2	PLOD3	PMEPA1	PMP22	POSTN	PPIB	PRRX1	PRSS2	PTHLH	PTX3	PVR	QSOX1	RGS4	RHOB	SAT1	SCG2	SDC1	SDC4	SERPINE1	SERPINE2	SERPINH1	SFRP1	SFRP4	SGCB	SGCD	SGCG	SLC6A8	SLIT2	SLIT3	SNAI2	SNTB1	SPARC	SPOCK1	SPP1	TAGLN	TFPI2	TGFB1	TGFBI	TGFBR3	TGM2	THBS1	THBS2	THY1	TIMP1	TIMP3	TNC	TNFAIP3	TNFRSF11B	TNFRSF12A	TPM1	TPM2	TPM4	VCAM1	VCAN	VEGFA	VEGFC	VIM	WIPF1	WNT5A"
a <- strsplit(a,split = "\t") 
a
cd_features <- a
#larea@meta.data <- larea@meta.data[-28]
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")]  <- 'EMT_Signature_n'
VlnPlot(larea,features = 'EMT_Signature_n',pt.size = 0, adjust = 2,group.by = "layer")


#EMT_Signature_n
library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(larea,features = 'EMT_Signature_n',
           pt.size = 0, adjust = 2,
           group.by = "type")

VlnPlot(larea,features = 'EMT_Signature_n',
        pt.size = 0, adjust = 2,
        group.by = "type")
table(P$data[,2])
#box plot
my_comparisons = list(c("J", "T"))
ggboxplot(P$data,x = "ident",y = "EMT_Signature_n",color = "ident")+
  stat_compare_means(comparisons = my_comparisons, method = "t.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("EMT_Signature_n_boxing.pdf",width = 4,height = 4)
#violin plot
ggplot(P$data, aes(x=ident,y=EMT_Signature_n,fill=ident)) + 
  geom_violin()+stat_compare_means(comparisons = my_comparisons,
                                   method = "wilcox.test",
                                   label = "p.signif",
                                   symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
                                                    symbols = c("***", "**", "*", "ns")))+
  geom_boxplot(width=0.1, color="black", alpha=0.2)+
  scale_fill_manual(values=c(N = "blue", "T" = "orange", J="red" ))+
  theme(
    panel.grid.major=element_line(colour=NA),
    panel.background = element_rect(fill = "transparent",colour = NA),
    plot.background = element_rect(fill = "transparent",colour = NA),
    #legend.key = element_blank(),
    panel.grid.minor = element_blank()
  )+theme_classic()
ggsave("EMT_Signature_n_vlin.pdf",width = 4,height = 4)




###scoring####
a <-"HIST1H4C
CENPF
TUBA1B
H2AFZ
TOP2A
ANLN
GAGE2A
ECT2
IL1RAPL1
STMN1
KCND2
HMGN2
PLXDC2
AGR2
AKR1C3
H2AFV
HMGB2
ASPM
CCL20
UBE2C
"#用的是P1患者的epi proliferating tumor cell 的前20基因
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'ICC_Proliferating_signature'
SpatialFeaturePlot(larea, features ='ICC_Proliferating_signature', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("ICC_Proliferating_signature.pdf",height = 6,width = 6)
#ICC_signature
a <-"APOA2
FXYD2
KRT8
SERPINA1
KRT18
BICC1
NRG1
VTN
ANXA4
ITIH2
DCDC2
DEFB1
ALB
APOC2
ATP1B1
LGALS4
MEIS2
EPCAM
PARD3
CTNND2
"#
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'P5_ICC_signature'

SpatialFeaturePlot(larea, features ='P5_ICC_signature', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("P5_ICC_signature.pdf",height = 6,width = 6)

#ICC_signature
a <-"SPP1
APOE
APOC1
CTSD
GPNMB 
CTSB
FTL
CSTB
NUPR1
CTSL
CD68
IFI30
PLIN2
PSAP
CCL18
C1QA
C1QC
CAPG
CTSZ
C1QB
"#用的是P1患者的epi,tumor cell 的前40基因去掉linc和非编码RNA
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'SPP1_Macro_sig'

SpatialFeaturePlot(larea, features ='SPP1_Macro_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("SPP1_Macro_sig.pdf",height = 6,width = 6)


#Fibro_signature
a <-"IGFBP7
CALD1
TAGLN
MGP
COL3A1
SPARCL1
PRKG1
ACTA2
COL1A1
TIMP1
SPARC
C11orf96
COL1A2
RGS5
TPM2
FN1
COL4A1
COL4A2
DCN
CACNA1C
"#
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'P5_Fibro_signature'

SpatialFeaturePlot(larea, features ='P5_Fibro_signature', alpha = c(1, 1.5))+theme(aspect.ratio = 1)
ggsave("P5_Fibro_signature.pdf",height = 6,width = 6)


a <-"HIST1H4C
MMP7
STMN1
CENPF
AKR1C3
ALB
AGR2
ECT2
AKR1C1
ANLN
GAGE2A
TOP2A
MGST1
AKR1C2
CD74
H2AFZ
NEDD4L
CCL20
HLA-DRB1
H2AFV
CKS1B
S100A10
HMGN2
PLXDC2
JPT1
PPIA
ASPM
TUBB
CXCL3
SPINK1
HSPD1
TMSB10
TGFB2
HLA-DRA
CXCL2
TSPO
UBE2C
SHROOM3
CXCL1
LGALS4
"#用的是P1患者的prolifertingtumorcell,tumorcell,fibro差异基因比较的的前40基因
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'ICC_Proliferating_signature2'
SpatialFeaturePlot(larea, features ='ICC_Proliferating_signature2', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("ICC_Proliferating_signature2.pdf",height = 6,width = 6)



#endothelial
a <-"LDB2
FCN3
TIMP3
CALCRL
IFI27
PLPP1
HSPG2
PTPRB
PTPRG
FLT1
COL4A1
CCL14
SPARC
INSR
A2M
SLC9A3R2
EPAS1
IGFBP7
MECOM
TCF4
"#
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Endothelial_signature'
SpatialFeaturePlot(larea, features ='Endothelial_signature', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Endothelial_signature",height = 6,width = 6)

#t
a <-"CCL5
CD69
NKG7
DUSP2
IL7R
GZMA
TRAC
IL32
SKAP1
TRBC2
TRBC1
KLRB1
CD2
CD3D
GZMK
CD247
FYN
IFNG
STAT4
CD3E
"#
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'T_cell_signature'
SpatialFeaturePlot(larea, features ='T_cell_signature', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("T_cell_signature.pdf",height = 6,width = 6)
#SPP1_Macro_sig_test
a <-"
CD74
CCL3
TYROBP
C1QA
FCER1G
C1QB
SPP1
IFI30
GPNMB
S100A4
LYZ
CTSD
PLXDC2
C1QC
SRGN
CCL4
LAPTM5
CYBA
CD68
FTL
CCL4L2
PSAP
CHST11
AIF1
ANXA1
TREM2
"#
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'SPP1_Macro_sig_test'

SpatialFeaturePlot(larea, features ='SPP1_Macro_sig_test', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("SPP1_Macro_sig_test.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(23:25)]

#Proliferating_sig
a <-"TPX2
MKI67
UBE2C
TOP2A
HMGA1
HMGA2
"
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "Proliferating_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Proliferating_sig'

SpatialFeaturePlot(larea, features ='Proliferating_sig', alpha = c(-0.5, 1))+theme(aspect.ratio = 1)
ggsave("Proliferating_sig.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]



P<-SpatialFeaturePlot(larea, features =c("Fibro_signature2"))
img <- P$data[,1:3]
ggplot(img, aes(x=imagecol, y=600-imagerow,color = Fibro_signature2)) +
  geom_point(size = 1.5)+
  scale_color_gradient2(low="black",high="white",mid="red",midpoint = median(img$Fibro_signature2)
  )+
  theme_minimal() + #去掉背景
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ 
  theme(plot.background = element_rect(fill = "black" ))+ 
  #theme(panel.background = element_rect(fill = 'black', color = 'black'))
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",#图例方向
        legend.position = "top"#图例位置
  )


#已经画好了
SpatialFeaturePlot(larea, features =c("ICC_Proliferating_signature2","ICC_signature2","Fibro_signature2","Endothelial_signature"))
P1<-SpatialFeaturePlot(larea, features =c("ICC_Proliferating_signature2"))
img1 <- P1$data[,1:3]
P2<-SpatialFeaturePlot(larea, features =c("ICC_signature2"))
img2 <- P2$data[,1:3]
P3<-SpatialFeaturePlot(larea, features =c("Fibro_signature2"))
img3 <- P3$data[,1:3]
P4<-SpatialFeaturePlot(larea, features =c("Endothelial_signature"))
img4 <- P4$data[,1:3]
img <- cbind(img1,img2,img3,img4)
img <- img[,-c(4,5,7,8,10,11)]
colnames(img)[1:2] <- c("Y","X")
#修改一下y轴大于450的点取出来
img[,"Y"] <- 600-img[,"Y"]
#把y轴
img <- img[which(img$Y >= 450),]
#分组求均值
dat1 <- aggregate(img[,3:6],by=list(type=img$X),mean)
#宽数据变长数据
library(reshape2)
dat2 <- melt(dat1,id=("type"))
#画折线图
ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = c("orange","#1692BA", "black","red"))+
  geom_point(size=2)+
  theme_minimal()+labs(title = "Ribbon_sig_450") #去掉背景
ggsave("ribbon_sig_450.pdf",height = 4,width = 8)


#475-500
P1<-SpatialFeaturePlot(larea, features =c("ICC_Proliferating_signature2"))
img1 <- P1$data[,1:3]
P2<-SpatialFeaturePlot(larea, features =c("ICC_signature2"))
img2 <- P2$data[,1:3]
P3<-SpatialFeaturePlot(larea, features =c("Fibro_signature2"))
img3 <- P3$data[,1:3]
P4<-SpatialFeaturePlot(larea, features =c("Endothelial_signature"))
img4 <- P4$data[,1:3]
img <- cbind(img1,img2,img3,img4)
img <- img[,-c(4,5,7,8,10,11)]
colnames(img)[1:2] <- c("Y","X")
#修改一下y轴大于450的点取出来
img[,"Y"] <- 600-img[,"Y"]
#把y轴
img <- img[which(img$Y >= 475&img$Y<=500),]
#分组求均值
dat1 <- aggregate(img[,3:6],by=list(type=img$X),mean)
#宽数据变长数据
library(reshape2)
dat2 <- melt(dat1,id=("type"))
#画折线图

ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = c("orange","#1692BA", "black","red"))+
  geom_point(size=2)+
  theme_minimal() + #去掉背景
  labs(title = "Ribbon_sig_475-500")
ggsave("ribbon_sig_475-500.pdf",height = 4,width = 8)

#330-370
P1<-SpatialFeaturePlot(larea, features =c("ICC_Proliferating_signature2"))
img1 <- P1$data[,1:3]
P2<-SpatialFeaturePlot(larea, features =c("ICC_signature2"))
img2 <- P2$data[,1:3]
P3<-SpatialFeaturePlot(larea, features =c("Fibro_signature2"))
img3 <- P3$data[,1:3]
P4<-SpatialFeaturePlot(larea, features =c("Endothelial_signature"))
img4 <- P4$data[,1:3]
img <- cbind(img1,img2,img3,img4)
img <- img[,-c(4,5,7,8,10,11)]
colnames(img)[1:2] <- c("Y","X")
#修改一下y轴大于450的点取出来
img[,"Y"] <- 600-img[,"Y"]
#把y轴
img <- img[which(img$Y >= 330&img$Y<=370),]
#分组求均值
dat1 <- aggregate(img[,3:6],by=list(type=img$X),mean)
#宽数据变长数据
library(reshape2)
dat2 <- melt(dat1,id=("type"))
#画折线图
ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = c("orange","#1692BA", "black","red"))+
  geom_point(size=2)+
  theme_minimal() + #去掉背景
  labs(title = "Ribbon_sig_330-370")
ggsave("ribbon_sig_330-370.pdf",height = 4,width = 8)

#Stress
a <-"FOS
ATF3
NR4A1
DUSP1
ZFP36
PPP1R15A
SGK1
EGR1
ZC3H12A
JUNB
FOSB
IER2
NFKBIA
NFKBIZ
HBEGF
BTG2
SOD2
CDKN1A
NCOA7
JUN
MYC
SERTAD1
CCNL1
RND3
PLK2
SOCS3
DNAJB1
DUSP2
TSC22D1
KLF10
GADD45B
PMAIP1
MAFF
ERRFI1
SLC38A2
IRF1
TOB1
ID2
KLF6
DNAJA1
TNFAIP3
BHLHE40
NXF1
FOSL1
IER3
DUSP6
HCAR2
IL8
CYR61
EFNA1
"#
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Stress'

SpatialFeaturePlot(larea, features ='Stress', alpha = c(1, 1.5))+theme(aspect.ratio = 1)
ggsave("Stress.pdf",height = 6,width = 6)
#addmodule_score####
#Fibro_signature
a <-"TAGLN
COL3A1
ACTA2
PDGFRB
C11orf96
COL1A1
CRISPLD2
BGN
NOTCH3
MYL9
PDE3A
SPARCL1
PRKG1
SOD3
SLIT3
LHFPL6
COL1A2
APOE
PLAC9
CACNA1C
DCN
MYH11
CACNB2
HEYL
NDUFA4L2
MGP
COL14A1
ID4
MFGE8
IGFBP5
SYNPO2
MUSTN1
ENPEP
ADAMTS4
"#
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Fibro_sig_test1'

SpatialFeaturePlot(larea, features ='Fibro_sig_test1', alpha = c(1, 1.5))+theme(aspect.ratio = 1)
ggsave("Fibro_sig_test1.pdf",height = 6,width = 6)

#ICC_signature
a <-"KRT19
C3
S100A1
FXYD2
ATP1B1
KRT18
TESC
TM4SF4
LYZ
KRT8
CLU
SERPINA1
LGALS4
REG1A
WFDC2
PKHD1
MMP7
MGST1
DEFB1
SLPI
ZG16B
SPP1
RHEX
KRT7
CLDN1
SERPINA3
SPINT2
EPCAM
ABCC3
C4BPA
ANXA4
ELF3
DCDC2
CD24
TFF3
SMIM22
CLDN4
AGR2
CYP3A5
"#用的是所有患者的所有tumor cell和fibro，endo,proliferating tumor cell比较的 的前40基因去掉linc和非编码RNA
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'ICC_sig_test1'
SpatialFeaturePlot(larea, features ='ICC_sig_test1', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("ICC_sig_test1.pdf",height = 6,width = 6)

a <-"CENPF
PTTG1
TOP2A
PCLAF
CTSE
LYZ
MKI67
REG1A
CKS1B
ASPM
AGR2
GPX2
NUSAP1
KRT19
TESC
CCNB1
ZG16B
C3
CDKN3
FXYD2
CLDN1
KRT18
SERPINA3
MGST1
SERPINA1
KRT8
TYMS
UBE2C
C4BPA
PRC1
UBE2T
NUF2
LTB
ALDH2
ECT2
PCNA
CENPF
"#
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'ICC_Proliferating_sig_test'
SpatialFeaturePlot(larea, features ='ICC_Proliferating_sig_test', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("ICC_Proliferating_sig_test.pdf",height = 6,width = 6)

#endothelial
a <-"CALCRL
FLT1
LDB2
RAMP2
ADGRL4
FCN3
PTPRB
EGFL7
EMCN
PECAM1
PCDH17
RNASE1
PLVAP
CDH5
RAMP3
ENG
CLDN5
CD93
AQP1
KDR
ERG
VWF
CLEC14A
PODXL
MCTP1
PLCB1
ECSCR
TIE1
GNG11
HECW2
CCL14
ARL15
HEG1
CD34
MMRN2
ST6GALNAC3
"#
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Endothelial_sig_test1'
SpatialFeaturePlot(larea, features ='Endothelial_sig_test1', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Endothelial_sig_test1",height = 6,width = 6)

#比较内区外区的增值行为
Idents(larea) <- "threeoi"
roi <- subset(larea, idents = c("inside_shapes","outside_shapes"))
SpatialDimPlot(roi, crop = F, label = TRUE, label.size = 3,pt.size.factor = 1.2,stroke = 0.0)
p_img <- SpatialDimPlot(roi, crop = TRUE, label = TRUE, label.size = 2)
p_img

VlnPlot(roi,features = 'ICC_Proliferating_sig_test',pt.size = 0, adjust = 2)

library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(roi,features = 'ICC_Proliferating_sig_test',pt.size = 0, adjust = 2)
table(P$data[,2])
#box plot
my_comparisons = list(c("outside_shapes", "inside_shapes"))
ggboxplot(P$data,x = "ident",y = "ICC_Proliferating_sig_test",color = "ident")+
  stat_compare_means(comparisons = my_comparisons, method = "t.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("ICC_Proliferating_sig_test_boxing.pdf",width = 3,height = 4)


Idents(larea) <- "threeoi"
roi <- subset(larea, idents = c("inside_shapes","outside_shapes"))
SpatialDimPlot(roi, crop = F, label = TRUE, label.size = 3,pt.size.factor = 1.2,stroke = 0.0)
p_img <- SpatialDimPlot(roi, crop = TRUE, label = TRUE, label.size = 2)
p_img

VlnPlot(roi,features = 'ICC_Proliferating_signature',pt.size = 0, adjust = 2)

library(ggpubr)
library(ggplot2)
library(ggsci)
P<-VlnPlot(roi,features = 'ICC_Proliferating_signature',pt.size = 0, adjust = 2)
table(P$data[,2])
#box plot
my_comparisons = list(c("outside_shapes", "inside_shapes"))
ggboxplot(P$data,x = "ident",y = "ICC_Proliferating_signature",color = "ident")+
  stat_compare_means(comparisons = my_comparisons, method = "t.test",label = "p.signif",
                     symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), 
                                      symbols = c("***", "**", "*", "ns"))
  )
ggsave("ICC_Proliferating_signature_boxing.pdf",width = 4,height = 4)


#
P<-SpatialFeaturePlot(larea, features =c("ICC_sig_test1"))
img <- P$data[,1:3]
ggplot(img, aes(x=imagecol, y=600-imagerow,color = ICC_sig_test1)) +
  geom_point(size = 1.5)+
  scale_color_gradient2(low="black",high="white",mid="red",midpoint = median(img$ICC_sig_test1)
  )+
  theme_minimal() + 
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ 
  theme(plot.background = element_rect(fill = "black" ))+ 
  #theme(panel.background = element_rect(fill = 'black', color = 'black'))
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",
        legend.position = "top"
  )


SpatialFeaturePlot(larea, features =c("ICC_Proliferating_sig_test","ICC_sig_test1","Fibro_sig_test1","Endothelial_sig_test1"))
P1<-SpatialFeaturePlot(larea, features =c("ICC_Proliferating_sig_test"))
img1 <- P1$data[,1:3]
P2<-SpatialFeaturePlot(larea, features =c("ICC_sig_test1"))
img2 <- P2$data[,1:3]
P3<-SpatialFeaturePlot(larea, features =c("Fibro_sig_test1"))
img3 <- P3$data[,1:3]
P4<-SpatialFeaturePlot(larea, features =c("Endothelial_sig_test1"))
img4 <- P4$data[,1:3]
img <- cbind(img1,img2,img3,img4)
img <- img[,-c(4,5,7,8,10,11)]
colnames(img)[1:2] <- c("Y","X")
#修改一下y轴大于450的点取出来
img[,"Y"] <- 600-img[,"Y"]
#把y轴
img <- img[which(img$Y >= 450),]
#分组求均值
dat1 <- aggregate(img[,3:6],by=list(type=img$X),mean)
#宽数据变长数据
library(reshape2)
dat2 <- melt(dat1,id=("type"))
#画折线图
ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = c("orange","#1692BA", "black","red"))+
  geom_point(size=2)+
  theme_minimal()+labs(title = "Ribbon_sig_450") #去掉背景
ggsave("ribbon_sig_450_test.pdf",height = 4,width = 8)


#475-500
P1<-SpatialFeaturePlot(larea, features =c("ICC_Proliferating_sig_test"))
img1 <- P1$data[,1:3]
P2<-SpatialFeaturePlot(larea, features =c("ICC_sig_test1"))
img2 <- P2$data[,1:3]
P3<-SpatialFeaturePlot(larea, features =c("Fibro_sig_test1"))
img3 <- P3$data[,1:3]
P4<-SpatialFeaturePlot(larea, features =c("Endothelial_sig_test1"))
img4 <- P4$data[,1:3]
img <- cbind(img1,img2,img3,img4)
img <- img[,-c(4,5,7,8,10,11)]
colnames(img)[1:2] <- c("Y","X")
#修改一下y轴大于450的点取出来
img[,"Y"] <- 600-img[,"Y"]
#把y轴
img <- img[which(img$Y >= 475&img$Y<=500),]
#分组求均值
dat1 <- aggregate(img[,3:6],by=list(type=img$X),mean)
#宽数据变长数据
library(reshape2)
dat2 <- melt(dat1,id=("type"))
#画折线图

ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = c("orange","#1692BA", "black","red"))+
  geom_point(size=2)+
  theme_minimal() + #去掉背景
  labs(title = "Ribbon_sig_475-500")
ggsave("ribbon_sig_475-500_test.pdf",height = 4,width = 8)

#330-370
P1<-SpatialFeaturePlot(larea, features =c("ICC_Proliferating_sig_test"))
img1 <- P1$data[,1:3]
P2<-SpatialFeaturePlot(larea, features =c("ICC_sig_test1"))
img2 <- P2$data[,1:3]
P3<-SpatialFeaturePlot(larea, features =c("Fibro_sig_test1"))
img3 <- P3$data[,1:3]
P4<-SpatialFeaturePlot(larea, features =c("Endothelial_sig_test1"))
img4 <- P4$data[,1:3]
img <- cbind(img1,img2,img3,img4)
img <- img[,-c(4,5,7,8,10,11)]
colnames(img)[1:2] <- c("Y","X")
#修改一下y轴大于450的点取出来
img[,"Y"] <- 600-img[,"Y"]
#把y轴
img <- img[which(img$Y >= 330&img$Y<=370),]
#分组求均值
dat1 <- aggregate(img[,3:6],by=list(type=img$X),mean)
#宽数据变长数据
library(reshape2)
dat2 <- melt(dat1,id=("type"))
#画折线图
ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = c("orange","#1692BA", "black","red"))+
  geom_point(size=2)+
  theme_minimal() + #去掉背景
  labs(title = "Ribbon_sig_330-370")
ggsave("ribbon_sig_330-370_test.pdf",height = 4,width = 8)

#共定位图####
df <- larea@meta.data
larea$spp1 <- "N"
larea$spp1[which(colnames(larea) %in% rownames(df)[which(df$SPP1_Macro_sig_test>= 0.6)])] <- "SPP1_sig"
larea$spp1[which(colnames(larea) %in% rownames(df)[which(df$Proliferating_sig>= 0.65)])] <- "Proliferating_sig"
table(larea$spp1)


SpatialFeaturePlot(larea, features ='spp1')+theme(aspect.ratio = 1)


Idents(larea) <- "spp1"
SpatialDimPlot(larea, label = TRUE, label.size = 3,crop = F,pt.size.factor = 1.2,stroke = 0.0)
SpatialDimPlot(larea,pt.size.factor = 1.5,stroke = 0.0,cols = c("N"="grey",
                                                                "SPP1_sig"="red",
                                                                "Proliferating_sig"="black"
))
ggsave("SPP1_proliferating.pdf",height = 6,width = 6)


#对巨噬细胞做分组GSVA####
library(Seurat)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(limma)
#BiocManager::install("GSVA")
#对T细胞进行分组GSEA
genesets <- msigdbr(species = "Homo sapiens", category = "H") 
genesets<- msigdbr(species = "Homo sapiens", category = "C2",subcategory = "CP:KEGG")
genesets <- subset(genesets, select = c("gs_name","gene_symbol")) %>% as.data.frame()
genesets <- split(genesets$gene_symbol, genesets$gs_name)

Idents(masce) <- "celltype" 
expr <- AverageExpression(masce, assays = "RNA", slot = "data")[[1]]
expr <- expr[rowSums(expr)>0,]  #选取非零基因
expr <- as.matrix(expr)
head(expr)

gsva.res <- gsva(expr, genesets, method="gsva") 
gsva.df <- data.frame(Genesets=rownames(gsva.res), gsva.res, check.names = F)
pdf("GSVA.pdf",height = 10,width=6)
pheatmap::pheatmap(gsva.res, show_colnames = T, 
                   scale = "row",angle_col = "45",
                   color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
dev.off()


#GSVA
#分组
#group_list <- data.frame(sample = colnames(gsva.df)[-1], group = c(rep("con", 2), rep("case", 1)))
group_list$group[which(group_list$sample %in% c("N"))] <- "con"
group_list$group[which(group_list$sample %in% c("J","T"))]  <- "case"
group_list
#设置对比
design <- model.matrix(~ 0 + factor(group_list$group))
colnames(design) <- levels(factor(group_list$group))
rownames(design) <- colnames(gsva.res)
design

# 构建差异比较矩阵
contrast.matrix <- makeContrasts(con-case, levels = design)

# 差异分析，case vs. con
fit <- lmFit(gsva.res, design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
x <- topTable(fit2, coef = 1, n = Inf, adjust.method = "BH", sort.by = "P")
head(x)

#把通路的limma分析结果保存到文件
write.csv(x, "gsva_limma.csv", quote = F)


#输出t值，用做绘图的输入数据
pathway <- str_replace(row.names(x), "HALLMARK_", "")
df <- data.frame(ID = pathway, score = x$t)
head(df)
#准备绘图输入矩阵
#按照score的值分组
cutoff <- 0
df$group <- cut(df$score, breaks = c(-Inf, cutoff, Inf),labels = c(1,2))
head(df)

#按照score排序
sortdf <- df[order(df$score),]
sortdf$ID <- factor(sortdf$ID, levels = sortdf$ID)
head(sortdf)

ggplot(sortdf, aes(ID, score, fill = group)) + geom_bar(stat = 'identity') + 
  coord_flip() + 
  scale_fill_manual(values = c('palegreen3', 'dodgerblue4'), guide = FALSE) + 
  #画2条虚线
  geom_hline(yintercept = c(-1,1), 
             color="white",
             linetype = 2, #画虚线
             size = 0.3) + #线的粗细
  #写label
  geom_text(data = subset(df, score < 0),
            aes(x=ID, y= 0.1, label=ID, color = group),
            size = 3, #字的大小
            hjust = "outward" ) +  #字的对齐方式
  geom_text(data = subset(df, score > 0),
            aes(x=ID, y= -0.1, label= paste0(" ", ID), color = group),#bar跟坐标轴间留出间隙
            size = 3, hjust = "inward") +  
  scale_colour_manual(values = c("black","black"), guide = FALSE) +
  xlab("") +ylab("t value of GSVA score")+
  theme_bw() + #去除背景色
  theme(panel.grid =element_blank()) + #去除网格线
  theme(panel.border = element_rect(size = 0.6)) + #边框粗细
  theme(axis.line.y = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank()) #去除y轴
ggsave("gsva.pdf", width = 6, height = 8)

#在肿瘤区域的拿出来 
names(larea@meta.data)


#Stress####
a <-"TFF2
TFF1
CLU
ATF3
ACSM3
SPP1
JUN
NRG1
ALB
VTN
TFF3
FOS
AGT
RAB11FIP1
DCDC2
LYZ
GDF15
TM4SF4
CFTR
NRG3
HSPA6
SPINK1
IER2
SLC12A2
CTNND2
FOSB
UGT2B15
S100A1
SLC4A4
DUSP1
SORBS2
RHOB
ABHD3
JUND
CREB5
CFH
AGR2
LGALS4
TACC1
LRMDA
"
#用的是所有患者的hepatocyte,tumor cell,SPP1+macro 的前40基因去掉linc和非编码RNA
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Stress'

SpatialFeaturePlot(larea, features ='Stress', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Stress.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]




#Stress2####
a <-"FOS
ATF3
NR4A1
DUSP1
ZFP36
PPP1R15A
SGK1
EGR1
ZC3H12A
JUNB
FOSB
IER2
NFKBIA
NFKBIZ
HBEGF
BTG2
SOD2
CDKN1A
NCOA7
JUN
MYC
SERTAD1
CCNL1
RND3
PLK2
SOCS3
DNAJB1
DUSP2
TSC22D1
KLF10
GADD45B
PMAIP1
MAFF
ERRFI1
SLC38A2
IRF1
TOB1
ID2
KLF6
DNAJA1
TNFAIP3
BHLHE40
NXF1
FOSL1
IER3
DUSP6
HCAR2
IL8
CYR61
EFNA1
"
#用的是Stress_sig
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Stress2'

SpatialFeaturePlot(larea, features ='Stress2', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Stress2.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]

#Prolif####
a <-"CENPF
TOP2A
TUBA1B
H2AFZ
TPX2
MKI67
ASPM
SMC4
STMN1
ANLN
HMGB2
UBE2C
PTTG1
UBE2S
RRM2
ARL6IP1
MIR924HG
TK1
BIRC5
S100A2
HMGN2
TUBB
PCLAF
HIST1H4C
TUBA1C
ECT2
ATAD2
KIF20B
CCNB1
MT2A
HMGB1
CKS2
NUSAP1
CENPE
KPNA2
TUBB4B
CDK1
DIAPH3
PRC1
BRIP1
"
#用的是J_tumor的c_prolif的sig
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Prolif'

SpatialFeaturePlot(larea, features ='Prolif', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Prolif.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]

#EMT####
cd_features <- list(c("SERPINE1","TGFBI","MMP10","LAMC2","P4HA2","PDPN","ITGA5","LAMA3","CDH13","TNC","MMP2","EMP3",
                      "INHBA","LAMB3","VIM","SEMA3C","PRKCDBP","ANXA4","DHRS7","ITGB1","ACTN1","CXCR7","ITGB6","IGFBP7",
                      "THBS1","PTHLH","TNFRSF6B","PDLIM7","CAV1","DKK3"))

larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'EMT'
SpatialFeaturePlot(larea, features ='EMT', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("EMT.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]

#EMT2####
a <-"MT1X
TEX41
LINC02476
NDRG1
AC012494.1
AC005208.1
EHBP1
TGFBI
FTH1
SLC2A1
KRT6B
INPP4B
EGLN3
AL691420.1
LINC02109
LINC02307
AC016687.3
F3
HMGA2
TENM2
LINC02055
AC024230.1
DLEU1
CDA
PRSS23
SLC22A3
AC009264.1
FAM13A
AC114316.1
FAM3C
VCAN
TANC2
ITGB6
LAMA3
SEMA3C
SERPINB3
AC104041.1
AC009315.1
GNGT1
ARHGAP32
"

#J_tumor_sig
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'EMT2'

SpatialFeaturePlot(larea, features ='EMT2', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("EMT2.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(18)]

#EMTinteraction####
library(Seurat)
library(tidyverse)
library(ggplot2)
larea@reductions$spatial = larea@reductions$umap
larea@reductions$spatial@key = 'spatial_'
#提取坐标轴
larea@reductions$spatial@cell.embeddings = as.matrix(larea@images$Leadingedgearea@coordinates[,c(2,3)])
# #上下颠倒一次
# larea@reductions$spatial@cell.embeddings[,2] = -larea@reductions$spatial@cell.embeddings[,2]
#左右颠倒一次
#larea@reductions$spatial@cell.embeddings[,1] = -larea@reductions$spatial@cell.embeddings[,1]
colnames(larea@reductions$spatial@cell.embeddings) = c('spatial_1','spatial_2')
#绘图
p = FeaturePlot(larea, features = c("EMT", "P6_ICC_signature"), blend = TRUE,cols = c('lightgrey','blue','red'),pt.size = 1.6,reduction = 'spatial',combine = F)
for (i in 1:length(p)){
  p[[i]] = p[[i]] + theme(axis.text = element_blank(),axis.ticks=element_blank(),legend.position = 'none',axis.line = element_blank(),axis.title = element_text(size = 20),plot.title = element_text(size = 30))
}
f = CombinePlots(plots = list(p[[1]],p[[2]],p[[3]],p[[4]]), ncol = 4)
pdf('EMT.interaction.pdf',width = 25,height = 6)
print(f)
dev.off()

#Stress.interaction####
library(Seurat)
library(tidyverse)
library(ggplot2)
larea@reductions$spatial = larea@reductions$umap
larea@reductions$spatial@key = 'spatial_'
#提取坐标轴
larea@reductions$spatial@cell.embeddings = as.matrix(larea@images$Leadingedgearea@coordinates[,c(2,3)])
# #上下颠倒一次
# larea@reductions$spatial@cell.embeddings[,2] = -larea@reductions$spatial@cell.embeddings[,2]
#左右颠倒一次
#larea@reductions$spatial@cell.embeddings[,1] = -larea@reductions$spatial@cell.embeddings[,1]
colnames(larea@reductions$spatial@cell.embeddings) = c('spatial_1','spatial_2')
#绘图
p = FeaturePlot(larea, features = c("Stress", "P6_ICC_signature"), blend = TRUE,cols = c('lightgrey','blue','red'),pt.size = 1.6,reduction = 'spatial',combine = F)
for (i in 1:length(p)){
  p[[i]] = p[[i]] + theme(axis.text = element_blank(),axis.ticks=element_blank(),legend.position = 'none',axis.line = element_blank(),axis.title = element_text(size = 20),plot.title = element_text(size = 30))
}
f = CombinePlots(plots = list(p[[1]],p[[2]],p[[3]],p[[4]]), ncol = 4)
pdf('Stress.interaction.pdf',width = 25,height = 6)
print(f)
dev.off()
#Prolif.interaction.pdf####
library(Seurat)
library(tidyverse)
library(ggplot2)
larea@reductions$spatial = larea@reductions$umap
larea@reductions$spatial@key = 'spatial_'
#提取坐标轴
larea@reductions$spatial@cell.embeddings = as.matrix(larea@images$Leadingedgearea@coordinates[,c(2,3)])
# #上下颠倒一次
# larea@reductions$spatial@cell.embeddings[,2] = -larea@reductions$spatial@cell.embeddings[,2]
#左右颠倒一次
#larea@reductions$spatial@cell.embeddings[,1] = -larea@reductions$spatial@cell.embeddings[,1]
colnames(larea@reductions$spatial@cell.embeddings) = c('spatial_1','spatial_2')
#绘图
p = FeaturePlot(larea, features = c("Prolif", "P6_ICC_signature"), blend = TRUE,cols = c('lightgrey','blue','red'),pt.size = 1.6,reduction = 'spatial',combine = F)
for (i in 1:length(p)){
  p[[i]] = p[[i]] + theme(axis.text = element_blank(),axis.ticks=element_blank(),legend.position = 'none',axis.line = element_blank(),axis.title = element_text(size = 20),plot.title = element_text(size = 30))
}
f = CombinePlots(plots = list(p[[1]],p[[2]],p[[3]],p[[4]]), ncol = 4)
pdf('Prolif.interaction.pdf',width = 25,height = 6)
print(f)
dev.off()

#ITGA_faimly####
genes_to_check <- c("ITGA2","ITGA3","ITGA6")
cd_features <- list(c(genes_to_check))
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'ITGA_faimly'
SpatialFeaturePlot(larea, features ='ITGA_faimly', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("ITGA_faimly.pdf",height = 6,width = 6)
#ITGA_faimly-tumor.interaction.pdf####
library(Seurat)
library(tidyverse)
library(ggplot2)
larea@reductions$spatial = larea@reductions$umap
larea@reductions$spatial@key = 'spatial_'
#提取坐标轴
larea@reductions$spatial@cell.embeddings = as.matrix(larea@images$Leadingedgearea@coordinates[,c(2,3)])
# #上下颠倒一次
# larea@reductions$spatial@cell.embeddings[,2] = -larea@reductions$spatial@cell.embeddings[,2]
#左右颠倒一次
larea@reductions$spatial@cell.embeddings[,1] = -larea@reductions$spatial@cell.embeddings[,1]
colnames(larea@reductions$spatial@cell.embeddings) = c('spatial_1','spatial_2')
#绘图
p = FeaturePlot(larea, features = c("ITGA_faimly", "P6_ICC_signature"), blend = TRUE,cols = c('lightgrey','blue','red'),pt.size = 1.6,reduction = 'spatial',combine = F)
for (i in 1:length(p)){
  p[[i]] = p[[i]] + theme(axis.text = element_blank(),axis.ticks=element_blank(),legend.position = 'none',axis.line = element_blank(),axis.title = element_text(size = 20),plot.title = element_text(size = 30))
}
f = CombinePlots(plots = list(p[[1]],p[[2]],p[[3]],p[[4]]), ncol = 4)
pdf('ITGA_faimly-tumor.interaction.pdf',width = 25,height = 6)
print(f)
dev.off()

#HMGA1-CD44.interaction.pdf####
library(Seurat)
library(tidyverse)
library(ggplot2)
larea@reductions$spatial = larea@reductions$umap
larea@reductions$spatial@key = 'spatial_'
#提取坐标轴
larea@reductions$spatial@cell.embeddings = as.matrix(larea@images$Leadingedgearea@coordinates[,c(2,3)])
# #上下颠倒一次
# larea@reductions$spatial@cell.embeddings[,2] = -larea@reductions$spatial@cell.embeddings[,2]
#左右颠倒一次
larea@reductions$spatial@cell.embeddings[,1] = -larea@reductions$spatial@cell.embeddings[,1]
colnames(larea@reductions$spatial@cell.embeddings) = c('spatial_1','spatial_2')
#绘图
p = FeaturePlot(larea, features = c("TREM2", "CD68"), blend = TRUE,cols = c('lightgrey','purple','green'),pt.size = 1.6,reduction = 'spatial',combine = F)
for (i in 1:length(p)){
  p[[i]] = p[[i]] + theme(axis.text = element_blank(),axis.ticks=element_blank(),legend.position = 'none',axis.line = element_blank(),axis.title = element_text(size = 20),plot.title = element_text(size = 30))
}
f = CombinePlots(plots = list(p[[1]],p[[2]],p[[3]],p[[4]]), ncol = 4)
pdf('HMGA1-CD44.interaction.pdf',width = 25,height = 6)
print(f)
dev.off()
#DC_sig####
a <-"HLA-DQA1
CST3
HLA-DQB1
HLA-DRA
HLA-DPA1
HLA-DRB1
HLA-DPB1
CPVL
LGALS2
LYZ
CD74
SLC8A1
HLA-DMA
CCSER1
CSF2RA
MEF2C
HDAC9
MS4A6A
CD86
CLEC10A
IFI30
AIF1
CIITA
FGL2
KLF4
CTSZ
HLA-DMB
IL1B
1-Mar
CCDC88A
C1orf162
TYMP
SPI1
FCER1A
GRN
LRMDA
PLXDC2
UBE2E2
CTSH
CD1C
"
#用的是Stress_sig
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'DC_sig'

SpatialFeaturePlot(larea, features ='DC_sig', alpha = c(0, 2))+theme(aspect.ratio = 1)
ggsave("DC_sig.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]


#Neu_sig####
a <-"CXCL8
G0S2
S100A8
AQP9
PHACTR1
S100A9
NAMPT
LUCAT1
BCL2A1
FCGR3B
PLAUR
SOD2
ALDH1A2
LYN
GAB2
MNDA
DOCK4
BASP1
DOCK5
RBM47
PTGS2
TNFAIP6
FNDC3B
GK
AZIN1-AS1
EPHB1
ACSL1
PLEK
C5AR1
MCTP1
IL1RAP
HCK
CREB5
KCNJ15
TREM1
PILRA
DENND5A
RUBCNL
ASAH1
IL1R2
"
#用的是Stress_sig
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Neu_sig'

SpatialFeaturePlot(larea, features ='Neu_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Neu_sig.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]


#NK_sig####
a <-"GNLY
KLRF1
KLRD1
TRDC
GZMB
FGFBP2
XCL2
IFNG
CCL4
LINGO2
TXK
CCL3
NCAM1
PDGFD
HOPX
YES1
C1orf21
LINC02384
XCL1
CEMIP2
SH2D1B
AUTS2
IL12RB2
KLRB1
FCGR3A
ZBTB16
TYROBP
KCNQ5
ABCB1
CD38
"
#用的是immune_nk
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "NK_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'NK_sig'

SpatialFeaturePlot(larea, features ='NK_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("NK_sig.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]

#P6_Endo_sig_test####
a <-"FCN3
LDB2
HSPG2
CALCRL
SLC9A3R2
FLT1
RAMP2
PLPP1
IFI27
INSR
TCF4
CCL14
ARL15
GNG11
PCDH17
PTPRG
PTPRM
ENG
VWF
A2M
EPAS1
AQP1
DNASE1L3
ADGRL4
ID1
PTPRB
MGP
EMCN
EGFL7
SPARC
PLVAP
CLDN5
TIMP3
MECOM
WWTR1
PLCB1
COL4A1
EMP1
RNASE1
CRHBP
"
#用的是P5患者的sce-endo-deg
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "P6_Endo_sig_test")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'P6_Endo_sig_test'

SpatialFeaturePlot(larea, features ='P6_Endo_sig_test', alpha = c(-0.5, 2))+theme(aspect.ratio = 1)
ggsave("P6_Endo_sig_test.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]


#P6_fibro_signature####
a <-"IGFBP7
C11orf96
TAGLN
ACTA2
SPARCL1
COL1A1
COL3A1
CALD1
MGP
MYL9
TPM2
PRKG1
ADAMTS9
CRISPLD2
COL1A2
BGN
SPARC
PDGFRB
ADIRF
IGFBP5
COL4A2
MYH11
SOD3
PDE3A
DCN
CACNA1C
COL4A1
ADAMTS1
LHFPL6
NOTCH3
MT2A
RGS5
IGFBP4
MUSTN1
ADGRB3
ADAMTS4
COL6A2
DLC1
NDUFA4L2
SLIT3
"
#用的是P3患者的sce-fibro-deg
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "P6_fibro_signature")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'P6_fibro_signature'

SpatialFeaturePlot(larea, features ='P6_fibro_signature', alpha = c(-0.5, 1.5))+theme(aspect.ratio = 1)
ggsave("P6_fibro_signature.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]




#MAIT_sig####
a <-"CCL20
SLC4A10
IL7R
KLRB1
ME1
ZBTB16
PLCB1
IL4I1
RORA
AFF3
NFKBIA
"
#用的是P5患者的sce-endo-deg
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'MAIT_sig'
colnames(larea@meta.data)
SpatialFeaturePlot(larea, features ='MAIT_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("MAIT_sig.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]


#Mast_sig####
a <-"TPSAB1
TPSB2
CPA3
CTSG
KIT
MS4A2
HDC
ADCYAP1
"
#用的是P5患者的sce-endo-deg
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Mast_sig'

SpatialFeaturePlot(larea, features ='Mast_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Mast_sig.pdf",height = 6,width = 6)
names(larea@meta.data)
larea@meta.data <- larea@meta.data[-c(17:25)]


#拆看带状区域的信号强度2####
#查看坐标系范围
#图2整个大背景黑色

names(larea@meta.data)
P<-SpatialFeaturePlot(larea, features =c("P6_fibro_signature"))
img <- P$data[,1:3]
ggplot(img, aes(x=imagecol, y=600-imagerow,color = P6_fibro_signature)) +
  geom_point(size = 1.5)+
  scale_color_viridis_c()+
  theme_minimal() + #去掉背景
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ 
  theme(plot.background = element_rect(fill = "black" ))+ 
  #theme(panel.background = element_rect(fill = 'black', color = 'black'))
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",#图例方向
        legend.position = "top"#图例位置
  )
ggsave("ruler.pdf",width = 6,height = 6)
#图3 得去掉x轴y轴坐标


#已经画好了
names(larea@meta.data)
SpatialFeaturePlot(larea, features =c("Proliferating_sig","P6_ICC_signature_test","P6_fibro_signature",
                                      "P6_Endo_sig_test","SPP1_Macro_sig_test","T_cell_signature","DC_sig","NK_sig"))
P1<-SpatialFeaturePlot(larea, features =c("Proliferating_sig"))
img1 <- P1$data[,1:3]
P2<-SpatialFeaturePlot(larea, features =c("P6_ICC_signature_test"))
img2 <- P2$data[,1:3]
P3<-SpatialFeaturePlot(larea, features =c("P6_fibro_signature"))
img3 <- P3$data[,1:3]
P4<-SpatialFeaturePlot(larea, features =c("P6_Endo_sig_test"))
img4 <- P4$data[,1:3]
P5<-SpatialFeaturePlot(larea, features =c("SPP1_Macro_sig_test"))
img5 <- P5$data[,1:3]
P6<-SpatialFeaturePlot(larea, features =c("T_cell_signature"))
img6 <- P6$data[,1:3]
P7<-SpatialFeaturePlot(larea, features =c("DC_sig"))
img7 <- P7$data[,1:3]
P8<-SpatialFeaturePlot(larea, features =c("NK_sig"))
img8 <- P8$data[,1:3]
#合并信号值
img <- cbind(img1,img2,img3,img4,img5,img6,img7,img8)
#提取信号值强度
img <- img[,c("imagerow","imagecol","Proliferating_sig","P6_ICC_signature_test","P6_fibro_signature",
              "P6_Endo_sig_test","SPP1_Macro_sig_test","T_cell_signature","DC_sig","NK_sig")]
#img$imagerow <- 600-img$imagerow
colnames(img)[1:2] <- c("Y","X")
#修改一下y轴坐标
img[,"Y"] <- 600-img[,"Y"]
#把x轴大于450的点取出来
#将信号值0-1标准化
# 定义一个函数来实现最小-最大缩放
min_max_scale <- function(x) {
  return((x - min(x)) / (max(x) - min(x)))
}

# 应用函数对数据框进行最小-最大缩放
img[,3:ncol(img)] <- as.data.frame(lapply(img[,3:ncol(img)], min_max_scale))

# #逐列对信号值进行0-1缩放
# img[,3:ncol(img)] <-apply(img[,3:ncol(img)], 2, function (x) (max(x)-x)/(max(x)-min(x)))


img <- img[which(img$Y >= 196.56&img$Y<=202.89),]
# #再一次缩放呢？
# img[,3:ncol(img)] <- as.data.frame(lapply(img[,3:ncol(img)], min_max_scale))
#分组求均值
dat1 <- aggregate(img[,3:ncol(img)],by=list(type=img$X),mean)
#宽数据变长数据
library(reshape2)
dat2 <- melt(dat1,id=("type"))



colour=c("#DC143C","#0000FF","#20B2AA","#FFA500","#9370DB","#98FB98","#F08080","#1E90FF","#7CFC00","#FFFF00",
         "#808000","#FF00FF","#FA8072","#7B68EE","#9400D3","#800080","#A0522D","#D2B48C","#D2691E","#87CEEB","#40E0D0","#5F9EA0",
         "#FF1493","#0000CD","#008B8B","#FFE4B5","#8A2BE2","#228B22","#E9967A","#4682B4","#32CD32","#F0E68C","#FFFFE0","#EE82EE",
         "#FF6347","#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887")
#画折线图，所有细胞的信号图，在同一张展示####
ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = colour)+
  geom_point(size=2)+
  theme_minimal()+labs(title = "Ribbon_sig_196.56_202.89") #去掉背景
ggsave("ribbon_sig_196.56_202.89_2.pdf",height = 4,width = 8)

#画折线图，分面图####
ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = colour)+
  geom_point(size=2)+
  theme_minimal()+labs(title = "Ribbon_sig_196.56_202.89") +
  facet_wrap(~ variable,ncol =4) #去掉背景
ggsave("ribbon_sig_196.56_202.89_3.pdf",height = 8,width = 16)


#添加拟合曲线
ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = colour)+
  geom_point(size=2)+
  theme_minimal()+labs(title = "Ribbon_sig_196.56_202.89") +
  facet_wrap(~ variable,ncol =4)+
  geom_smooth(method= "loess",color="red",
              span=0.1,
              se=T
  ) #去掉背景
ggsave("ribbon_sig_196.56_202.89_4.pdf",height = 8,width = 16)




#将varible的颜色匹配到拟合曲线#
ggplot(dat2, aes(x = type, y = value, color = variable)) +
  geom_line() +
  geom_point(size = 2) +
  geom_smooth(aes(color = variable), method = "loess", se = TRUE, span = 0.12) +
  scale_color_manual(values = colour) +
  theme_minimal() +
  labs(title = "Ribbon_sig_196.56_202.89") +
  facet_wrap(~ variable, ncol = 4)
ggsave("ribbon_sig_196.56_202.89_5.pdf",height = 8,width = 16)
#将拟合曲线放在一张图里
ggplot(dat2, aes(x = type, y = value, color = variable)) +
  geom_line() +
  geom_point(size = 2) +
  scale_color_manual(values = colour) +
  theme_minimal() +
  labs(title = "Ribbon_sig_196.56_202.89")  +
  geom_smooth(aes(color = variable), method = "loess", se = TRUE, span = 0.12)
ggsave("ribbon_sig_196.56_202.89_6.pdf",height = 4,width = 6)

#将拟合曲线放在一张图里
ggplot(dat2, aes(x = type, y = value, color = variable)) +
  scale_color_manual(values = colour) +
  theme_minimal() +
  labs(title = "Ribbon_sig_196.56_202.89-X")  +
  geom_smooth(aes(color = variable), method = "loess", se = F, span = 0.12)
ggsave("ribbon_sig_196.56_202.89_7.pdf",height = 4,width = 6)






#拆看带状区域的信号强度2####
#查看坐标系范围
#图2整个大背景黑色
P<-SpatialFeaturePlot(larea, features =c("Fibro_signature2"))
img <- P$data[,1:3]
ggplot(img, aes(x=imagecol, y=600-imagerow,color = Fibro_signature2)) +
  geom_point(size = 1.5)+
  scale_color_gradient2(low="black",high="white",mid="red",midpoint = median(img$Fibro_signature2)
  )+
  theme_minimal() + #去掉背景
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ 
  theme(plot.background = element_rect(fill = "black" ))+ 
  #theme(panel.background = element_rect(fill = 'black', color = 'black'))
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",#图例方向
        legend.position = "top"#图例位置
  )
#图3 得去掉x轴y轴坐标

#已经画好了
SpatialFeaturePlot(larea, features =c("ICC_Proliferating_signature2","ICC_signature2","Fibro_signature2","Endothelial_signature"))
P1<-SpatialFeaturePlot(larea, features =c("ICC_Proliferating_signature2"))
img1 <- P1$data[,1:3]
P2<-SpatialFeaturePlot(larea, features =c("ICC_signature2"))
img2 <- P2$data[,1:3]
P3<-SpatialFeaturePlot(larea, features =c("Fibro_signature2"))
img3 <- P3$data[,1:3]
P4<-SpatialFeaturePlot(larea, features =c("Endothelial_signature"))
img4 <- P4$data[,1:3]
img <- cbind(img1,img2,img3,img4)
img <- img[,-c(4,5,7,8,10,11)]
colnames(img)[1:2] <- c("Y","X")
#修改一下y轴大于450的点取出来
img[,"Y"] <- 600-img[,"Y"]
#把y轴
img <- img[which(img$Y >= 450),]
#分组求均值
dat1 <- aggregate(img[,3:6],by=list(type=img$X),mean)
#宽数据变长数据
library(reshape2)
dat2 <- melt(dat1,id=("type"))
#画折线图
ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = c("orange","#1692BA", "black","red"))+
  geom_point(size=2)+
  theme_minimal()+labs(title = "Ribbon_sig_450") #去掉背景
ggsave("ribbon_sig_450.pdf",height = 4,width = 8)


#475-500
P1<-SpatialFeaturePlot(larea, features =c("ICC_Proliferating_signature2"))
img1 <- P1$data[,1:3]
P2<-SpatialFeaturePlot(larea, features =c("ICC_signature2"))
img2 <- P2$data[,1:3]
P3<-SpatialFeaturePlot(larea, features =c("Fibro_signature2"))
img3 <- P3$data[,1:3]
P4<-SpatialFeaturePlot(larea, features =c("Endothelial_signature"))
img4 <- P4$data[,1:3]
img <- cbind(img1,img2,img3,img4)
img <- img[,-c(4,5,7,8,10,11)]
colnames(img)[1:2] <- c("Y","X")
#修改一下y轴大于450的点取出来
img[,"Y"] <- 600-img[,"Y"]
#把y轴
img <- img[which(img$Y >= 475&img$Y<=500),]
#分组求均值
dat1 <- aggregate(img[,3:6],by=list(type=img$X),mean)
#宽数据变长数据
library(reshape2)
dat2 <- melt(dat1,id=("type"))
#画折线图

ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = c("orange","#1692BA", "black","red"))+
  geom_point(size=2)+
  theme_minimal() + #去掉背景
  labs(title = "Ribbon_sig_475-500")
ggsave("ribbon_sig_475-500.pdf",height = 4,width = 8)

#330-370
P1<-SpatialFeaturePlot(larea, features =c("ICC_Proliferating_signature2"))
img1 <- P1$data[,1:3]
P2<-SpatialFeaturePlot(larea, features =c("ICC_signature2"))
img2 <- P2$data[,1:3]
P3<-SpatialFeaturePlot(larea, features =c("Fibro_signature2"))
img3 <- P3$data[,1:3]
P4<-SpatialFeaturePlot(larea, features =c("Endothelial_signature"))
img4 <- P4$data[,1:3]
img <- cbind(img1,img2,img3,img4)
img <- img[,-c(4,5,7,8,10,11)]
colnames(img)[1:2] <- c("Y","X")
#修改一下y轴大于450的点取出来
img[,"Y"] <- 600-img[,"Y"]
#把y轴
img <- img[which(img$Y >= 330&img$Y<=370),]
#分组求均值
dat1 <- aggregate(img[,3:6],by=list(type=img$X),mean)
#宽数据变长数据
library(reshape2)
dat2 <- melt(dat1,id=("type"))
#画折线图
ggplot(dat2,aes(x=type, y=value, color=variable)) + 
  geom_line()+ scale_color_manual(values = c("orange","#1692BA", "black","red"))+
  geom_point(size=2)+
  theme_minimal() + #去掉背景
  labs(title = "Ribbon_sig_330-370")
ggsave("ribbon_sig_330-370.pdf",height = 4,width = 8)

#colocalization####
names(larea@meta.data)
library(Seurat)
library(tidyverse)
library(ggplot2)
larea@reductions$spatial = larea@reductions$umap
larea@reductions$spatial@key = 'spatial_'
#提取坐标轴
larea@reductions$spatial@cell.embeddings = as.matrix(larea@images$Leadingedgearea@coordinates[,c(2,3)])
# #上下颠倒一次
# larea@reductions$spatial@cell.embeddings[,2] = -larea@reductions$spatial@cell.embeddings[,2]
#左右颠倒一次
#larea@reductions$spatial@cell.embeddings[,1] = -larea@reductions$spatial@cell.embeddings[,1]
colnames(larea@reductions$spatial@cell.embeddings) = c('spatial_1','spatial_2')
#绘图
p = FeaturePlot(larea, features = c("SPP1_Macro_sig_test", "P6_fibro_sig_test"), blend = TRUE,cols = c('lightgrey','blue','red'),pt.size = 1.6,reduction = 'spatial',combine = F)
for (i in 1:length(p)){
  p[[i]] = p[[i]] + theme(axis.text = element_blank(),axis.ticks=element_blank(),legend.position = 'none',axis.line = element_blank(),axis.title = element_text(size = 20),plot.title = element_text(size = 30))
}
f = CombinePlots(plots = list(p[[1]],p[[2]],p[[3]],p[[4]]), ncol = 4)
print(p[[3]])
pdf('endo_fibro.interaction.pdf',width = 25,height = 6)
print(f)
dev.off()
a <- print(p[[1]])
df1 <- a$data
df1[,4] <- as.character(df1[,4])
a <- print(p[[2]])
df2 <- a$data
df2[,4] <- as.character(df2[,4])

identical(rownames(df1),rownames(df2))
df <- cbind(df1,df2)
df <- df[,c(1,2,4,8)]
df$signal <- paste0(df[,3],df[,4])
df$levels <- df[,3]*df[,4]
#画图
img <- df
#图2 整个大背景黑色
#图1
ggplot(img, aes(x=spatial_1, y=spatial_2,color = signal)) +
  geom_point(size = 1.5)+scale_color_manual(values = c("00" = "#DFE2E5", "04" = "#41BEE5","09" = "#2371E2",
                                                       "40" = "#E48C85", "44" = "#88AC79","49" = "#3F9B80",
                                                       "90" = "#E71F19", "94" = "#3F9B80","99" = "#175645"))+
  
  theme_minimal() + #去掉背景
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ #去掉网格线
  theme(axis.text.x=element_blank(), #去掉y轴坐标
        axis.text.y=element_blank())+ #去掉x轴坐标
  theme(aspect.ratio = 1)
ggsave("plot1.pdf",height = 6,width = 6)
#图2
img$levels <- 
  img$signal %in% c("00","04","09",)
ggplot(img, aes(x=spatial_1, y=spatial_2,color = signal)) +
  geom_point(size = 1.5)+scale_color_manual(values = c("00" = "#DFE2E5", "04" = "#D6DDE3","09" = "#D6DDE3",
                                                       "40" = "#D6DDE3", "44" = "#AEBBCB","49" = "#5975A4",
                                                       "90" = "#D6DDE3", "94" = "#5975A4","99" = "#124D81"))+
  
  theme_minimal() + #去掉背景
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ #去掉网格线
  theme(axis.text.x=element_blank(), #去掉y轴坐标
        axis.text.y=element_blank())+ #去掉x轴坐标
  theme(aspect.ratio = 1)
ggsave("plot2.pdf",height = 6,width = 6)

#三元共定位####
names(larea@meta.data)
df<- larea@meta.data
Key(object =larea@images$Leadingedgearea)
img<- GetTissueCoordinates(larea)
head(img)
identical(rownames(img),rownames(df))
df<- cbind(df,img)
colnames(df)
#提取关键信息#
df_raw <- df[,c("P6_Endo_sig_test","P6_fibro_signature","SPP1_Macro_sig_test","imagerow","imagecol")]

#将各自信号四等分，标记为1，2，3，4
# 使用循环逐列执行代码
for (col in colnames(df_raw)[1:3]) {
  # 执行针对当前列的代码
  # 这里只是一个示例，你可以根据具体需求进行相应操作
  df_raw[[col]] <- cut(df_raw[[col]], breaks = 4, labels = c( 1, 2, 3, 4))
  df_raw[[col]] <- as.numeric(df_raw[[col]])
}
# 输出结果
print(df_raw)
table(df_raw$P6_Endo_sig_test)
df_raw[,1:3] <- df_raw[,1:3]-1 
df_output<- data.frame(signal=df_raw[,1] * df_raw[,2] * df_raw[,3],df_raw[,4:5])
table(df_output$signal)
ggplot(df_output, aes(x = imagecol, y = 600 - imagerow, color = signal)) +
  geom_point(size = 1.5) +
  theme_minimal() +
  theme(panel.grid = element_blank()) +
  theme(axis.text.x = element_blank(), axis.text.y = element_blank()) +
  scale_color_gradient2(low="black",high="#063A94",mid="#F2F3F4")+
  theme(axis.text.x=element_blank(), #去掉y轴坐标
        axis.text.y=element_blank()) +#去掉x轴坐标
  labs(x="",y = "",title = "")+theme(aspect.ratio = 1)+
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",#图例方向
        legend.position = "top"#图例位置
  )
ggsave("trio_signal.pdf",height = 6,width = 6)

#蜂窝蜂窝点图相关性####
#2倍直径试一下#
#提取出坐标信息和signature信息
df <- larea@meta.data
Key(object =larea@images$Leadingedgearea)
img<- GetTissueCoordinates(larea)
df_input <- cbind(df,img)
df_input <- df_input[which(df_input$area =="Tumor_side"),]
colnames(df_input)
df_info <- df_input[,c("imagerow","imagecol","SPP1_Macro_sig_test","Proliferating_sig","T_cell_signature","P6_Endo_sig_test")]
names(larea@meta.data)



library(class)
library(FNN)

# 定义k值
k <- 19 #一倍为7，两倍为19，三倍为37
times=2
honeycomb_matrix <- df_info[,1:2]
colnames(honeycomb_matrix) <- c("x","y")
ggplot()+
  # 绘制节点和元件
  geom_point(data = honeycomb_matrix, aes(x = x, y = y), size = 2) 

#旋转角度
angle <- -pi/2  # 例如，将角度设为 pi/4 表示逆时针旋转 45 度
# 计算旋转后的坐标点
df <- honeycomb_matrix 
df_rotated <- data.frame(
  x = df$x * cos(angle) - df$y * sin(angle),
  y = df$x * sin(angle) + df$y * cos(angle)
)
honeycomb_matrix <- df_rotated



#看一下回复了没
ggplot()+
  # 绘制节点和元件
  geom_point(data = honeycomb_matrix, aes(x = x, y = y), size = 2) 

df_info[,c(1:2)] <-  honeycomb_matrix[,c(1:2)]
colnames(df_info)[1:2] <- c("x","y")

# 创建k最近邻模型
knn_model <- knn.dist(honeycomb_matrix, k = k)
table(knn_model)
# 设置蜂巢单元半径
radius <- 6.62944543891348*times

# 创建空的数据框用于存储结果

euclidean_distance <- function(x1, y1, x2, y2) {
  sqrt((x2 - x1)^2 + (y2 - y1)^2)
}
# 创建空的数据框用于存储结果
num_nearest <- k  # 设置临近点的数量

# 创建结果数据框
result_df <- data.frame(center_x = numeric(),
                        center_y = numeric())

# 循环添加临近点的列
for (i in 1:num_nearest) {
  result_df[paste0("nearest_x", i)] <- numeric()
  result_df[paste0("nearest_y", i)] <- numeric()
}
# 循环遍历每个中心点
for (i in 1:nrow(honeycomb_matrix)) {
  # 获取当前中心点的坐标
  center_x <- honeycomb_matrix[i, "x"]
  center_y <- honeycomb_matrix[i, "y"]
  
  # 在蜂巢单元半径内找到临近点
  nearby_points <- honeycomb_matrix[euclidean_distance(center_x, center_y, honeycomb_matrix$x, honeycomb_matrix$y) <= radius, ]
  
  # 如果临近点数量不足6个，补充缺失值
  if (nrow(nearby_points) < num_nearest) {
    missing_count <- num_nearest - nrow(nearby_points)
    missing_points <- data.frame(x = rep(NA, missing_count), y = rep(NA, missing_count))
    nearby_points <- rbind(nearby_points, missing_points)
  }
  
  # 提取临近点的坐标
  nearest_coords <- as.data.frame(t(matrix(c(nearby_points$x, nearby_points$y), ncol = 2)))
  
  # 将中心点和临近点的坐标合并到结果数据框中
  result_df <- rbind(result_df, c(center_x, center_y, t(nearest_coords)))
}

# 重设列名
colnames(result_df) <- c("center_x",
                         "center_y",
                         paste0("nearest_x", 1:num_nearest),
                         paste0("nearest_y", 1:num_nearest))

# 输出结果数据框
result_df

identical(result_df$center_x,df_info$x)
identical(result_df$center_y,df_info$y)
#去掉中心点#
library(dplyr)
colnames(result_df)
result_df <- result_df %>% 
  select(-nearest_x1, -nearest_y1)


library(ggplot2)
# 创建 ggplot 对象，并绘制所有点，颜色为灰色
# 创建 ggplot 对象，并绘制所有点，颜色为灰色
p <- ggplot(honeycomb_matrix, aes(x, y)) +
  geom_point(color = "grey", size = 3) +
  theme_minimal()
p
# 提取一个中心点的坐标
center_index <- 5 #找几个点试验一下
center_point <- honeycomb_matrix[center_index, ]

# 获取该中心点的临近点坐标
#nearby_points <- honeycomb_matrix[euclidean_distance(center_point$x, center_point$y, honeycomb_matrix$x, honeycomb_matrix$y) <= radius, ]
nearby_points <- honeycomb_matrix[euclidean_distance(center_point$x, center_point$y, honeycomb_matrix$x, honeycomb_matrix$y) <= radius & (honeycomb_matrix$x != center_point$x | honeycomb_matrix$y != center_point$y), ]
nearby_points <- nearby_points[1:num_nearest, ]

# 在原有图形上添加临近点并设置颜色为蓝色
p <- p + geom_point(data = nearby_points, aes(x, y), color = "blue", size = 3)
p

# 在原有图形上添加中心点并设置颜色为红色
p <- p + geom_point(data = center_point, aes(x, y), color = "red", size = 3)
p

#selected_points <- df_info[euclidean_distance(center_point$x, center_point$y, df_info$x, df_info$y) <= radius, ]
selected_points <- df_info[euclidean_distance(center_point$x, center_point$y, df_info$x, df_info$y) <= radius & (df_info$x != center_point$x | df_info$y != center_point$y), ]
#信号均值化
signal_means <- colMeans(selected_points[, c("SPP1_Macro_sig_test", "Proliferating_sig", "T_cell_signature", "P6_Endo_sig_test")])

# 构造 data.frame 并返回
result_df2 <- data.frame(center_point_x = center_point$x,
                         center_point_y = center_point$y,
                         SPP1_Macro_sig_test =signal_means[1],
                         Proliferating_sig=signal_means[2],
                         T_cell_signature=signal_means[3],
                         P6_Endo_sig_test=signal_means[4]
)

result_df_list <- list()  # 存储结果的列表
for (center_index in 1:nrow(df_info)) {
  center_point <- honeycomb_matrix[center_index, ]
  nearby_points <- df_info[euclidean_distance(center_point$x, center_point$y, df_info$x, df_info$y) <= radius & (df_info$x != center_point$x | df_info$y != center_point$y), ]
  signal_means <- colMeans(nearby_points[, c("SPP1_Macro_sig_test", "Proliferating_sig", "T_cell_signature", "P6_Endo_sig_test")])
  result_df <- data.frame(center_point_x = center_point$x,
                          center_point_y = center_point$y,
                          SPP1_Macro_sig_test = signal_means[1],
                          Proliferating_sig = signal_means[2],
                          T_cell_signature = signal_means[3],
                          P6_Endo_sig_test = signal_means[4]
  )
  
  result_df_list[[center_index]] <- result_df
}

# 将结果合并为一个大的数据框
final_result_df <- do.call(rbind, result_df_list)

#提取信号的前5%
library(dplyr)
num_rows <- ceiling(0.05 * nrow(final_result_df))

selected_rows <- final_result_df %>% 
  arrange(desc(SPP1_Macro_sig_test)) %>% 
  slice_head(n = num_rows)

#all
ggplot(final_result_df, aes(y = SPP1_Macro_sig_test, x = Proliferating_sig)) +
  geom_point() +
  xlab("SPP1_Macro_sig_test") +
  ylab("Proliferating_sig") +
  ggtitle("Signal Scatter Plot")+
  geom_smooth(method = "lm", se = FALSE)


ggplot(selected_rows, aes(x = SPP1_Macro_sig_test, y = Proliferating_sig)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  # xlab("SPP1_Macro_sig_test") +
  # ylab("Proliferating_sig") +
  ggtitle("Signal Scatter Plot with Regression Line")


library(ggstatsplot)
##利用该包进行绘制HMGA1相关性基因的相关系数求解，散点图的绘制 
#Figure_4B 1
ggscatterstats(data =as.data.frame(selected_rows), 
               y = SPP1_Macro_sig_test, #选择其他目的基因和DTL的相关性。
               x = P6_Endo_sig_test,#选择DTL
               centrality.para = "mean",                              
               margins = "both",                                         
               xfill = "#CCAF53", 
               yfill = "#81B4B2",  
               marginal.type = "histogram",
               title = "Relationship between SPP1_Macro_sig_test and P6_Endo_sig_test")



ggscatterstats(data =as.data.frame(selected_rows), 
               x = SPP1_Macro_sig_test, #选择其他目的基因和DTL的相关性。
               y = Proliferating_sig,#选择DTL
               centrality.para = "mean",                              
               margins = "both",                                         
               xfill = "#CCAF53", 
               yfill = "#81B4B2",  
               marginal.type = "histogram",
               title = "Relationship between SPP1_Macro_sig_test and Proliferating_sig")
cor(selected_rows$SPP1_Macro_sig_test, selected_rows$Proliferating_sig, method = "spearman") 

pdf("cor_spp1sig_prfsig.pdf",height = 6,width = 6)
ggscatterstats(data =as.data.frame(selected_rows), 
               x = SPP1_Macro_sig_test, #选择其他目的基因和DTL的相关性。
               y = Proliferating_sig,#选择DTL
               centrality.para = "mean",                              
               margins = "both",                                         
               xfill = "#CCAF53", 
               yfill = "#81B4B2",  
               marginal.type = "histogram",
               title = "Relationship between SPP1_Macro_sig_test and Proliferating_sig")
dev.off()
#最佳比例判别式####
library(dplyr)
# 创建一个空的数据框来存储结果
cor_df <- data.frame(n = numeric(), correlation_spearman = numeric())
# 生成一系列的n值
n_values <- seq(0.01, 0.3, by = 0.02)

for (n in n_values) {
  
  # 计算要提取的行数
  num_rows <- ceiling(n * nrow(final_result_df))
  
  # 提取前n%的行
  selected_rows <- final_result_df %>% 
    arrange(desc(SPP1_Macro_sig_test)) %>% 
    slice_head(n = num_rows)
  
  # 计算Spearman相关系数
  correlation_spearman <- cor(selected_rows$SPP1_Macro_sig_test, selected_rows$Proliferating_sig, method = "spearman") 
  
  # 将结果添加到数据框中
  cor_df <- rbind(cor_df, data.frame(n = n, correlation_spearman = correlation_spearman))
}

# 查看结果
print(cor_df)

#MAIT_sig####
a <-"CCL20
SLC4A10
AL136456.1
ME1
ZBTB16
CEBPD
PLCB1
IL4I1
AFF3
NFKBIA
"
#用的是所有T细胞的mait_sig
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "MAIT_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'MAIT_sig'

SpatialFeaturePlot(larea, features ='MAIT_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("MAIT_sig.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]


#Mast_sig####
a <-"TPSAB1
TPSB2
CPA3
CTSG
KIT
MS4A2
HDC
ADCYAP1
"
#用的是P5患者的sce-endo-deg
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "Mast_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Mast_sig'

SpatialFeaturePlot(larea, features ='Mast_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Mast_sig.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]



#Other_CD8T_sig####
a <-"GZMK
CCL5
THEMIS
CD8A
GZMA
LINC01934
CD3D
TOX
TNIP3
CD8B
NELL2
CD2
CD3G
BCL11B
BICDL1
TRBC2
CLEC2D
KLRK1
PTPN22
TRAC
INPP4B
GZMH
CRTAM
CD3E
CD96
CBLB
SKAP1
ITM2A
HNRNPLL
DTHD1
FYN
PPP1R16B
NKG7
"
#用的是所有T细胞的Other_CD8T_sig
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "Other_CD8T_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Other_CD8T_sig'

SpatialFeaturePlot(larea, features ='Other_CD8T_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Other_CD8T_sig.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]
#CD4T_sig####
a <-"FAAH2
LTB
ICOS
IL7R
BATF
AL136456.1
TNFRSF4
LINC02694
IL2RA
ITK
CDC14A
TRAC
LDLRAD4
BICDL1
ANK3
CD2
ARID5B
GPR183
CD28
RGCC
IL32
DUSP16
CTLA4
CD52
TBC1D4
CAMK4
PKIA
CCR7
TRBC2
LINC00513
"
#用的是所有T细胞的CD4T_sig
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "CD4T_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'CD4T_sig'

SpatialFeaturePlot(larea, features ='CD4T_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("CD4T_sig.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]


#NK_sig####
a <-"GNLY
NKG7
KLRD1
CD247
KLRF1
GZMB
FGFBP2
AOAH
TRDC
CMC1
TXK
CCL4
MCTP2
IFNG
CCL3
PRF1
XCL2
CEMIP2
NCAM1
CST7
CCL5
SYTL3
NCALD
PLAC8
GZMH
CTSW
AREG
KLRK1
IL2RB
SAMD3
"
#用的是所有T细胞的NK_sig
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "NK_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'NK_sig'
SpatialFeaturePlot(larea, features ='NK_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("NK_sig.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]

#Naive_sig####
cd_features <- list(c("CCR7","TCF7","LEF1","SELL","CD3E","CD8D"#'Naive_Score'
))

larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "Naive_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Naive_sig'

SpatialFeaturePlot(larea, features ='Naive_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Naive_sig.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]


#Cytotoxic_sig####
cd_features <- list(c("NKG7","PRF1","CCL4","GZMA","GZMB","CST7","IFNG","GZMK","CD3E","CD8D"#'Cytotoxic_Score',"FGFBP2"
))
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "Cytotoxic_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Cytotoxic_sig'

SpatialFeaturePlot(larea, features ='Cytotoxic_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Cytotoxic_sig.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]

#Exhausted_sig####
cd_features <- list(c("PDCD1","TIGIT","LAG3","HAVCR2","CTLA4"#'Exhausted_Score'
))
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "Exhausted_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Exhausted_sig'

SpatialFeaturePlot(larea, features ='Exhausted_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Exhausted_sig.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]

#SPP1_MAIT_colocalization####
names(larea@meta.data)
library(Seurat)
library(tidyverse)
library(ggplot2)
larea@reductions$spatial = larea@reductions$umap
larea@reductions$spatial@key = 'spatial_'
#提取坐标轴
larea@reductions$spatial@cell.embeddings = as.matrix(larea@images$Leadingedgearea@coordinates[,c(2,3)])
# #上下颠倒一次
# larea@reductions$spatial@cell.embeddings[,2] = -larea@reductions$spatial@cell.embeddings[,2]
#左右颠倒一次
#larea@reductions$spatial@cell.embeddings[,1] = -larea@reductions$spatial@cell.embeddings[,1]
colnames(larea@reductions$spatial@cell.embeddings) = c('spatial_1','spatial_2')
#绘图
p = FeaturePlot(larea, features = c("SPP1_Macro_sig_test", "MAIT_sig"), blend = TRUE,cols = c('lightgrey','blue','red'),pt.size = 1.6,reduction = 'spatial',combine = F)
for (i in 1:length(p)){
  p[[i]] = p[[i]] + theme(axis.text = element_blank(),axis.ticks=element_blank(),legend.position = 'none',axis.line = element_blank(),axis.title = element_text(size = 20),plot.title = element_text(size = 30))
}
f = CombinePlots(plots = list(p[[1]],p[[2]],p[[3]],p[[4]]), ncol = 4)
print(p[[3]])
pdf('endo_fibro.interaction.pdf',width = 25,height = 6)
print(f)
dev.off()
a <- print(p[[1]])
df1 <- a$data
df1[,4] <- as.character(df1[,4])
a <- print(p[[2]])
df2 <- a$data
df2[,4] <- as.character(df2[,4])

identical(rownames(df1),rownames(df2))
df <- cbind(df1,df2)
df <- df[,c(1,2,4,8)]
df$signal <- paste0(df[,3],df[,4])
df$levels <- df[,3]*df[,4]
#画图
img <- df
#图2 整个大背景黑色
#图1
ggplot(img, aes(x=spatial_1, y=spatial_2,color = signal)) +
  geom_point(size = 1.5)+scale_color_manual(values = c("00" = "#DFE2E5", "04" = "#41BEE5","09" = "#2371E2",
                                                       "40" = "#E48C85", "44" = "#88AC79","49" = "#3F9B80",
                                                       "90" = "#E71F19", "94" = "#3F9B80","99" = "#175645"))+
  
  theme_minimal() + #去掉背景
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ #去掉网格线
  theme(axis.text.x=element_blank(), #去掉y轴坐标
        axis.text.y=element_blank())+ #去掉x轴坐标
  theme(aspect.ratio = 1)
ggsave("plot1.pdf",height = 6,width = 6)
#图2

ggplot(img, aes(x=spatial_1, y=spatial_2,color = signal)) +
  geom_point(size = 1.5)+scale_color_manual(values = c("00" = "#DFE2E5", "04" = "#D6DDE3","09" = "#D6DDE3",
                                                       "40" = "#D6DDE3", "44" = "#AEBBCB","49" = "#5975A4",
                                                       "90" = "#D6DDE3", "94" = "#5975A4","99" = "#124D81"))+
  
  theme_minimal() + #去掉背景
  theme(panel.grid=element_blank(),aspect.ratio = 1)+ #去掉网格线
  theme(axis.text.x=element_blank(), #去掉y轴坐标
        axis.text.y=element_blank())+ #去掉x轴坐标
  theme(aspect.ratio = 1)
ggsave("SPP1_MAIT_colocalization.pdf",height = 6,width = 6)

#TLS_sig####
cd_features <- list(c("FDCSP", "CR2", "CXCL13", "LTF", 
                      "CD52", "MS4A1", "CCL19", 
                      "LTB", "CORO1A", 
                      "CD79B", "TXNIP", "CD19", "LIMD2", 
                      "CD37", "ARHGAP45", "BLK", "TMC8", "CCL21",
                      "PTPN6", "ATP2A3", "IGHM", "SPIB", "TMSB4X",
                      "CXCR4", "NCF1", "CD79A", "ARHGAP9", "DEF6",
                      "EVL", "TBC1D10C", "RASAL3", "INPP5D", "RNASET2",
                      "RASGRP2", "TNFRSF13C", "RAC2", "CD22", "ARHGEF1",
                      "TRAF3IP3", "HLA-DQB1", "CD53",
                      "ARHGAP4", "TRBC2", "POU2AF1", "TRAF5", "OGA",
                      "FCRL3", "HLA-DQA1"))
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "TLS_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'TLS_sig'

SpatialFeaturePlot(larea, features ='TLS_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("TLS_sig.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]

#SPP1—MAIT共定位####
names(larea@meta.data)
df<- larea@meta.data
Key(object =larea@images$Leadingedgearea)
img<- GetTissueCoordinates(larea)
head(img)
identical(rownames(img),rownames(df))
df<- cbind(df,img)
colnames(df)
#提取关键信息#
df_raw <- df[,c("MAIT_sig","SPP1_Macro_sig_test","imagerow","imagecol")]

#将各自信号四等分，标记为1，2，3，4
# 使用循环逐列执行代码
for (col in colnames(df_raw)[1:2]) {
  # 执行针对当前列的代码
  # 这里只是一个示例，你可以根据具体需求进行相应操作
  df_raw[[col]] <- cut(df_raw[[col]], breaks = 4, labels = c( 1, 2, 3, 4))
  df_raw[[col]] <- as.numeric(df_raw[[col]])
}
# 输出结果
print(df_raw)
table(df_raw$MAIT_sig)
df_raw[,1:2] <- df_raw[,1:2]-1 
df_output<- data.frame(signal=df_raw[,1] * df_raw[,2] ,df_raw[,3:4])
table(df_output$signal)
ggplot(df_output, aes(x = imagecol, y = 600 - imagerow, color = signal)) +
  geom_point(size = 1.5) +
  theme_minimal() +
  theme(panel.grid = element_blank()) +
  theme(axis.text.x = element_blank(), axis.text.y = element_blank()) +
  scale_color_gradient2(low="black",high="#063A94",mid="#F2F3F4")+
  theme(axis.text.x=element_blank(), #去掉y轴坐标
        axis.text.y=element_blank()) +#去掉x轴坐标
  labs(x="",y = "",title = "")+theme(aspect.ratio = 1)+
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",#图例方向
        legend.position = "top"#图例位置
  )
ggsave("MAIT_SPP1_co_localization.pdf",height = 6,width = 6)



#CAF_sig####
a <-"COMP
CST1
VCAN
LUM
POSTN
INHBA
TSHZ2
ITGBL1
CTHRC1
PTGDS
COL8A1
THBS2
COL10A1
SULF1
COL1A1
SUGCT
CXCL14
RARRES2
KCND2
PLXDC2
NTM
PCDH7
LTBP2
MMP11
COL6A3
LSAMP
LXN
COL1A2
RARRES1
AEBP1
BICC1
FAP
BNC2
NAV3
S100A10
COL11A1
CDH11
ISLR
MMP2
NOX4
"
#用的是P5患者的sce-endo-deg
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'CAF_sig'

SpatialFeaturePlot(larea, features ='CAF_sig', alpha = c(-0.5, 1.5))+theme(aspect.ratio = 1)
ggsave("CAF_sig.pdf",height = 6,width = 6)
names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]



#Myo_sig####
a <-"ADIRF
MUSTN1
MYH11
PDK4
SPARCL1
RGS6
ADAMTS9
C11orf96
ADAMTS1
RCAN2
RERGL
IGLC2
CTNNA3
NTRK3
PTP4A3
ADAMTS4
SOD3
CRIP1
FABP4
TAGLN
BCAM
RHOB
SLIT3
MT1M
CRISPLD2
RYR2
ACTA2
TINAGL1
ZFHX3
SLC7A2
KLF2
GADD45B
NET1
HES4
DGKG
MYL9
PLN
YBX3
PLAC9
ID4
"
#用的是P5患者的sce-endo-deg
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Myo_sig'

SpatialFeaturePlot(larea, features ='Myo_sig', alpha = c(-0.5, 1.5))+theme(aspect.ratio = 1)
ggsave("Myo_sig.pdf",height = 6,width = 6)
names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]
#CAFmarkers####
SpatialFeaturePlot(larea, features ="FAP", alpha = c(0.1, 1.5))
ggsave("FAP.pdf",height = 6,width = 6)
SpatialFeaturePlot(larea, features ="POSTN", alpha = c(-1, 2))
ggsave("POSTN.pdf",height = 6,width = 6)




#C02_sig####
a <-"GRM8
RGS5
THY1
PLXDC1
CCDC102B
NRG3
CYTOR
COL18A1
HIGD1B
ARHGAP26
EBF1
MIR4435-2HG
NDUFA4L2
GJC1
UACA
ADGRF5
LHFPL6
ANGPT2
TRPC6
MYO1B
GUCY1A2
HSPA6
NRXN3
PEAK1
TPPP3
CLIP2
SGIP1
NID1
EBF2
ARHGDIB
MARCKSL1
FAM13C
AC017002.5
CYGB
LAMA4
ADAP2
RAPGEF2
RNF152
OLFML2B
FRZB
"
#用的是P5患者的sce-endo-deg
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'C02_sig'

SpatialFeaturePlot(larea, features ='C02_sig', alpha = c(-1, 2))+theme(aspect.ratio = 1)
ggsave("C02_sig.pdf",height = 6,width = 6)
names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]
#选中tumor_niche导入进来####
df <- read.csv("test1.csv",header = T,row.names = 1)
colnames(larea)
identical(colnames(larea),rownames(df))
larea$test1<- df$test1
larea$test1[which(larea@meta.data$test1%in%c(""))] <- "Non_selected"
table(larea$test1)
Idents(larea) <- "test1"
SpatialDimPlot(larea, label = TRUE, label.size = 3,pt.size.factor = 1.2,stroke = 0.0)+theme(aspect.ratio = 1)
#洋葱图2####
#2倍直径试一下#
#提取出坐标信息和signature信息
df <- larea@meta.data
Key(object =larea@images$Leadingedgearea)
img<- GetTissueCoordinates(larea)
df_input <- cbind(df,img)
df_input <- df_input[which(df_input$test1 =="Tumor_niche1"),]
colnames(df_input)
df_info <- df_input[,c("imagerow","imagecol","test1")]
names(larea@meta.data)
df_info

honeycomb_matrix <- df_info[,1:2]
colnames(honeycomb_matrix) <- c("x","y")
ggplot()+
  # 绘制节点和元件
  geom_point(data = honeycomb_matrix, aes(x = x, y = y), size = 2) 

#旋转角度
angle <- -pi/2  # 例如，将角度设为 pi/4 表示逆时针旋转 45 度
# 计算旋转后的坐标点
df <- honeycomb_matrix 
df_rotated <- data.frame(
  x = df$x * cos(angle) - df$y * sin(angle),
  y = df$x * sin(angle) + df$y * cos(angle)
)
honeycomb_matrix <- df_rotated



#看一下回复了没
ggplot()+
  # 绘制节点和元件
  geom_point(data = honeycomb_matrix, aes(x = x, y = y), size = 2) 

df_info[,c(1:2)] <-  honeycomb_matrix[,c(1:2)]
colnames(df_info)[1:2] <- c("x","y")

library(concaveman)

df <-honeycomb_matrix
df <- round(df, digits = 2)
colnames(df) <- c("V1","V2")
points <- as.matrix(df)

# 使用concaveman函数找到最外围的点
outer_points <- concaveman(points)
points <- as.data.frame(points)

outer_points <- as.data.frame(outer_points)
points$coords <- paste0(points$V1,",",points$V2)
outer_points$coords <- paste0(outer_points$V1,",",outer_points$V2)
plot(points[1:2])#查看所有点
plot(outer_points[1:2])#查看所有外层点
# 去除最外层的点
inner_points <- points[!(points$coords %in% outer_points$coords), ]

plot(points[1:2])
plot(inner_points[1:2])
# 计算每一层的点
layers <- list()
layers[[1]] <- as.matrix(outer_points[1:2])

i <- 2
while (nrow(layers[[i-1]]) > 0) {
  outer_points <- concaveman(as.matrix(inner_points[1:2]))
  outer_points <- as.data.frame(outer_points)
  outer_points$coords <- paste0(outer_points$V1,",",outer_points$V2)
  tmp <- inner_points
  inner_points <- tmp[!(tmp$coords %in% outer_points$coords), ]
  layers[[i]] <- as.matrix(outer_points[1:2])
  i <- i + 1
}
#报错不用管，能跑

# 将每层坐标整理到一个data.frame()中
layer_data <- lapply(layers, as.data.frame)
names(layer_data) <- paste0("layer", seq_along(layer_data))#把list表上层数
# #看图像要去掉几层
# layer_data <- layer_data[-length(layer_data)]


# 创建一个空的列表用于存储所有的layer_data数据
layer_data_list <- list()

# 循环遍历layer1到layer10
for (i in 1:length(layer_data)) {
  # 创建一个新的layer_data数据框
  tmp <- layer_data[[i]]
  
  tmp <- unique(tmp)
  # 将每个layer_data数据框的layer列更改为对应的"layer_i"字符串
  tmp$layer <- paste0("layer_", i)
  
  # 将每个layer_data数据框添加到layer_data_list中
  layer_data_list[[i]] <- tmp
  
}

# 输出结果
print(layer_data_list)
names(layer_data_list) <- paste0("layer", seq_along(layer_data_list))




layer_df <- do.call(rbind, layer_data_list)

#洋葱图图像测试2####
library(ggplot2)
# 创建 ggplot 对象，并绘制所有点，颜色为灰色
allcolour=c("#5C1F88","#2C2380","#1B449A","#0E9094","#42B035",
            "#A0CA29","#EEEA3B","#F5C51E","#F29419","#EC641A",
            "#E71F19","#FF00FF","#FA8072","#7B68EE","#9400D3","#800080","#A0522D","#D2B48C","#D2691E","#87CEEB","#40E0D0","#5F9EA0",
            "#FF1493","#0000CD","#008B8B","#FFE4B5","#8A2BE2","#228B22","#E9967A","#4682B4","#32CD32","#F0E68C","#FFFFE0","#EE82EE",
            "#FF6347","#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887")
p <- ggplot(points, aes(V1, V2)) +
  geom_point(color = "#5C1F88", size = 3) +
  theme_minimal()
p

# 在原有图形上添加临近点并设置颜色为蓝色
p <- p + geom_point(data = layer_data$layer1, aes(V1, V2), color = "grey", size = 3)
p

p <- p + geom_point(data = layer_data$layer2, aes(V1, V2), color = "#1B449A", size = 3)
p

p <- p + geom_point(data = layer_data$layer3, aes(V1, V2), color = "#0E9094", size = 3)
p

p <- p + geom_point(data = layer_data$layer4, aes(V1, V2), color = "#42B035", size = 3)
p

p <- p + geom_point(data = layer_data$layer5, aes(V1, V2), color ="#A0CA29", size = 3)
p

p <- p + geom_point(data = layer_data$layer6, aes(V1, V2), color = "#EEEA3B", size = 3)
p

p <- p + geom_point(data = layer_data$layer7, aes(V1, V2), color = "#F5C51E", size = 3)
p

p <- p + geom_point(data = layer_data$layer8, aes(V1, V2), color = "#F29419", size = 3)
p

p <- p + geom_point(data = layer_data$layer9, aes(V1, V2), color = "#EC641A", size = 3)
p

p <- p + geom_point(data = layer_data$layer10, aes(V1, V2), color = "#E71F19", size = 3)
p

p <- p + geom_point(data = layer_data$layer11, aes(V1, V2), color = "red", size = 3)
p

p <- p + geom_point(data = layer_data$layer12, aes(V1, V2), color = "red", size = 3)
p

layer_df$coords <- paste0(layer_df$V1,",",layer_df$V2)
df_info$coords <- paste0(round(df_info$x, 2),",",round(df_info$y, 2))
df_info$cell_id <- rownames(df_info)
merge_df <- merge(df_info,layer_df,by="coords",sort = FALSE)
names(merge_df)
larea$layer <- "Non_selected"
larea$layer[match(merge_df$cell_id,colnames(larea))]<-merge_df$layer%>%as.character()
table(larea$layer)


Idents(larea) <- "layer"
SpatialDimPlot(larea,label.size = 3,pt.size.factor = 1.5,stroke = 0.0,alpha = 1)+theme(aspect.ratio = 1)
larea$layer <- factor(larea$layer,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5","layer_6","layer_7","layer_8","layer_9","layer_10","layer_11","layer_12","Non_selected"))
ggsave("layer_info.pdf",width = 7,height = 6)
P<-VlnPlot(larea,features = 'Prolif',
           pt.size = 0, adjust = 2,
           group.by = "layer")

VlnPlot(larea,features = 'Prolif',
        pt.size = 0, adjust = 2,
        group.by = "layer")
table(P$data[,2])
df <- P$data

Non_selected_layer <- c("Non_selected", "layer_11", "layer_12")

# 使用逻辑运算符和grepl函数来选择不含有"layer1"和"layer2"的行
df <- df[which( !df$ident %in% Non_selected_layer), ]
df$ident <- as.character(df$ident)
library(ggpubr)
library(ggplot2)
library(ggsci)
library(ggplot2)
df$ident <- factor(df$ident,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5","layer_6","layer_7","layer_8","layer_9","layer_10"))

ggboxplot(df,x = "ident",y = "Prolif",color = "ident")+theme(axis.text.x = element_text(angle = 90)) 
ggsave("Prolif_layer.pdf",width = 3,height = 4) 




#Stress_layer####
library(Seurat)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(limma)

cd_features <-  list(c("CD44","PROM1","CD24","SOX2","POU5F1","NANOG","ANPEP","DCLK1","LGR5","THY1"))
#修改变量名称
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Stress'

VlnPlot(larea,features = 'Stress',pt.size = 0, adjust = 2,group.by = "layer")

P<-VlnPlot(larea,features = 'Stress',
           pt.size = 0, adjust = 2,
           group.by = "layer")

VlnPlot(larea,features = 'Stress',
        pt.size = 0, adjust = 2,
        group.by = "layer")
table(P$data[,2])
df <- P$data

Non_selected_layer <- c("Non_selected", "layer_11", "layer_12")

# 使用逻辑运算符和grepl函数来选择不含有"layer1"和"layer2"的行
df <- df[which( !df$ident %in% Non_selected_layer), ]
df$ident <- as.character(df$ident)
library(ggpubr)
library(ggplot2)
library(ggsci)
library(ggplot2)
df$ident <- factor(df$ident,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5","layer_6","layer_7","layer_8","layer_9","layer_10"))

ggboxplot(df,x = "ident",y = "Stress",color = "ident")+theme(axis.text.x = element_text(angle = 90)) 
ggsave("Stress_layer.pdf",width = 3,height = 4) 

#Stemness_layer####

cd_features <-  list(c("CD44","PROM1","CD24","SOX2","POU5F1","NANOG","ANPEP","DCLK1","LGR5","THY1"))
#修改变量名称
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Stemness'

VlnPlot(larea,features = 'Stemness',pt.size = 0, adjust = 2,group.by = "layer")

P<-VlnPlot(larea,features = 'Stemness',
           pt.size = 0, adjust = 2,
           group.by = "layer")

VlnPlot(larea,features = 'Stemness',
        pt.size = 0, adjust = 2,
        group.by = "layer")
table(P$data[,2])
df <- P$data

Non_selected_layer <- c("Non_selected", "layer_11", "layer_12")

# 使用逻辑运算符和grepl函数来选择不含有"layer1"和"layer2"的行
df <- df[which( !df$ident %in% Non_selected_layer), ]
df$ident <- as.character(df$ident)
library(ggpubr)
library(ggplot2)
library(ggsci)
library(ggplot2)
df$ident <- factor(df$ident,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5","layer_6","layer_7","layer_8","layer_9","layer_10"))

ggboxplot(df,x = "ident",y = "Stemness",color = "ident")+theme(axis.text.x = element_text(angle = 90)) 
ggsave("Stemness_layer.pdf",width = 3,height = 4) 
#layer_CD44####
library(Seurat)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(limma)


genesets <- msigdbr(species = "Homo sapiens", category = "C2",subcategory = "CP:KEGG") 
genesets <- msigdbr(species = "Homo sapiens", category = "H") 
genesets <- subset(genesets, select = c("gs_name","gene_symbol")) %>% as.data.frame()
genesets <- split(genesets$gene_symbol, genesets$gs_name)
cd_features <-  list(genesets[["HALLMARK_CD44"]])


#修改变量名称
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'CD44'

VlnPlot(larea,features = 'CD44',pt.size = 0, adjust = 2,group.by = "layer")

P<-VlnPlot(larea,features = 'CD44',
           pt.size = 0, adjust = 2,
           group.by = "layer")

VlnPlot(larea,features = 'CD44',
        pt.size = 0, adjust = 2,
        group.by = "layer")
table(P$data[,2])
df <- P$data

Non_selected_layer <- c("Non_selected", "layer_11", "layer_12")

# 使用逻辑运算符和grepl函数来选择不含有"layer1"和"layer2"的行
df <- df[which( !df$ident %in% Non_selected_layer), ]
df$ident <- as.character(df$ident)
library(ggpubr)
library(ggplot2)
library(ggsci)
library(ggplot2)
df$ident <- factor(df$ident,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5","layer_6","layer_7","layer_8","layer_9","layer_10"))

ggboxplot(df,x = "ident",y = "CD44",color = "ident")+theme(axis.text.x = element_text(angle = 90)) 
ggsave("CD44_layer.pdf",width = 3,height = 4) 
#GLYCOLYSIS_layer####
library(Seurat)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(limma)


genesets <- msigdbr(species = "Homo sapiens", category = "C2",subcategory = "CP:KEGG") 
genesets <- msigdbr(species = "Homo sapiens", category = "H") 
genesets <- subset(genesets, select = c("gs_name","gene_symbol")) %>% as.data.frame()
genesets <- split(genesets$gene_symbol, genesets$gs_name)
cd_features <-  list(genesets[["HALLMARK_GLYCOLYSIS"]])

#修改变量名称
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'GLYCOLYSIS'

VlnPlot(larea,features = 'GLYCOLYSIS',pt.size = 0, adjust = 2,group.by = "layer")

P<-VlnPlot(larea,features = 'GLYCOLYSIS',
           pt.size = 0, adjust = 2,
           group.by = "layer")

VlnPlot(larea,features = 'GLYCOLYSIS',
        pt.size = 0, adjust = 2,
        group.by = "layer")
table(P$data[,2])
df <- P$data

Non_selected_layer <- c("Non_selected", "layer_11", "layer_12")

# 使用逻辑运算符和grepl函数来选择不含有"layer1"和"layer2"的行
df <- df[which( !df$ident %in% Non_selected_layer), ]
df$ident <- as.character(df$ident)
library(ggpubr)
library(ggplot2)
library(ggsci)
library(ggplot2)
df$ident <- factor(df$ident,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5","layer_6","layer_7","layer_8","layer_9","layer_10"))

ggboxplot(df,x = "ident",y = "GLYCOLYSIS",color = "ident")+theme(axis.text.x = element_text(angle = 90)) 
ggsave("GLYCOLYSIS_layer.pdf",width = 3,height = 4) 
#HYPOXIA_layer####
library(Seurat)
library(msigdbr)
library(GSVA)
library(tidyverse)
library(clusterProfiler)
library(patchwork)
library(limma)


genesets <- msigdbr(species = "Homo sapiens", category = "C2",subcategory = "CP:KEGG") 
genesets <- msigdbr(species = "Homo sapiens", category = "H") 
genesets <- subset(genesets, select = c("gs_name","gene_symbol")) %>% as.data.frame()
genesets <- split(genesets$gene_symbol, genesets$gs_name)
cd_features <-  list(genesets[["HALLMARK_HYPOXIA"]])

#修改变量名称
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'HYPOXIA'

VlnPlot(larea,features = 'HYPOXIA',pt.size = 0, adjust = 2,group.by = "layer")

P<-VlnPlot(larea,features = 'HYPOXIA',
           pt.size = 0, adjust = 2,
           group.by = "layer")

VlnPlot(larea,features = 'HYPOXIA',
        pt.size = 0, adjust = 2,
        group.by = "layer")
table(P$data[,2])
df <- P$data

Non_selected_layer <- c("Non_selected", "layer_11", "layer_12")

# 使用逻辑运算符和grepl函数来选择不含有"layer1"和"layer2"的行
df <- df[which( !df$ident %in% Non_selected_layer), ]
df$ident <- as.character(df$ident)
library(ggpubr)
library(ggplot2)
library(ggsci)
library(ggplot2)
df$ident <- factor(df$ident,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5","layer_6","layer_7","layer_8","layer_9","layer_10"))

ggboxplot(df,x = "ident",y = "HYPOXIA",color = "ident")+theme(axis.text.x = element_text(angle = 90)) 
ggsave("HYPOXIA_layer.pdf",width = 3,height = 4) 

#layer_EMT####
Idents(larea) <- "layer"
SpatialDimPlot(larea,label.size = 3,pt.size.factor = 1.5,stroke = 0.0,alpha = 1)+theme(aspect.ratio = 1)
larea$layer <- factor(larea$layer,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5","layer_6","layer_7","layer_8","layer_9","layer_10","layer_11","layer_12","Non_selected"))
ggsave("layer_info.pdf",width = 7,height = 6)
P<-VlnPlot(larea,features = 'EMT',
           pt.size = 0, adjust = 2,
           group.by = "layer")

VlnPlot(larea,features = 'EMT',
        pt.size = 0, adjust = 2,
        group.by = "layer")
table(P$data[,2])
df <- P$data

Non_selected_layer <- c("Non_selected", "layer_11", "layer_12")

# 使用逻辑运算符和grepl函数来选择不含有"layer1"和"layer2"的行
df <- df[which( !df$ident %in% Non_selected_layer), ]
df$ident <- as.character(df$ident)
library(ggpubr)
library(ggplot2)
library(ggsci)
library(ggplot2)
df$ident <- factor(df$ident,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5","layer_6","layer_7","layer_8","layer_9","layer_10"))

ggboxplot(df,x = "ident",y = "EMT",color = "ident")+theme(axis.text.x = element_text(angle = 90)) 
ggsave("EMT_layer.pdf",width = 3,height = 4) 

#B_c03_naive####
a <-"BACH2
AFF3
FOXP1
TCL1A
FCRL1
COL19A1
CEMIP2
RUBCNL
CAMK2D
PCDH9
IGHD
AUTS2
PRKCE
VAV3
NIBAN3
ST6GALNAC3
SNX9
KHDRBS2
P2RY14
MGAT5
LIX1-AS1
"
#用的是所有T细胞的B_c03_naive
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "B_c03_naive")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'B_c03_naive'
SpatialFeaturePlot(larea, features ='B_c03_naive', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("B_c03_naive.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]
#B_c01_IGHG1####
a <-"IGHG1
IGKC
IGHG4
IGHGP
IGLC2
IGLC3
IGHG3
IGLC1
SSR4
IGHG2
XBP1
MZB1
DERL3
PRDX4
IGLV3-1
FKBP11
IGHA1
IGKV4-1
JSRP1
CD63
ITM2C
CYTOR
JCHAIN
SEC11C
RRBP1
"
#用的是所有T细胞的B_c01_IGHG1
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "B_c01_IGHG1")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'B_c01_IGHG1'
SpatialFeaturePlot(larea, features ='B_c01_IGHG1', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("B_c01_IGHG1.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]
cd_features <- list(c("FDCSP", "CR2", "CXCL13", "LTF", 
                      "CD52", "MS4A1", "CCL19", 
                      "LTB", "CORO1A", 
                      "CD79B", "TXNIP", "CD19", "LIMD2", 
                      "CD37", "ARHGAP45", "BLK", "TMC8", "CCL21",
                      "PTPN6", "ATP2A3", "IGHM", "SPIB", "TMSB4X",
                      "CXCR4", "NCF1", "CD79A", "ARHGAP9", "DEF6",
                      "EVL", "TBC1D10C", "RASAL3", "INPP5D", "RNASET2",
                      "RASGRP2", "TNFRSF13C", "RAC2", "CD22", "ARHGEF1",
                      "TRAF3IP3", "HLA-DQB1", "CD53",
                      "ARHGAP4", "TRBC2", "POU2AF1", "TRAF5", "OGA",
                      "FCRL3", "HLA-DQA1"))
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "TLS_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'TLS_sig'

SpatialFeaturePlot(larea, features ='TLS_sig', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("TLS_sig.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]

#B_c04_IGHA1####
a <-"JCHAIN
IGHA1
TXNDC5
PPIB
FNDC3B
IGHA2
HSP90B1
CD38
MAN1A1
PRDM1
CCDC88A
GLCCI1
SUB1
SLC44A1
TXNDC11
ANKRD28
MZB1
AL589693.1
TP63
ELL2
"
#用的是所有T细胞的B_c04_IGHA1
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "B_c04_IGHA1")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'B_c04_IGHA1'
SpatialFeaturePlot(larea, features ='B_c04_IGHA1', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("B_c04_IGHA1.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]

#B_c02_memory####
a <-"ARHGAP24
BANK1
LTB
HLA-DRA
MS4A1
RIPOR2
HLA-DPB1
GPR183
TMSB4X
CD52
MACROD2
PDE4D
HLA-DQA1
CRIP1
ITGB1
KYNU
HLA-DRB5
SOX5
HLA-DPA1
ANK3
CD74
HLA-DQB1
SNED1
CD83
"
#用的是所有T细胞的B_c02_memory
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "B_c02_memory")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'B_c02_memory'
SpatialFeaturePlot(larea, features ='B_c02_memory', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("B_c02_memory.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]


#Neu_c2_IFIT1####
a <-"CXCL8
G0S2
S100A8
AQP9
PHACTR1
S100A9
IFIT3
ISG15
IFIT2
RSAD2
IFIT1
DDX58
EPSTI1
IFI6
HERC5
GBP5
GBP1
MT2A
IFI44L
DDX60L
OASL
GBP2
PROK2
"
#用的是所有T细胞的Neu_c2_IFIT1
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "Neu_c2_IFIT1")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Neu_c2_IFIT1'
SpatialFeaturePlot(larea, features ='Neu_c2_IFIT1', alpha = c(0.5, 1))+theme(aspect.ratio = 1)
ggsave("Neu_c2_IFIT1.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]

#Neu_c1_ACSL1####
a <-"S100A12
ACSL1
PROK2
PADI4
S100P
BASP1
S100A4
SRPK1
DYSF
SAMSN1
PTGS2
VIM
LYZ
KCNJ15
FCN1
RUBCNL
S100A6
AQP9
TSPO
S100A8
MAP4K4
PGLYRP1
FRMD4B
FAM107B
FOXP1
CPD
MMP9
HSP90AB1
CTSC
SQSTM1
RAB20
RHOH
CCL3
VEGFA
TPK1
TANK
SLC25A13
HSP90AA1
HSPH1
HIF1A-AS3
"
#用的是所有T细胞的Neu_c1_ACSL1
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "Neu_c1_ACSL1")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'Neu_c1_ACSL1'
SpatialFeaturePlot(larea, features ='Neu_c1_ACSL1', alpha = c(0, 1.5))+theme(aspect.ratio = 1)
ggsave("Neu_c1_ACSL1.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]
#cDC1####
a <-"CLNK
CADM1
CLEC9A
DNASE1L3
C1orf54
WDFY4
IDO1
RUBCNL
CPNE3
RAB7B
MIR924HG
AC099560.1
XCR1
CCDC26
SDK1
THRB
C1orf21
"
#用的是所有T细胞的cDC1
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "cDC1")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'cDC1'
SpatialFeaturePlot(larea, features ='cDC1', alpha = c(-1, 1))+theme(aspect.ratio = 1)
ggsave("cDC1.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]
#CD8_naive####
a <-"ANK3
BACH2
IFNG-AS1
NELL2
LEF1
PDE3B
CCR7
PCAT1
SERINC5
GPR183
ARHGAP15
EPHA4
FOXP1
P2RY8
CDC14A
CASK
IL7R
BICDL1
NIBAN1
PGAP1
MCUB
TCF7
LMNA
TAFA1
NR3C2
PATJ
RIPOR2
CAMK4
MAML2
AKT3
RASGRF2
MGAT5
IMMP2L
DOCK9
CMSS1
CD55
SLCO3A1
INPP4B
ANTXR2
"
#用的是所有T细胞的CD8_naive
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "CD8_naive")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'CD8_naive'
SpatialFeaturePlot(larea, features ='CD8_naive', alpha = c(-1, 1))+theme(aspect.ratio = 1)
ggsave("CD8_naive.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]

#TLS_sig####
cd_features <- list(c("FDCSP", "CR2", "CXCL13", "LTF", 
                      "CD52", "MS4A1", "CCL19", 
                      "LTB", "CORO1A", 
                      "CD79B", "TXNIP", "CD19", "LIMD2", 
                      "CD37", "ARHGAP45", "BLK", "TMC8", "CCL21",
                      "PTPN6", "ATP2A3", "IGHM", "SPIB", "TMSB4X",
                      "CXCR4", "NCF1", "CD79A", "ARHGAP9", "DEF6",
                      "EVL", "TBC1D10C", "RASAL3", "INPP5D", "RNASET2",
                      "RASGRP2", "TNFRSF13C", "RAC2", "CD22", "ARHGEF1",
                      "TRAF3IP3", "HLA-DQB1", "CD53",
                      "ARHGAP4", "TRBC2", "POU2AF1", "TRAF5", "OGA",
                      "FCRL3", "HLA-DQA1"))
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "TLS_sig")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'TLS_sig'

SpatialFeaturePlot(larea, features ='TLS_sig', alpha = c(-0.5, 1.5))+theme(aspect.ratio = 1)
ggsave("TLS_sig.pdf",height = 6,width = 6)
#cDC1_CD8_naive共定位####
names(larea@meta.data)
df<- larea@meta.data
Key(object =larea@images$Leadingedgearea)
img<- GetTissueCoordinates(larea)
head(img)
identical(rownames(img),rownames(df))
df<- cbind(df,img)
colnames(df)
#提取关键信息#
df_raw <- df[,c("cDC1","CD8_naive","imagerow","imagecol")]

#将各自信号四等分，标记为1，2，3，4
# 使用循环逐列执行代码
for (col in colnames(df_raw)[1:2]) {
  # 执行针对当前列的代码
  # 这里只是一个示例，你可以根据具体需求进行相应操作
  df_raw[[col]] <- cut(df_raw[[col]], breaks = 4, labels = c( 1, 2, 3, 4))
  df_raw[[col]] <- as.numeric(df_raw[[col]])
}
# 输出结果
print(df_raw)
table(df_raw$cDC1)
df_raw[,1:2] <- df_raw[,1:2]-1 
df_output<- data.frame(signal=df_raw[,1] * df_raw[,2] ,df_raw[,3:4])
table(df_output$signal)
ggplot(df_output, aes(x = imagecol, y = 600 - imagerow, color = signal)) +
  geom_point(size = 1.5) +
  theme_minimal() +
  theme(panel.grid = element_blank()) +
  theme(axis.text.x = element_blank(), axis.text.y = element_blank()) +
  scale_color_gradient2(low="black",high="#063A94",mid="#F2F3F4")+
  theme(axis.text.x=element_blank(), #去掉y轴坐标
        axis.text.y=element_blank()) +#去掉x轴坐标
  labs(x="",y = "",title = "")+theme(aspect.ratio = 1)+
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",#图例方向
        legend.position = "top"#图例位置
  )
ggsave("cDC1_CD8naive_binary_signal.pdf",height = 6,width = 6)


#TLS_sig_CD8_naive共定位####
names(larea@meta.data)
df<- larea@meta.data
Key(object =larea@images$Leadingedgearea)
img<- GetTissueCoordinates(larea)
head(img)
identical(rownames(img),rownames(df))
df<- cbind(df,img)
colnames(df)
#提取关键信息#
df_raw <- df[,c("TLS_sig","CD8_naive","imagerow","imagecol")]

#将各自信号四等分，标记为1，2，3，4
# 使用循环逐列执行代码
for (col in colnames(df_raw)[1:2]) {
  # 执行针对当前列的代码
  # 这里只是一个示例，你可以根据具体需求进行相应操作
  df_raw[[col]] <- cut(df_raw[[col]], breaks = 4, labels = c( 1, 2, 3, 4))
  df_raw[[col]] <- as.numeric(df_raw[[col]])
}
# 输出结果
print(df_raw)
table(df_raw$TLS_sig)
df_raw[,1:2] <- df_raw[,1:2]-1 
df_output<- data.frame(signal=df_raw[,1] * df_raw[,2] ,df_raw[,3:4])
table(df_output$signal)
ggplot(df_output, aes(x = imagecol, y = 600 - imagerow, color = signal)) +
  geom_point(size = 1.5) +
  theme_minimal() +
  theme(panel.grid = element_blank()) +
  theme(axis.text.x = element_blank(), axis.text.y = element_blank()) +
  scale_color_gradient2(low="black",high="#063A94",mid="#F2F3F4")+
  theme(axis.text.x=element_blank(), #去掉y轴坐标
        axis.text.y=element_blank()) +#去掉x轴坐标
  labs(x="",y = "",title = "")+theme(aspect.ratio = 1)+
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",#图例方向
        legend.position = "top"#图例位置
  )
ggsave("TLS_sig_CD8naive_binary_signal.pdf",height = 6,width = 6)



#P6_fibro_sig_test_P6_Endo_sig_test共定位####
names(larea@meta.data)
df<- larea@meta.data
Key(object =larea@images$Leadingedgearea)
img<- GetTissueCoordinates(larea)
head(img)
identical(rownames(img),rownames(df))
df<- cbind(df,img)
colnames(df)
#提取关键信息#
df_raw <- df[,c("P6_fibro_sig_test","P6_Endo_sig_test","imagerow","imagecol")]

#将各自信号四等分，标记为1，2，3，4
# 使用循环逐列执行代码
for (col in colnames(df_raw)[1:2]) {
  # 执行针对当前列的代码
  # 这里只是一个示例，你可以根据具体需求进行相应操作
  df_raw[[col]] <- cut(df_raw[[col]], breaks = 4, labels = c( 1, 2, 3, 4))
  df_raw[[col]] <- as.numeric(df_raw[[col]])
}
# 输出结果
print(df_raw)
table(df_raw$P6_fibro_sig_test)
df_raw[,1:2] <- df_raw[,1:2]-1 
df_output<- data.frame(signal=df_raw[,1] * df_raw[,2] ,df_raw[,3:4])
table(df_output$signal)
ggplot(df_output, aes(x = imagecol, y = 600 - imagerow, color = signal)) +
  geom_point(size = 1.5) +
  theme_minimal() +
  theme(panel.grid = element_blank()) +
  theme(axis.text.x = element_blank(), axis.text.y = element_blank()) +
  scale_color_gradient2(low="black",high="#063A94",mid="#F2F3F4")+
  theme(axis.text.x=element_blank(), #去掉y轴坐标
        axis.text.y=element_blank()) +#去掉x轴坐标
  labs(x="",y = "",title = "")+theme(aspect.ratio = 1)+
  theme(legend.background = element_rect(fill = 'white', color = 'white'),
        legend.direction = "horizontal",#图例方向
        legend.position = "top"#图例位置
  )
ggsave("P6_fibro_sig_test_CD8naive_binary_signal.pdf",height = 6,width = 6)


#SPP1markers####
SpatialFeaturePlot(larea, features ="MMP12", alpha = c(0, 1))+theme(aspect.ratio = 1)
ggsave("MMP12_expr_ST.pdf",width = 5,height = 5)
SpatialFeaturePlot(larea, features ="CCL18", alpha = c(-0.5, 3))+theme(aspect.ratio = 1)
ggsave("CCL18_expr_ST.pdf",width = 5,height = 5)
SpatialFeaturePlot(larea, features ="MARCO", alpha = c(-1, 2))+theme(aspect.ratio = 1)
ggsave("MARCO_expr_ST.pdf",width = 5,height = 5)
SpatialFeaturePlot(larea, features ="INHBA", alpha = c(-0.5, 2))+theme(aspect.ratio = 1)
ggsave("INHBA_expr_ST.pdf",width = 5,height = 5)
SpatialFeaturePlot(larea, features ="TREM2", alpha = c(-0.5, 2))+theme(aspect.ratio = 1)
ggsave("INHBA_expr_ST.pdf",width = 5,height = 5)

gene_list <- c("INHBA", "CD68", "MMP12","CCL18","IL1B","FOLR2","C1QA","MARCO")
for (gene in gene_list) {
  plot <- SpatialFeaturePlot(larea, features = gene, alpha = c(-0.5, 1)) + theme(aspect.ratio = 1)
  filename <- paste(gene, "_expr_ST.pdf", sep = "")
  ggsave(filename, plot, width = 5, height = 5)
}

#选中tumor_niche2导入进来####
df <- read.csv("tumor_niche2.csv",header = T,row.names = 1)
colnames(larea)
identical(colnames(larea),rownames(df))
larea$test1<- df$tumor_niche2
larea$test1[which(larea@meta.data$test1%in%c(""))] <- "Non_selected"
table(larea$test1)
Idents(larea) <- "test1"
SpatialDimPlot(larea, 
               #label = TRUE, 
               label.size = 3,pt.size.factor = 1.2,stroke = 0.0)+theme(aspect.ratio = 1)
#洋葱图2####
#2倍直径试一下#
#提取出坐标信息和signature信息
df <- larea@meta.data
Key(object =larea@images$Leadingedgearea)
img<- GetTissueCoordinates(larea)
df_input <- cbind(df,img)
df_input <- df_input[which(df_input$test1 =="tumor_niche2"),]
colnames(df_input)
df_info <- df_input[,c("imagerow","imagecol","test1")]
names(larea@meta.data)
df_info

honeycomb_matrix <- df_info[,1:2]
colnames(honeycomb_matrix) <- c("x","y")
ggplot()+
  # 绘制节点和元件
  geom_point(data = honeycomb_matrix, aes(x = x, y = y), size = 2) 

#旋转角度
angle <- -pi/2  # 例如，将角度设为 pi/4 表示逆时针旋转 45 度
# 计算旋转后的坐标点
df <- honeycomb_matrix 
df_rotated <- data.frame(
  x = df$x * cos(angle) - df$y * sin(angle),
  y = df$x * sin(angle) + df$y * cos(angle)
)
honeycomb_matrix <- df_rotated



#看一下回复了没
ggplot()+
  # 绘制节点和元件
  geom_point(data = honeycomb_matrix, aes(x = x, y = y), size = 5) 

df_info[,c(1:2)] <-  honeycomb_matrix[,c(1:2)]
colnames(df_info)[1:2] <- c("x","y")

library(concaveman)

df <-honeycomb_matrix
df <- round(df, digits = 2)
colnames(df) <- c("V1","V2")
points <- as.matrix(df)

# 使用concaveman函数找到最外围的点
outer_points <- concaveman(points)
points <- as.data.frame(points)

outer_points <- as.data.frame(outer_points)
points$coords <- paste0(points$V1,",",points$V2)
outer_points$coords <- paste0(outer_points$V1,",",outer_points$V2)
plot(points[1:2])#查看所有点
plot(outer_points[1:2])#查看所有外层点
# 去除最外层的点
inner_points <- points[!(points$coords %in% outer_points$coords), ]

plot(points[1:2])
plot(inner_points[1:2])
# 计算每一层的点
layers <- list()
layers[[1]] <- as.matrix(outer_points[1:2])

i <- 2
while (nrow(layers[[i-1]]) > 0) {
  outer_points <- concaveman(as.matrix(inner_points[1:2]))
  outer_points <- as.data.frame(outer_points)
  outer_points$coords <- paste0(outer_points$V1,",",outer_points$V2)
  tmp <- inner_points
  inner_points <- tmp[!(tmp$coords %in% outer_points$coords), ]
  layers[[i]] <- as.matrix(outer_points[1:2])
  i <- i + 1
}
#报错不用管，能跑

# 将每层坐标整理到一个data.frame()中
layer_data <- lapply(layers, as.data.frame)
names(layer_data) <- paste0("layer", seq_along(layer_data))#把list表上层数
# #看图像要去掉几层,运行几次
# layer_data <- layer_data[-length(layer_data)]

# 创建一个空的列表用于存储所有的layer_data数据
layer_data_list <- list()

# 循环遍历layer1到layer10
for (i in 1:length(layer_data)) {
  # 创建一个新的layer_data数据框
  tmp <- layer_data[[i]]
  
  tmp <- unique(tmp)
  # 将每个layer_data数据框的layer列更改为对应的"layer_i"字符串
  tmp$layer <- paste0("layer_", i)
  
  # 将每个layer_data数据框添加到layer_data_list中
  layer_data_list[[i]] <- tmp
  
}

# 输出结果
print(layer_data_list)
names(layer_data_list) <- paste0("layer", seq_along(layer_data_list))




layer_df <- do.call(rbind, layer_data_list)

#洋葱图图像测试2####
library(ggplot2)
# 创建 ggplot 对象，并绘制所有点，颜色为灰色
allcolour=c("#5C1F88","#2C2380","#1B449A","#0E9094","#42B035",
            "#A0CA29","#EEEA3B","#F5C51E","#F29419","#EC641A",
            "#E71F19","#FF00FF","#FA8072","#7B68EE","#9400D3","#800080","#A0522D","#D2B48C","#D2691E","#87CEEB","#40E0D0","#5F9EA0",
            "#FF1493","#0000CD","#008B8B","#FFE4B5","#8A2BE2","#228B22","#E9967A","#4682B4","#32CD32","#F0E68C","#FFFFE0","#EE82EE",
            "#FF6347","#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887")
p <- ggplot(points, aes(V1, V2)) +
  geom_point(color = "#5C1F88", size = 3) +
  theme_minimal()
p

# 在原有图形上添加临近点并设置颜色为蓝色
p <- p + geom_point(data = layer_data$layer1, aes(V1, V2), color = "#194190", size = 3)
p

p <- p + geom_point(data = layer_data$layer2, aes(V1, V2), color = "#45A738", size = 3)
p

p <- p + geom_point(data = layer_data$layer3, aes(V1, V2), color = "#E5E244", size = 3)
p

p <- p + geom_point(data = layer_data$layer4, aes(V1, V2), color = "#E99022", size = 3)
p

p <- p + geom_point(data = layer_data$layer5, aes(V1, V2), color ="#E71F19", size = 3)
p
ggsave("tumor_niche2.pdf",height = 3,width = 2)

layer_df$coords <- paste0(layer_df$V1,",",layer_df$V2)
df_info$coords <- paste0(round(df_info$x, 2),",",round(df_info$y, 2))
df_info$cell_id <- rownames(df_info)
merge_df <- merge(df_info,layer_df,by="coords",sort = FALSE)
names(merge_df)

larea$layer2 <- "Non_selected"
larea$layer2[match(merge_df$cell_id,colnames(larea))]<-merge_df$layer%>%as.character()
table(larea$layer2)


Idents(larea) <- "layer2"
SpatialDimPlot(larea,label.size = 3,pt.size.factor = 1.5,stroke = 0.0,alpha = 1)+theme(aspect.ratio = 1)
larea$layer2 <- factor(larea$layer2,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5","Non_selected"))
ggsave("layer_info.pdf",width = 7,height = 6)
P<-VlnPlot(larea,features = 'Prolif',
           pt.size = 0, adjust = 2,
           group.by = "layer2")

VlnPlot(larea,features = 'Prolif',
        pt.size = 0, adjust = 2,
        group.by = "layer2")
table(P$data[,2])
df <- P$data

Non_selected_layer <- c("Non_selected", "layer_11", "layer_12")

# 使用逻辑运算符和grepl函数来选择不含有"layer1"和"layer2"的行
df <- df[which( !df$ident %in% Non_selected_layer), ]
df$ident <- as.character(df$ident)
library(ggpubr)
library(ggplot2)
library(ggsci)
library(ggplot2)
df$ident <- factor(df$ident,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5"))

ggboxplot(df,x = "ident",y = "Prolif",color = "ident")+theme(axis.text.x = element_text(angle = 90)) 
ggsave("Prolif_layer2.pdf",width = 2,height = 4) 

#选中tumor_niche3导入进来####
df <- read.csv("tumor_niche3.csv",header = T,row.names = 1)
colnames(larea)
identical(colnames(larea),rownames(df))
larea$test2<- df$tumor_niche3
larea$test2[which(larea@meta.data$test2%in%c(""))] <- "Non_selected"
table(larea$test2)
Idents(larea) <- "test2"
SpatialDimPlot(larea, 
               #label = TRUE, 
               label.size = 3,pt.size.factor = 1.2,stroke = 0.0)+theme(aspect.ratio = 1)
#洋葱图2####
#2倍直径试一下#
#提取出坐标信息和signature信息
df <- larea@meta.data
Key(object =larea@images$Leadingedgearea)
img<- GetTissueCoordinates(larea)
df_input <- cbind(df,img)
df_input <- df_input[which(df_input$test2 =="tumor_niche3"),]
colnames(df_input)
df_info <- df_input[,c("imagerow","imagecol","test2")]
names(larea@meta.data)
df_info

honeycomb_matrix <- df_info[,1:2]
colnames(honeycomb_matrix) <- c("x","y")
ggplot()+
  # 绘制节点和元件
  geom_point(data = honeycomb_matrix, aes(x = x, y = y), size = 2) 

#旋转角度
angle <- -pi/2  # 例如，将角度设为 pi/4 表示逆时针旋转 45 度
# 计算旋转后的坐标点
df <- honeycomb_matrix 
df_rotated <- data.frame(
  x = df$x * cos(angle) - df$y * sin(angle),
  y = df$x * sin(angle) + df$y * cos(angle)
)
honeycomb_matrix <- df_rotated



#看一下回复了没
ggplot()+
  # 绘制节点和元件
  geom_point(data = honeycomb_matrix, aes(x = x, y = y), size = 5) 

df_info[,c(1:2)] <-  honeycomb_matrix[,c(1:2)]
colnames(df_info)[1:2] <- c("x","y")

library(concaveman)

df <-honeycomb_matrix
df <- round(df, digits = 2)
colnames(df) <- c("V1","V2")
points <- as.matrix(df)

# 使用concaveman函数找到最外围的点
outer_points <- concaveman(points)
points <- as.data.frame(points)

outer_points <- as.data.frame(outer_points)
points$coords <- paste0(points$V1,",",points$V2)
outer_points$coords <- paste0(outer_points$V1,",",outer_points$V2)
plot(points[1:2])#查看所有点
plot(outer_points[1:2])#查看所有外层点
# 去除最外层的点
inner_points <- points[!(points$coords %in% outer_points$coords), ]

plot(points[1:2])
plot(inner_points[1:2])
# 计算每一层的点
layers <- list()
layers[[1]] <- as.matrix(outer_points[1:2])

i <- 2
while (nrow(layers[[i-1]]) > 0) {
  outer_points <- concaveman(as.matrix(inner_points[1:2]))
  outer_points <- as.data.frame(outer_points)
  outer_points$coords <- paste0(outer_points$V1,",",outer_points$V2)
  tmp <- inner_points
  inner_points <- tmp[!(tmp$coords %in% outer_points$coords), ]
  layers[[i]] <- as.matrix(outer_points[1:2])
  i <- i + 1
}
#报错不用管，能跑

# 将每层坐标整理到一个data.frame()中
layer_data <- lapply(layers, as.data.frame)
names(layer_data) <- paste0("layer", seq_along(layer_data))#把list表上层数
# #看图像要去掉几层,运行几次
# layer_data <- layer_data[-length(layer_data)]

# 创建一个空的列表用于存储所有的layer_data数据
layer_data_list <- list()

# 循环遍历layer1到layer10
for (i in 1:length(layer_data)) {
  # 创建一个新的layer_data数据框
  tmp <- layer_data[[i]]
  
  tmp <- unique(tmp)
  # 将每个layer_data数据框的layer列更改为对应的"layer_i"字符串
  tmp$layer <- paste0("layer_", i)
  
  # 将每个layer_data数据框添加到layer_data_list中
  layer_data_list[[i]] <- tmp
  
}

# 输出结果
print(layer_data_list)
names(layer_data_list) <- paste0("layer", seq_along(layer_data_list))




layer_df <- do.call(rbind, layer_data_list)

#洋葱图图像测试2####
library(ggplot2)
# 创建 ggplot 对象，并绘制所有点，颜色为灰色
allcolour=c("#5C1F88","#2C2380","#1B449A","#0E9094","#42B035",
            "#A0CA29","#EEEA3B","#F5C51E","#F29419","#EC641A",
            "#E71F19","#FF00FF","#FA8072","#7B68EE","#9400D3","#800080","#A0522D","#D2B48C","#D2691E","#87CEEB","#40E0D0","#5F9EA0",
            "#FF1493","#0000CD","#008B8B","#FFE4B5","#8A2BE2","#228B22","#E9967A","#4682B4","#32CD32","#F0E68C","#FFFFE0","#EE82EE",
            "#FF6347","#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887")
p <- ggplot(points, aes(V1, V2)) +
  geom_point(color = "#5C1F88", size = 3) +
  theme_minimal()
p

# 在原有图形上添加临近点并设置颜色为蓝色
p <- p + geom_point(data = layer_data$layer1, aes(V1, V2), color = "#194190", size = 3)
p

p <- p + geom_point(data = layer_data$layer2, aes(V1, V2), color = "#45A738", size = 3)
p

p <- p + geom_point(data = layer_data$layer3, aes(V1, V2), color = "#E5E244", size = 3)
p

p <- p + geom_point(data = layer_data$layer4, aes(V1, V2), color = "#E99022", size = 3)
p

p <- p + geom_point(data = layer_data$layer5, aes(V1, V2), color ="#E71F19", size = 3)
p
ggsave("tumor_niche3.pdf",height = 2.6,width = 1.8)

layer_df$coords <- paste0(layer_df$V1,",",layer_df$V2)
df_info$coords <- paste0(round(df_info$x, 2),",",round(df_info$y, 2))
df_info$cell_id <- rownames(df_info)
merge_df <- merge(df_info,layer_df,by="coords",sort = FALSE)
names(merge_df)

larea$layer3 <- "Non_selected"
larea$layer3[match(merge_df$cell_id,colnames(larea))]<-merge_df$layer%>%as.character()
table(larea$layer3)


Idents(larea) <- "layer3"
SpatialDimPlot(larea,label.size = 3,pt.size.factor = 1.5,stroke = 0.0,alpha = 1)+theme(aspect.ratio = 1)
larea$layer3 <- factor(larea$layer3,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5","Non_selected"))
ggsave("layer_info.pdf",width = 7,height = 6)
P<-VlnPlot(larea,features = 'Prolif',
           pt.size = 0, adjust = 2,
           group.by = "layer3")

VlnPlot(larea,features = 'Prolif',
        pt.size = 0, adjust = 2,
        group.by = "layer3")
table(P$data[,2])
df <- P$data

Non_selected_layer <- c("Non_selected", "layer_11", "layer_12")

# 使用逻辑运算符和grepl函数来选择不含有"layer1"和"layer3"的行
df <- df[which( !df$ident %in% Non_selected_layer), ]
df$ident <- as.character(df$ident)
library(ggpubr)
library(ggplot2)
library(ggsci)
library(ggplot2)
df$ident <- factor(df$ident,levels = c("layer_1","layer_2","layer_3","layer_4","layer_5"))

ggboxplot(df,x = "ident",y = "Prolif",color = "ident")+theme(axis.text.x = element_text(angle = 90)) 
ggsave("Prolif_layer3.pdf",width = 2,height = 4) 




#B_naive####
a <-"IL4R
FCER2
TCL1A
BACH2
"
#用的是所有T细胞的B_naive
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "B_naive")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'B_naive'
SpatialFeaturePlot(larea, features ='B_naive', alpha = c(-1, 1))+theme(aspect.ratio = 1)
ggsave("B_naive.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]#B_IGHG1####
a <-"IGHG1
IGKC
IGHG4
IGHGP
IGLC2
IGLC3
IGHG3
IGLC1
SSR4
IGHG2
XBP1
MZB1
DERL3
PRDX4
IGLV3-1
FKBP11
IGHA1
IGKV4-1
JSRP1
CD63
ITM2C
CYTOR
JCHAIN
SEC11C
RRBP1
FNDC3B
ANKRD28
SPCS3
"
#用的是所有T细胞的B_IGHG1
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "B_IGHG1")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'B_IGHG1'
SpatialFeaturePlot(larea, features ='B_IGHG1', alpha = c(-1, 1))+theme(aspect.ratio = 1)
ggsave("B_IGHG1.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]
#B_IGHA1####
a <-"JCHAIN
IGHA1
TXNDC5
PPIB
FNDC3B
IGHA2
HSP90B1
CD38
MAN1A1
PRDM1
CCDC88A
GLCCI1
SUB1
SLC44A1
TXNDC11
ANKRD28
MZB1
AL589693.1
TP63
ELL2
BCL2L11
IFNG-AS1
LINC02384
MYDGF
NCOA3
"
#用的是所有T细胞的B_IGHA1
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "B_IGHA1")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'B_IGHA1'
SpatialFeaturePlot(larea, features ='B_IGHA1', alpha = c(-1, 1))+theme(aspect.ratio = 1)
ggsave("B_IGHA1.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]

#B_mem####
a <-"ARHGAP24
BANK1
LTB
HLA-DRA
MS4A1
RIPOR2
HLA-DPB1
GPR183
TMSB4X
CD52
MACROD2
PDE4D
HLA-DQA1
CRIP1
ITGB1
KYNU
HLA-DRB5
SOX5
HLA-DPA1
ANK3
CD74
HLA-DQB1
"
#用的是所有T细胞的B_mem
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "B_mem")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'B_mem'
SpatialFeaturePlot(larea, features ='B_mem', alpha = c(-1, 1))+theme(aspect.ratio = 1)
ggsave("B_mem.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]


#B_naive3####
a <-"AFF3
TCL1A
FCRL1
COL19A1
RUBCNL
PCDH9
IGHD
PRKCE
NIBAN3
ST6GALNAC3
KHDRBS2
P2RY14
LIX1-AS1
ACSM3
IL4R
PLEKHG1
"
#用的是cellphonedb_优化过后的
a <- strsplit(a,split = "\n") 
a
cd_features <- a
larea <- AddModuleScore(larea,features = cd_features,ctrl = 100,name = "CD_Features")
colnames(larea@meta.data)
larea@meta.data <-larea@meta.data[which(!colnames(larea@meta.data) %in% "B_naive3")]
colnames(larea@meta.data)[which(colnames(larea@meta.data) %in% "CD_Features1")] <- 'B_naive3'
SpatialFeaturePlot(larea, features ='B_naive3', alpha = c(-1, 1))+theme(aspect.ratio = 1)
ggsave("B_naive3.pdf",height = 6,width = 6)
# names(larea@meta.data)
# larea@meta.data <- larea@meta.data[-c(17:25)]


#save files####
save(larea,file="final.Rdata")
setwd("D:\\ST_P6")#BRX8003456 P1
load("final.Rdata")
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(cowplot)

